<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jifeng Wu&#39;s Personal Website</title>
  
  <subtitle>Jifeng Wu&#39;s Personal Website</subtitle>
  <link href="https://jifengwu2k.github.io/atom.xml" rel="self"/>
  
  <link href="https://jifengwu2k.github.io/"/>
  <updated>2025-08-22T00:46:36.945Z</updated>
  <id>https://jifengwu2k.github.io/</id>
  
  <author>
    <name>Jifeng Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>High-Frequency Git Operations for Everyday Development</title>
    <link href="https://jifengwu2k.github.io/2025/08/21/High-Frequency-Git-Operations-for-Everyday-Development/"/>
    <id>https://jifengwu2k.github.io/2025/08/21/High-Frequency-Git-Operations-for-Everyday-Development/</id>
    <published>2025-08-22T00:43:36.000Z</published>
    <updated>2025-08-22T00:46:36.945Z</updated>
    
    <content type="html"><![CDATA[<p>Whether you're joining a new project, dealing with ignored files, orwanting to clean up your commit history, you'll often need to execute aset of Git commands. Here are some of the most frequent Git operationsyou may need in day-to-day development.</p><h2 id="connect-your-local-folder-to-a-github-repository">Connect YourLocal Folder to a GitHub Repository</h2><h3 id="scenario">Scenario</h3><p>You have an existing local folder with files and want to connect itto an already existing GitHub repository.</p><h3 id="steps">Steps</h3><p>Initialize Git in your folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>Add your GitHub repository (replace URL with your repo):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://github.com/username/repo.git<br></code></pre></td></tr></table></figure><p>Fetch remote history:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br></code></pre></td></tr></table></figure><p>Merge remote and local files, allowing unrelated histories<em>(change <code>main</code> to your repo's default branch ifnecessary)</em>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>If you see an error like:</p><blockquote><p>The following untracked working tree files would be overwritten bymerge...</p></blockquote><p>We recommend:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. Move local conflicting files to a temporary directory</span><br><span class="hljs-comment"># For example, back them up to a non-conflicting `backup` folder in the current directory</span><br><span class="hljs-built_in">mkdir</span> backup<br><span class="hljs-built_in">mv</span> conflicting-file-1 conflicting-file-2 backup/<br><br><span class="hljs-comment"># 2. Try pulling the remote repository content again</span><br>git pull origin main --allow-unrelated-histories<br><br><span class="hljs-comment"># 3. Manually merge the backed up files into the pulled files</span><br></code></pre></td></tr></table></figure><p>Commit after resolving all conflicts:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;Merge local files with remote repository&quot;</span><br></code></pre></td></tr></table></figure><p>Push to the remote repository (if needed):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --set-upstream origin main<br></code></pre></td></tr></table></figure><p><strong>The <code>--set-upstream origin main</code> option is onlyneeded for the first push; you don't need it afterward.</strong></p><h2 id="list-what-files-git-add-.-would-stage">List What Files<code>git add .</code> Would Stage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status --short<br></code></pre></td></tr></table></figure><p>Example Output:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">M file1.txt       <span class="hljs-meta"># modified file</span><br>?? <span class="hljs-keyword">new</span><span class="hljs-type">file</span>.txt     <span class="hljs-meta"># untracked file</span><br></code></pre></td></tr></table></figure><p>Breakdown:</p><ul><li><code>M</code> = Modified (but not staged)</li><li><code>??</code> = Untracked (new files)</li></ul><h2 id="remove-previously-committed-files-now-in-.gitignore">RemovePreviously Committed Files Now in <code>.gitignore</code></h2><h3 id="scenario-1">Scenario</h3><p>You added rules to <code>.gitignore</code> but some files werealready committed.</p><h3 id="steps-1">Steps</h3><p>Stage removal of all currently tracked files (but not deletelocally):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> -r --cached .<br></code></pre></td></tr></table></figure><p>Add everything back to the repo ("add" skips <code>gitignore</code>dfiles):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><p>Commit the change:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Remove ignored files from the repository&quot;</span><br></code></pre></td></tr></table></figure><p>At this point, the files are only removed from the repository<strong>from this commit onward (they'll still exist in oldercommits/history)</strong>. If you want them <strong>removed fromprevious commits as well</strong>, consider <strong>squashing multiplecommits into a single commit</strong>, as explained below.</p><h2 id="squash-multiple-commits-into-a-single-commit">Squash MultipleCommits into a Single Commit</h2><h3 id="scenario-2">Scenario</h3><p>You have made several small commits <em>(some of which may be faultyor embarassing)</em> and want to clean up history by squashing them intoone.</p><h3 id="steps-2">Steps</h3><p>Review commit history:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>Decide how many previous commits you want to squash.</p><p>Start an interactive rebase, e.g. with the last 3 commits:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~3<br></code></pre></td></tr></table></figure><p>In the opened editor:</p><ul><li>Leave <code>pick</code> for the first commit.</li><li>For the others, change <code>pick</code> to <code>squash</code> (orjust <code>s</code>).</li><li>Save and close.</li></ul><p>You will then enter a second editor session. Edit the combined commitmessage. Save and close.</p><p>Force-push the branch to rewrite history on GitHub:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --force<br></code></pre></td></tr></table></figure><h3 id="note">Note</h3><ul><li>Use squashing carefully if collaborating, as force push overwriteshistory.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Whether you&#39;re joining a new project, dealing with ignored files, or
wanting to clean up your commit history, you&#39;ll often need to execut</summary>
      
    
    
    
    <category term="DevOps" scheme="https://jifengwu2k.github.io/categories/DevOps/"/>
    
    
  </entry>
  
  <entry>
    <title>Eating in the Americas - Down-to-earth Foodstuffs</title>
    <link href="https://jifengwu2k.github.io/2025/08/21/Eating-in-the-Americas-Down-to-earth-Foodstuffs/"/>
    <id>https://jifengwu2k.github.io/2025/08/21/Eating-in-the-Americas-Down-to-earth-Foodstuffs/</id>
    <published>2025-08-21T04:00:00.000Z</published>
    <updated>2025-08-21T04:40:14.946Z</updated>
    
    <content type="html"><![CDATA[<p>吃在美洲——接地气儿的食材</p><p>Eating in the Americas - Down-to-earth Foodstuffs</p><p>这些植物和动物<strong>在美洲有原生族群</strong>：</p><p>These plants and animals have <strong>populations native to theAmericas</strong>:</p><h2 id="植物-plants">植物 Plants</h2><ul><li>天门冬目 Asparagales<ul><li>天门冬科 Asparagaceae<ul><li><strong>龙舌兰属 Agave</strong></li></ul></li><li>兰科 Orchidaceae<ul><li><strong>香荚兰属 Vanilla (香草)</strong></li></ul></li></ul></li><li>菊目 Asterales<ul><li>菊科 Asteraceae<ul><li>向日葵属 Helianthus<ul><li><strong>向日葵 H. annuus (Sunflower)</strong></li></ul></li><li><strong>松果菊属 Echinacea (紫锥花 / 紫锥菊;Echinacea)</strong></li></ul></li></ul></li><li>十字花目 Brassicales<ul><li>番木瓜科 Caricaceae<ul><li>番木瓜属 Carica<ul><li><strong>番木瓜 C. papaya (Papaya)</strong></li></ul></li></ul></li></ul></li><li>石竹目 Caryophyllales<ul><li><strong>苋科 Amaranthaceae (苋菜 / 藜麦; Amaranth /Quinoa)</strong></li><li><strong>仙人掌科 Cactaceae (仙人掌 / 火龙果 / 梨果仙人掌; Cactus /Pitaya / Strawberry Pear / Dragon Fruit / Prickly Pear)</strong></li></ul></li><li>葫芦目 Cucurbitales<ul><li>葫芦科 Cucurbitaceae<ul><li><strong>南瓜属 Cucurbita (南瓜 / 西葫芦; Squash / Pumpkin /Zucchini)</strong></li><li>葫芦属 Lagenaria<ul><li><strong>葫芦 L. siceraria (Gourd)</strong></li></ul></li></ul></li></ul></li><li>杜鹃花目 Ericales<ul><li>柿树科 Ebenaceae<ul><li><strong>柿属 Diospyros (柿子 / 君迁子; Persimmon /Date-plum)</strong></li></ul></li><li>杜鹃花科 Ericaceae<ul><li><strong>越橘屬 Vaccinium (蓝莓 / 笃斯越橘 / 蔓越莓; Blueberry /Cranberry)</strong></li></ul></li></ul></li><li>豆目 Fabales<ul><li>豆科 Fabaceae<ul><li>落花生属 Arachis<ul><li><strong>花生 A. hypogaea (Peanut)</strong></li></ul></li><li>豆薯属 Pachyrhizus<ul><li><strong>凉薯 P. erosus (Jícama)</strong></li></ul></li><li>菜豆属 Phaseolus<ul><li><strong>菜豆 P. vulgaris (芸豆 / 架豆 / 刀豆 / 肾豆 / 四季豆 / 豆角;Bean)</strong></li></ul></li></ul></li></ul></li><li>壳斗目 Fagales<ul><li>桦木科 Betulaceae<ul><li><strong>榛属 Corylus (Hazelnut)</strong></li></ul></li><li>壳斗科 Fagaceae<ul><li><strong>栗属 Castanea (Chestnut)</strong></li></ul></li></ul></li><li>胡桃目 Juglandales<ul><li>胡桃科 Juglandaceae<ul><li>山核桃属 Carya<ul><li><strong>长山核桃 C. illinoinensis (碧根果 / 胡桃;Pecan)</strong></li></ul></li><li><strong>胡桃属 Juglans (核桃; Walnut)</strong></li></ul></li></ul></li><li>唇形目 Lamiales<ul><li>唇形科 Lamiaceae<ul><li><strong>鼠尾草属 Salvia (Chia / Sage; 奇亚籽)</strong></li></ul></li></ul></li><li>樟目 Laurales<ul><li>樟科 Lauraceae<ul><li>鳄梨属 Persea<ul><li><strong>鳄梨 P. americana (牛油果; Avocado)</strong></li></ul></li></ul></li></ul></li><li>金虎尾目 Malpighiales<ul><li>大戟科 Euphorbiaceae<ul><li>木薯属 Manihot<ul><li><strong>木薯 M. esculenta (Cassava / Tapioca)</strong></li></ul></li></ul></li><li>西番莲科 Passifloraceae<ul><li>西番莲属 Passiflora<ul><li><strong>西番莲 P. edulis (百香果 / 鸡蛋果; PassionFruit)</strong></li></ul></li></ul></li></ul></li><li>锦葵目 Malvales<ul><li>锦葵科 Malvaceae<ul><li><strong>棉花属 Gossypium (Cotton)</strong></li><li>可可属 Theobroma<ul><li><strong>可可 T. cacao (Cacao / Cocoa)</strong></li></ul></li></ul></li></ul></li><li>桃金娘目 Myrtales<ul><li>桃金娘科 Myrtaceae<ul><li>番石榴属 Psidium<ul><li><strong>番石榴 P. guajava (Guava)</strong></li></ul></li></ul></li></ul></li><li>禾本目 Poales<ul><li><strong>竹亚科 Bambusoideae (Bamboo / Giant Cane / RiverCane)</strong></li><li>凤梨科 Bromeliaceae<ul><li>凤梨属 Ananas<ul><li><strong>凤梨 A. comosus (菠萝; Ananas / Pineapple)</strong></li></ul></li></ul></li><li>禾本科 Poaceae<ul><li><strong>稻属 Oryza (大米; Rice)</strong></li><li><strong>稷属 Panicum (黍 / 粟 / 糜子 / 黍稷 / 糜黍 / 稷 / 黄米 /稷米 / 粢米; Millet / Panicgrass)</strong></li><li>玉米属 Zea<ul><li><strong>玉米/玉蜀黍 Z. mays (Maize / Corn)</strong></li></ul></li><li>菰属 Zizania<ul><li><strong>菰 Z. latifolia (菰米 / 茭白; Wild Rice)</strong></li></ul></li></ul></li></ul></li><li>山龙眼目 Proteales<ul><li>莲科 Nelumbonaceae<ul><li><strong>莲属 Nelumbo (Lotus)</strong></li></ul></li></ul></li><li>蔷薇目 Rosales<ul><li>桑科 Moraceae<ul><li><strong>桑属 Morus (Mulberry)</strong></li></ul></li><li>蔷薇科 Rosaceae<ul><li><strong>山楂属 Crataegus (Hawthorn / Mayhaw /May-tree)</strong></li><li><strong>草莓属 Fragaria (Strawberry)</strong></li><li><strong>李属 Prunus (Plum / Plune)</strong></li><li><strong>悬钩子属 Rubus (树莓 / 覆盆子 / 黑莓; Raspberry /Blackberry)</strong></li></ul></li></ul></li><li>无患子目 Sapindales<ul><li>漆树科 Anacardiaceae<ul><li><strong>腰果属 Anacardium (Cashew)</strong></li></ul></li><li>无患子科 Sapindaceae<ul><li><strong>枫属 Acer (枫树 / 槭树; Maple)</strong></li></ul></li></ul></li><li>茄目 Solanales<ul><li>旋花科 Convolvulaceae<ul><li>番薯属 Ipomoea<ul><li><strong>番薯 I. batatas (红薯 / 紫薯 / 白薯; SweetPotato)</strong></li></ul></li><li>烟草属 Nicotiana<ul><li><strong>烟草 N. tabacum (Tobacco)</strong></li></ul></li><li>茄科 Solanaceae<ul><li>茄属 Solanum<ul><li><strong>马铃薯 S. tuberosum (Potato)</strong></li><li><strong>番茄 S. lycopersicum (Tomato)</strong></li></ul></li><li><strong>辣椒属 Capsicum (甜椒 / 辣椒; Bell Pepper / ChiliPepper)</strong></li><li>灯笼果属 Physalis<ul><li><strong>灯笼果 P. peruviana (姑娘果; Cape gooseberry / Goldenberry /Groundcherry)</strong></li></ul></li></ul></li></ul></li></ul></li><li>葡萄目 Vitales<ul><li>葡萄科 Vitaceae<ul><li><strong>葡萄属 Vitis (Grape)</strong></li></ul></li></ul></li></ul><h2 id="动物-animals">动物 Animals</h2><ul><li>日鲈目 Centrarchiformes<ul><li><strong>太阳鱼科 Centrarchidae (中国市面上常见的“鲈鱼”实为该科的Micropterus 黑鲈属; Bass)</strong></li></ul></li><li>鲈形目 Perciformes<ul><li>鲈科 Percidae<ul><li><strong>鲈属 Perca (Perch)</strong></li></ul></li></ul></li><li>鲑形目 Salmoniformes<ul><li>鲑科 Salmonidae<ul><li><strong>麻哈鱼属 Oncorhynchus (大麻哈鱼 / 虹鳟; Chinook Salmon /Chum Salmon / Coho Salmon / Dog Salmon / Pacific Salmon / Pink Salmon /Sockeye Salmon / Rainbow Trout)</strong></li><li>鳟属 Salmo<ul><li><strong>大西洋鲑 S. salar (三文鱼; Atlantic Salmon)</strong></li></ul></li></ul></li></ul></li><li><strong>鲶形目 Siluriformes (鲶鱼 / 塘虱 / 巴沙鱼; Catfish / Basa /Pangasius)</strong></li><li>雁形目 Anseriformes<ul><li><strong>鸭科 Anatidae (鸭 / 鸳鸯 / 凫 / 雁 / 鹅 / 天鹅; Duck / Goose/ Swan)</strong></li></ul></li><li>鸡形目 Galliformes<ul><li>雉科 Phasianidae<ul><li><strong>火鸡属 Meleagris (Turkey)</strong></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;吃在美洲——接地气儿的食材&lt;/p&gt;
&lt;p&gt;Eating in the Americas - Down-to-earth Foodstuffs&lt;/p&gt;
&lt;p&gt;这些植物和动物&lt;strong&gt;在美洲有原生族群&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;These plants and a</summary>
      
    
    
    
    <category term="Cooking" scheme="https://jifengwu2k.github.io/categories/Cooking/"/>
    
    
  </entry>
  
  <entry>
    <title>Setting Up a Headless VNC Server for Remote Desktop Access</title>
    <link href="https://jifengwu2k.github.io/2025/08/21/Setting-Up-a-Headless-VNC-Server-for-Remote-Desktop-Access/"/>
    <id>https://jifengwu2k.github.io/2025/08/21/Setting-Up-a-Headless-VNC-Server-for-Remote-Desktop-Access/</id>
    <published>2025-08-21T04:00:00.000Z</published>
    <updated>2025-08-21T21:29:13.070Z</updated>
    
    <content type="html"><![CDATA[<p>While SSH is a staple tool and almost universally understood amongLinux users, setting up <strong>VNC for remote desktop access</strong> -especially headlessly or with virtual framebuffers - remains mysteriousto many, and for good reasons:</p><ul><li>Requires understanding of X11 and graphical sessions (DISPLAYvariables, X servers, etc.)</li><li>Needs both a VNC server and a desktop environment/windowmanager</li><li>Involves properly launching graphical sessions</li></ul><p>However, for many professionals, researchers, and IT administrators,secure remote desktop access is not just a convenience - it's aninelastic requirement. Unlike other features you can work around ordelay, robust GUI access to a remote host is sometimes the only way toget mission-critical work done. For example:</p><ul><li><strong>Work-from-home</strong> mean you need to access graphicalapplications (like IDEs, simulators, and visualization tools) installedon remote lab or office machines.</li><li><strong>Remote servers without physical monitors</strong> demand aheadless-only setup - you can't just "plug in a monitor and keyboard" tostart a desktop session.</li><li><strong>Modern GUI applications</strong> sometimes can't runeffectively via X11 forwarding (like over slow networks) and absolutelyrequire a persistent desktop session.</li></ul><p>In these scenarios, there is <strong>no substitute</strong> - theneed is inelastic. You must have a reliable, secure way to run andmanage desktops remotely. Frustratingly, most available documentation isscattered, outdated, or omits crucial details.</p><p>That's why this guide exists: to provide you with a <strong>direct,practical roadmap for setting up a robust remote desktopworkflow</strong>, no matter where you work.</p><h2 id="the-three-components-of-headless-vnc">The Three Components ofHeadless VNC</h2><p>Three key components work together to present a remote desktop viaVNC:</p><h3 id="xvfb-x-virtual-framebuffer">Xvfb (X Virtual Framebuffer)</h3><p>Xvfb is a "headless" X server that implements the X11 protocol andacts like a display server, but renders everything to memory instead ofa physical monitor.</p><h3 id="x11vnc">x11vnc</h3><p>This utility acts as a bridge, allowing VNC clients to view andinteract with an existing X server session. It:</p><ul><li>Connects to the X server's framebuffer (in this case, Xvfb'sin-memory screen)</li><li>Reads pixels from the X server, and writes mouse/keyboardevents</li><li>Presents those images to a VNC client over the network, and listensfor events</li></ul><h3 id="gui-applications">GUI Applications</h3><p>These render to Xvfb's in-memory screen instead of a physical monitorvia the <code>DISPLAY</code> environment variable.</p><h2 id="step-by-step-setup-guide">Step-by-Step Setup Guide</h2><h3 id="prerequisites-remote-host">Prerequisites (Remote Host)</h3><p>First, install the necessary packages on the <strong>remotehost</strong>:</p><ul><li><code>xvfb</code></li><li><code>x11vnc</code></li><li><code>xterm</code>, <code>icewm</code> (for demonstration purposesin this tutorial)</li></ul><p><strong>We would have to run <code>xvfb</code>, <code>x11vnc</code>,and <code>xterm</code> concurrently.</strong> For this purpose, Irecommend using <code>tmux</code> (or any other comparable tool) tomanage multiple terminal windows and persistent sessions.</p><h3 id="start-the-virtual-display-remote-host">Start the Virtual Display(Remote Host)</h3><p>In your first terminal window on the remote host, start Xvfb:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Xvfb :1 -screen 0 800x600x16<br></code></pre></td></tr></table></figure><p>This creates a virtual X11 display number <code>:1</code> (using TCPport 6001) with resolution <code>800x600</code> and 16-bit colordepth.</p><p><strong>Xvfb has properly started only if the above command neitherlogs output nor exits after being invoked.</strong> If it logs messagesor exits immediately, there's a problem to solve before moving on.Common issues include:</p><ul><li>Port 6001 already in use (try a different display number like<code>:2</code>)</li><li>Permission issues with <code>/tmp/.X11-unix</code> directory. The<code>/tmp/.X11-unix</code> directory must be readable and writable.<strong>In some environments like WSL, this directory might beread-only, which will prevent Xvfb from starting properly.</strong></li></ul><h3 id="launch-the-vnc-server-remote-host">Launch the VNC Server (RemoteHost)</h3><p>In a second terminal window on the remote host, start x11vnc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x11vnc -display :1 -rfbport 5901 -localhost -forever<br></code></pre></td></tr></table></figure><p>This command:</p><ul><li>Connects to the virtual X server's framebuffer at display<code>:1</code></li><li>Listens for VNC connections on port 5901</li><li>Restricts connections to localhost only (for security, VNC is notencrypted)<ul><li><strong>Never expose VNC directly to the publicInternet!</strong></li></ul></li><li>With <code>-forever</code>, x11vnc won't exit after the last clientdisconnects</li></ul><p>After running the command:</p><ul><li>It may report <strong>authentication or password-relatederrors</strong> (which is <strong>acceptable</strong>).</li><li>But it should <strong>NOT</strong> exit after running for a while.If it exits after running for a while, there's a problem to solve beforemoving on.</li></ul><h3 id="secure-access-with-ssh-tunneling-local-machine">Secure Accesswith SSH Tunneling (Local Machine)</h3><p>VNC is not encrypted, so we'll use SSH tunneling on your<strong>local machine</strong> for security.</p><p>You can either use basic SSH port forwarding (which may beconfusing), or <ahref="https://github.com/jifengwu2k/port-tunnel-manager">set up the<code>pull_remote_port.sh</code> wrapper</a> on your <strong>localmachine</strong> to pull the remote host's port 5901 to<code>localhost:5901</code>. After <strong>cloning its GitHub repositoryand completing its prerequisites</strong>, run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash pull_remote_port.sh [-p &lt;ssh_port&gt;] -u &lt;remote_user&gt; -h &lt;remote_host&gt; -r 5901 -l 5901<br></code></pre></td></tr></table></figure><p>This makes the remote host's VNC port available on your local machinevia a secure SSH tunnel.</p><h3 id="test-with-a-simple-application-remote-host">Test with a SimpleApplication (Remote Host)</h3><p>In a third terminal window on the <strong>remote host</strong>,launch a test application:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># The `DISPLAY=:1` environment variable must be set</span><br><span class="hljs-comment"># For all GUI apps you wish to appear in the VNC session</span><br><span class="hljs-built_in">export</span> DISPLAY=:1<br>xterm<br></code></pre></td></tr></table></figure><p>Now connect to your VNC server on your <strong>local machine</strong>using a VNC client (like TigerVNC, RealVNC, or Remmina) pointing to<code>localhost:5901</code>. You should see the xterm window.</p><h3 id="using-desktop-environments-remote-host">Using DesktopEnvironments (Remote Host)</h3><p>For a full desktop experience rather than just single applications,you can install a desktop environment.</p><h4 id="lightweight-options">Lightweight Options</h4><ul><li>Openbox</li><li>Fluxbox</li><li>IceWM</li><li>WindowMaker</li></ul><h4 id="full-desktop-environments">Full Desktop Environments</h4><ul><li>GNOME</li><li>KDE Plasma</li><li>MATE</li><li>Cinnamon</li><li>LXDE</li><li>LXQt</li></ul><h4 id="example-installing-and-using-icewm-remote-host">Example:Installing and Using IceWM (Remote Host)</h4><p>In the third terminal window on the <strong>remote host</strong> (theone used to launch <code>xterm</code>), quit <code>xterm</code> andstart an IceWM session:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> DISPLAY=:1<br>icewm-session<br></code></pre></td></tr></table></figure><p>Now your VNC client on your <strong>local machine</strong> will showthe complete IceWM desktop environment.</p><figure><img src="/static/images/IceWM_desktop_environment_in_VNC_client.jpg"alt="IceWM desktop environment in VNC client" /><figcaption aria-hidden="true">IceWM desktop environment in VNCclient</figcaption></figure><h3 id="important-caveat-single-instance-applications">Important Caveat:Single-Instance Applications</h3><p>Many desktop applications are designed to run <strong>only oneinstance per user account</strong>:</p><ul><li>Browsers: Firefox, Chrome/Chromium</li><li>Advanced editors: gedit, kate, geany (configurable),code/VSCode</li><li>File managers: nautilus, pcmanfm (configurable), dolphin</li><li>Document viewers: evince</li><li>Many modern GTK/Qt apps that use D-Bus for activation</li></ul><p><strong>If your remote host has a physical desktop, and such an appis already running on your physical desktop</strong>, new instances willtry to communicate with the existing instance via D-Bus,<strong>creating windows on your physical desktop instead of in yourvirtual framebuffer, even after<code>export DISPLAY=:1</code>.</strong></p><p>Solution:</p><ul><li>Ensure applications aren't already running on your main desktopbefore launching them in your VNC session.</li><li>Or use a different user account for VNC access.</li></ul><h2 id="conclusion">Conclusion</h2><p>Setting up a headless VNC server might seem complex at first, but byunderstanding the three components (Xvfb, x11vnc, and your GUIapplications) and following this recipe, you can create a reliableremote desktop solution. Remember to always use SSH tunneling forsecurity and be mindful of single-instance applications.</p><p>With this setup, you can enjoy full graphical desktop access to yourremote Linux machines, opening up possibilities for remoteadministration, development, and troubleshooting.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;While SSH is a staple tool and almost universally understood among
Linux users, setting up &lt;strong&gt;VNC for remote desktop access&lt;/strong&gt;</summary>
      
    
    
    
    <category term="System Administration" scheme="https://jifengwu2k.github.io/categories/System-Administration/"/>
    
    
  </entry>
  
  <entry>
    <title>How to Make VS Code&#39;s Language Detection Sane (and Deterministic)</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/How-to-Make-VS-Code-s-Language-Detection-Sane-and-Deterministic/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/How-to-Make-VS-Code-s-Language-Detection-Sane-and-Deterministic/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.453Z</updated>
    
    <content type="html"><![CDATA[<p>Anyone who's used Visual Studio Code long enough has probably runinto some surprisingly silly (and maddening) mistakes from its automaticlanguage detection.</p><p>Things get especially annoying with temporary or scratch files: VSCode tries too hard to be clever and ends up insisting your random notesare "Groovy" or "Shell" scripts. If you're like me, you just want<strong>files with clear, non-ambiguous extensions</strong> mappedcorrectly, and everything else opened as <strong>plain text</strong>.Simpler, saner, less frustrating.</p><h2 id="the-fix-use-explicit-file-associations">The Fix: Use ExplicitFile Associations</h2><p>By explicitly listing out the extension - language bindings in your<code>settings.json</code>, you can make VS Code behave in a much morepredictable way.</p><ul><li>For every common, unambiguous extension (<code>.js</code>,<code>.py</code>, <code>.cpp</code>, etc.), set the language associationdirectly.</li><li>For ambiguous or tricky cases (like <code>.m</code> for bothObjective-C and MATLAB), don't specify anything - you can alwaysoverride them manually.</li><li>For all other files (including all extensionless files and temporaryfiles), <strong>force them to open as plain text</strong>.</li></ul><p>This means no more unwanted language features popping up, and everycommon language just works.</p><h2 id="how-to-set-it-up">How to Set It Up</h2><ol type="1"><li>Open the command palette (<code>Ctrl+Shift+P</code> /<code>Cmd+Shift+P</code>).</li><li>Type and select: <code>Preferences: Open Settings (JSON)</code></li><li>Replace any existing <code>"files.associations"</code> block in yourglobal <code>settings.json</code>:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Dockerfile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockerfile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Makefile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;makefile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.abap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abap&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.bat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bat&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.bib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.clj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cljc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cljs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bat&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.coffee&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coffeescript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;csharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cshtml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;razor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;css&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cuda-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cuh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cuda-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cxx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;d&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.dart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.diff&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;diff&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.erl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erlang&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fsi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.groovy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;groovy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.haml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.handlebars&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;handlebars&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hbs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;handlebars&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erlang&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haskell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.htm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ini&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ini&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jade&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;julia&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;json&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jsonc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jsonc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascriptreact&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;less&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.lua&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lua&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.markdown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;markdown&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.md&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;markdown&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.mli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.mm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;objective-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.p6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pascal&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.patch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;diff&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.phtml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pl6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ps1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.psm1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.r&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;r&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.raku&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rakumod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruby&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rust&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sass&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shellscript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.shader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shaderlab&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.slim&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;slim&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sql&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sql&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.styl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stylus&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.svelte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;svelte&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.swift&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.tex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typescript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.tsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typescriptreact&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.txt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;plaintext&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.vb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vb&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xsl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xsl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xslt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xsl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.yaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.yml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;plaintext&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Notice the last line: <code>"*": "plaintext"</code> - this forcesevery file <strong>not matched above</strong>, including all files withno extension, to open as plain text.</p><h3 id="why-this-is-so-much-better">Why this is so much better</h3><ul><li><strong>No more weird guesses:</strong> Scratch files stay as plaintext.</li><li><strong>You get what you expect:</strong> Every major extension getsits proper language features.</li><li><strong>You can still override manually:</strong> For rare ambiguouscases, you can still set the language from the bottom right and VS Coderemembers per file.</li></ul><h2 id="conclusion">Conclusion</h2><p>VS Code's default language detection tries to be smart, but oftenoutsmarts itself. By making associations deterministic and catching allother files as plain text, you make your workflow saner and morepredictable.</p><p>Try it out and enjoy a quieter, less-annoying VS Code!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Anyone who&#39;s used Visual Studio Code long enough has probably run
into some surprisingly silly (and maddening) mistakes from its automati</summary>
      
    
    
    
    <category term="Developer Experience" scheme="https://jifengwu2k.github.io/categories/Developer-Experience/"/>
    
    
  </entry>
  
  <entry>
    <title>Using DevTools Console for Web Scraping</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Using-DevTools-Console-for-Web-Scraping/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Using-DevTools-Console-for-Web-Scraping/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="convert-an-html-table-to-a-pandas-compatible-json">Convert anHTML Table to a Pandas-compatible JSON</h2><p>If you want to convert an HTML table to a Pandas-compatible JSON:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>    <span class="hljs-string">&quot;column1&quot;</span>: [value1, value2, <span class="hljs-string">...</span>],<br>    <span class="hljs-string">&quot;column2&quot;</span>: [value1, value2, <span class="hljs-string">...</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>you can do this in a browser using DOM manipulation:</p><ul><li><strong>Extract headers</strong>: Get the header text from the<code>&lt;th&gt;</code> elements.</li><li><strong>Build the output object</strong>: Each header is a keypointing to an array.</li><li><strong>Fill columns</strong>: Loop over the rows, pushing cellvalues to the appropriate key/array.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tableToPandasJson</span>(<span class="hljs-params">table</span>) &#123;<br>  <span class="hljs-comment">// Get the headers from the first row of the table head</span><br>  <span class="hljs-keyword">var</span> thead = table.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;thead&#x27;</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> headerCells = thead.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;th&#x27;</span>);<br>  <span class="hljs-keyword">var</span> headers = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; headerCells.<span class="hljs-property">length</span>; i++) &#123;<br>    headers.<span class="hljs-title function_">push</span>(headerCells[i].<span class="hljs-property">innerText</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// Initialize the result object, one array per header</span><br>  <span class="hljs-keyword">var</span> result = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; headers.<span class="hljs-property">length</span>; j++) &#123;<br>    result[headers[j]] = [];<br>  &#125;<br><br>  <span class="hljs-comment">// Go through each row in tbody</span><br>  <span class="hljs-keyword">var</span> tbody = table.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> rows = tbody.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> r = <span class="hljs-number">0</span>; r &lt; rows.<span class="hljs-property">length</span>; r++) &#123;<br>    <span class="hljs-keyword">var</span> cells = rows[r].<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;td&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span>; c &lt; headers.<span class="hljs-property">length</span>; c++) &#123;<br>      <span class="hljs-comment">// Always treat as text</span><br>      <span class="hljs-keyword">var</span> cellText = cells[c].<span class="hljs-property">innerText</span>;<br>      result[headers[c]].<span class="hljs-title function_">push</span>(cellText);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="example">Example</h3><h4 id="example-html-table">Example HTML table</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myTable&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="javascript-code">JavaScript code</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> table = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myTable&#x27;</span>);<br><span class="hljs-keyword">var</span> pandasJson = <span class="hljs-title function_">tableToPandasJson</span>(table);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(pandasJson));<br><span class="hljs-comment">// Output: &#123;&quot;Name&quot;:[&quot;Alice&quot;,&quot;Bob&quot;],&quot;Age&quot;:[&quot;25&quot;,&quot;30&quot;]&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;convert-an-html-table-to-a-pandas-compatible-json&quot;&gt;Convert an
HTML Table to a Pandas-compatible JSON&lt;/h2&gt;
&lt;p&gt;If you want to convert </summary>
      
    
    
    
    <category term="Data Science" scheme="https://jifengwu2k.github.io/categories/Data-Science/"/>
    
    
  </entry>
  
  <entry>
    <title>Copying Files via `cat` and `dd`</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Copying-Files-via-cat-and-dd/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Copying-Files-via-cat-and-dd/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:49:33.070Z</updated>
    
    <content type="html"><![CDATA[<p><code>cat</code> and <code>dd</code> are standard Unix utilities forhandling file data.</p><ul><li><code>cat</code> outputs the contents of a file to<code>stdout</code>.</li><li><code>dd</code> reads <code>stdin</code> (if no <code>if=</code>)and writes to <code>stdout</code> or a file.</li></ul><p>To copy a file, you can use a Unix pipe (<code>|</code>) to send<code>cat</code>'s output to <code>dd</code>, then write to adestination file:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> sourcefile | <span class="hljs-built_in">dd</span> of=destinationfile<br></code></pre></td></tr></table></figure><h2 id="potential-advantages-of-cat-and-dd-over-cp">Potential Advantagesof <code>cat</code> and <code>dd</code> Over <code>cp</code></h2><h3 id="better-progressstatistics"><strong>Betterprogress/statistics</strong></h3><ul><li><code>dd</code> with the <code>status=progress</code> (GNU dd)option shows live copy statistics: <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat bigfile | dd <span class="hljs-attribute">of</span>=outfile <span class="hljs-attribute">status</span>=progress<br></code></pre></td></tr></table></figure></li></ul><h3 id="working-around-cp-limitations"><strong>Working Around<code>cp</code> Limitations</strong></h3><ul><li>Some device files, file descriptors, or pseudo-files (like<code>/proc</code> or <code>/sys</code>) do not support <code>cp</code>,but streaming with <code>cat</code> + <code>dd</code> may work.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;dd&lt;/code&gt; are standard Unix utilities for
handling file data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; outputs the conten</summary>
      
    
    
    
    <category term="System Administration" scheme="https://jifengwu2k.github.io/categories/System-Administration/"/>
    
    
  </entry>
  
  <entry>
    <title>Generating Google Calendar Event URLs</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Generating-Google-Calendar-Event-URLs/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Generating-Google-Calendar-Event-URLs/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:47:45.848Z</updated>
    
    <content type="html"><![CDATA[<p>You can generate your own Google Calendar event URLs following thisgeneral structure:</p><h2 id="google-calendar-event-url-format">Google Calendar Event URLFormat</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">https:<span class="hljs-comment">//calendar.google.com/calendar/render?action=TEMPLATE&amp;</span><br>  text=EVENT_TITLE<span class="hljs-meta">&amp;</span><br>  dates=START_DATE_TIME/END_DATE_TIME<span class="hljs-meta">&amp;</span><br>  details=EVENT_DESCRIPTION<span class="hljs-meta">&amp;</span><br>  location=EVENT_LOCATION<span class="hljs-meta">&amp;</span><br>  ctz=TIMEZONE<br></code></pre></td></tr></table></figure><h2 id="parameter-breakdown"><strong>Parameter Breakdown</strong></h2><table><thead><tr class="header"><th>Parameter</th><th>Purpose</th><th>Format/Example</th><th>Required?</th></tr></thead><tbody><tr class="odd"><td><code>text</code></td><td>The event title (URL-encoded)</td><td><code>text=Grad%20Connect%202025</code></td><td>Yes</td></tr><tr class="even"><td><code>dates</code></td><td>Start/end date and time, in <code>YYYYMMDDTHHMMSS</code></td><td><code>dates=20250821T100000/20250821T130000</code> (<code>T</code>for time)</td><td>Yes</td></tr><tr class="odd"><td><code>details</code></td><td>Event description (URL-encoded)</td><td><code>details=Description%20here...</code></td><td>No</td></tr><tr class="even"><td><code>location</code></td><td>Event location (URL-encoded)</td><td><code>location=Ramin%20Room%2C%20Bartels%20Hall...</code></td><td>No</td></tr><tr class="odd"><td><code>ctz</code></td><td>IANA timezone name (URL-encoded)</td><td><code>ctz=America/New_York</code></td><td>No</td></tr></tbody></table><h2 id="create-your-own">Create Your Own</h2><p>To generate these URLs yourself, you can use the following Pythonfunction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-keyword">if</span> sys.version_info &lt; (<span class="hljs-number">3</span>,):<br>    <span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> quote<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_google_calendar_event_url</span>(<span class="hljs-params"></span><br><span class="hljs-params">    title,  <span class="hljs-comment"># type: str</span></span><br><span class="hljs-params">    start_datetime,  <span class="hljs-comment"># type: datetime.datetime</span></span><br><span class="hljs-params">    end_datetime,  <span class="hljs-comment"># type: datetime.datetime</span></span><br><span class="hljs-params">    description=<span class="hljs-literal">None</span>,  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params">    location=<span class="hljs-literal">None</span>,  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params">    iana_timezone_name=<span class="hljs-literal">None</span>  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params"></span>):<br>    base_url = <span class="hljs-string">&quot;https://calendar.google.com/calendar/render&quot;</span><br><br>    query_string_fragments = [<br>        <span class="hljs-string">&#x27;action=TEMPLATE&#x27;</span>,<br>        <span class="hljs-string">&#x27;text=%s&#x27;</span> % quote(title),<br>        <span class="hljs-string">&#x27;dates=%s/%s&#x27;</span> % (start_datetime.strftime(<span class="hljs-string">&#x27;%Y%m%dT%H%M%S&#x27;</span>), end_datetime.strftime(<span class="hljs-string">&#x27;%Y%m%dT%H%M%S&#x27;</span>))<br>    ]<br><br>    <span class="hljs-keyword">if</span> description <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;details=%s&#x27;</span> % quote(description))<br>    <br>    <span class="hljs-keyword">if</span> location <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;location=%s&#x27;</span> % quote(location))<br>    <br>    <span class="hljs-keyword">if</span> iana_timezone_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;ctz=%s&#x27;</span> % quote(iana_timezone_name))<br>    <br>    query_string = <span class="hljs-string">&#x27;&amp;&#x27;</span>.join(query_string_fragments)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%s?%s&#x27;</span> % (base_url, query_string)<br></code></pre></td></tr></table></figure><h3 id="example">Example</h3><p>Suppose you want an event: - Title: <strong>Sample Event</strong> -Date/Time: <strong>June 10, 2024, 2pm to 3:30pm</strong> - Description:<strong>Don't miss this important meeting!</strong> - Location:<strong>123 Main St, New York, NY</strong> - Time zone:<strong>America/New_York</strong></p><p>Here's how you'd create the URL:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> zoneinfo <span class="hljs-keyword">import</span> ZoneInfo<br><br><br>generate_google_calendar_event_url(<br>    title=<span class="hljs-string">&#x27;Sample Event&#x27;</span>,<br>    start_datetime=datetime.datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">00</span>),<br>    end_datetime=datetime.datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>),<br>    description=<span class="hljs-string">&quot;Don&#x27;t miss this important meeting!&quot;</span>,<br>    location=<span class="hljs-string">&#x27;123 Main St, New York, NY&#x27;</span>,<br>    iana_timezone_name=<span class="hljs-string">&#x27;America/New_York&#x27;</span><br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;You can generate your own Google Calendar event URLs following this
general structure:&lt;/p&gt;
&lt;h2 id=&quot;google-calendar-event-url-format&quot;&gt;Goog</summary>
      
    
    
    
    <category term="Process Automation" scheme="https://jifengwu2k.github.io/categories/Process-Automation/"/>
    
    
  </entry>
  
  <entry>
    <title>Manipulating `DataFrame`s Using `pandas`</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Manipulating-DataFrame-s-Using-pandas/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Manipulating-DataFrame-s-Using-pandas/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.454Z</updated>
    
    <content type="html"><![CDATA[<h2id="one-dataframe-has-the-columns-a-b-and-another-has-the-columns-a-c.-how-to-merge-into-one-dataframe-with-columns-a-b-and-c">One<code>DataFrame</code> has the columns <code>A</code>, <code>B</code>and another has the columns <code>A</code>, <code>C</code>. How to mergeinto one <code>DataFrame</code> with columns <code>A</code>,<code>B</code>, and <code>C</code>?</h2><p>You can achieve this using <code>pd.merge()</code> in<code>pandas</code> with the <code>how='outer'</code> argument. Thiswill merge on the common column <code>A</code> and include all rows fromboth DataFrames, filling in missing values (as <code>NaN</code>) wherethe data does not exist.</p><p>Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># Example data</span><br>df1 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>]<br>&#125;)<br><br>df2 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>    <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>]<br>&#125;)<br><br><span class="hljs-comment"># Merge on column &#x27;A&#x27;</span><br>merged = pd.merge(df1, df2, on=<span class="hljs-string">&#x27;A&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(merged)<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tp">   A    B    C<br><span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-keyword">X</span>  NaN<br><span class="hljs-number">1</span>  <span class="hljs-number">2</span>    <span class="hljs-keyword">Y</span>    <span class="hljs-keyword">P</span><br><span class="hljs-number">2</span>  <span class="hljs-number">3</span>    <span class="hljs-keyword">Z</span>    Q<br><span class="hljs-number">3</span>  <span class="hljs-number">4</span>  NaN    <span class="hljs-keyword">R</span><br></code></pre></td></tr></table></figure><h2 id="iterate-over-rows-and-access-columns-in-a-dataframe">Iterateover rows and access columns in a <code>DataFrame</code></h2><p>If the column names are valid Python identifiers, using<code>itertuples()</code> to yield <code>namedtuple</code>s isfastest:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> df.itertuples():<br>    <span class="hljs-built_in">print</span>(row.Index, row.A, row.B)   <span class="hljs-comment"># Access columns with dot notation</span><br></code></pre></td></tr></table></figure><p>If not all column names are valid Python identifiers (e.g., somecolumn names contain spaces), use <code>iterrows()</code> to yield anindex and a <code>Series</code> for each row:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> df.iterrows():<br>    <span class="hljs-built_in">print</span>(index, row[<span class="hljs-string">&#x27;A&#x27;</span>], row[<span class="hljs-string">&#x27;B&#x27;</span>])   <span class="hljs-comment"># Access columns via indexing</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2
id=&quot;one-dataframe-has-the-columns-a-b-and-another-has-the-columns-a-c.-how-to-merge-into-one-dataframe-with-columns-a-b-and-c&quot;&gt;One
&lt;code</summary>
      
    
    
    
    <category term="Data Science" scheme="https://jifengwu2k.github.io/categories/Data-Science/"/>
    
    
  </entry>
  
  <entry>
    <title>Powering `clangd`-based C++ IDEs with `compile_commands.json`</title>
    <link href="https://jifengwu2k.github.io/2025/08/11/Powering-clangd-based-C-IDEs-with-compile-commands-json/"/>
    <id>https://jifengwu2k.github.io/2025/08/11/Powering-clangd-based-C-IDEs-with-compile-commands-json/</id>
    <published>2025-08-11T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-compile_commands.json">What is<code>compile_commands.json?</code></h2><p><code>clangd</code>, the C++ language server that powers IDE featuresin VS Code, CLion, etc. such as <strong>code navigation, linting anderror detection, and refactoring</strong>, requires<code>compile_commands.json</code>, a JSON file that records exactly howeach source file in your project should be compiled. The example shows asimple structure:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;directory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/path/to/project&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang++ -std=c++11 -g -Og main.cpp -o main&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;main.cpp&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>Each entry contains:</p><ul><li><code>directory</code>: The absolute path of where the compilationoccurs</li><li><code>command</code>: The full compilation command (Shell featuressuch as variable and command substitution are NOT supported)</li><li><code>file</code>: The relative path of the source file beingcompiled</li></ul><h2 id="generating-compile_commands.json">Generatingcompile_commands.json</h2><p>You can create one manually as shown in the following Shellscript:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># The absolute path of the project directory (where the compilation occurs)</span><br>DIRECTORY=<span class="hljs-string">&quot;<span class="hljs-subst">$(realpath .)</span>&quot;</span><br><br><span class="hljs-comment"># The relative path of the source file being compiled</span><br>FILE=<span class="hljs-string">&#x27;main.cpp&#x27;</span><br><br><span class="hljs-comment"># The full compilation command (precompute variable and command substitutions)</span><br>COMMAND=<span class="hljs-string">&quot;clang++ -std=c++11 -g -Og -fprofile-instr-generate -fcoverage-mapping main.cpp -o main <span class="hljs-subst">$(python3-config --includes)</span> <span class="hljs-subst">$(python3-config --ldflags)</span>&quot;</span><br><br><span class="hljs-comment"># Generate `compile_commands.json` under the project directory</span><br><span class="hljs-built_in">cat</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$DIRECTORY</span>/compile_commands.json&quot;</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    &quot;directory&quot;: &quot;$DIRECTORY&quot;,</span><br><span class="hljs-string">    &quot;command&quot;: &quot;$COMMAND&quot;,</span><br><span class="hljs-string">    &quot;file&quot;: &quot;$FILE&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>This approach works well for small projects. For larger ones,consider using CMake or <code>bear</code> (for make-based projects).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;what-is-compile_commands.json&quot;&gt;What is
&lt;code&gt;compile_commands.json?&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;clangd&lt;/code&gt;, the C++ language server that</summary>
      
    
    
    
    <category term="Developer Experience" scheme="https://jifengwu2k.github.io/categories/Developer-Experience/"/>
    
    
  </entry>
  
  <entry>
    <title>英语名词新译</title>
    <link href="https://jifengwu2k.github.io/2025/07/30/%E8%8B%B1%E8%AF%AD%E5%90%8D%E8%AF%8D%E6%96%B0%E8%AF%91/"/>
    <id>https://jifengwu2k.github.io/2025/07/30/%E8%8B%B1%E8%AF%AD%E5%90%8D%E8%AF%8D%E6%96%B0%E8%AF%91/</id>
    <published>2025-07-30T04:00:00.000Z</published>
    <updated>2025-08-22T00:01:12.166Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>“哎妈呀，这不就是咱们屯子里的那个……吗！”</strong></p></blockquote><h2id="英国市制单位起源于农业生产生活实践">英国市制单位（起源于农业生产生活实践）</h2><h3 id="长度">长度</h3><ul><li>inch 英寸</li><li>foot 英尺</li><li>yard 英步</li><li>mile 英里</li></ul><blockquote><p>中国古代的长度单位主要包括以人体测量为基础的寸、尺、咫、丈、寻、仞，以及更小的单位如分、厘、毫、秒、忽。此外，还有用于较长距离的步、里、舍等单位。寸：《说文解字》定义为十分之一尺，以手掌后退一寸的动脉位置为“寸口”而命名，并以“手”字为部首。尺：最初指代人的身体长度，通常为十寸，与人体的一臂之长相关。咫：特指妇女手伸展后拇指和中指之间的距离，比尺稍短，后用来与“尺”连用，表示距离很近。丈：等于十尺，是一个较大的长度单位。 寻：与仞相当，大约为八尺。仞：指人伸开双臂的长度。 步：在古代常用于测量地面距离。里：一个源于周代的长度单位，用于测定距离。</p></blockquote><h3 id="面积">面积</h3><ul><li>acre 英亩</li></ul><h3 id="重量体积容积">重量/体积/容积</h3><ul><li>ounce 英两</li><li>pound 英斤</li><li>pint 英合</li><li>quart 英升</li><li>gallon 英斗</li><li>bushel 英斛</li></ul><blockquote><p>古代的重量计量单位中，1钧= 30斤、1斤= 16两、1两=24铢、1铢= 10圭。在古代，除了用钧、圭、铢、斤、两代表重量外，较重、较多量的物的多少更多的是采用容积来代表。从宋朝开始，我国古代的计量单位固定位石、斛、斗、升、合。它们之间的换算都是1石= 2斛、1斛 = 5斗、1斗 = 10升、1升 =10合。不过各时期所代表的实际的量不同。</p></blockquote><h2 id="政治名词">政治名词</h2><ul><li>county 县<ul><li>美国无封建传统，不得将 county 译为“郡”。</li><li>英国的“郡”英语为 shire。因此，可以将 New Hampshire翻译为“新汉普郡”。</li></ul></li><li>borough 镇（“武汉三镇”的“镇”）<ul><li>从词源上，borough 意为“a fortifiedtown”，因此翻译为“镇”而不是“区”。</li></ul></li><li>district 区</li><li>capitol 国会山</li><li>sheriff 治安官</li></ul><h2 id="专有名词">专有名词</h2><ul><li>Berkeley 桦林<ul><li>古英语的 <code>*beorc*</code> 意为桦树，<code>*leah*</code>意为林地、空地</li></ul></li><li>Carmichael 米哈伊尔堡<ul><li>苏格兰盖尔语的 <code>caer</code> 意为“要塞”或“堡垒”</li></ul></li><li>Cornell 角斗士<ul><li>古凯尔特语的 <code>corn</code> 意为“角”或“突出物”，<code>wall</code> 意为“统治者”或“勇士”</li></ul></li><li>Dunbar 山头堡<ul><li>苏格兰盖尔语的 <code>dùn</code> 意为“堡垒”，<code>barr</code>意为“顶部”或“山”</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“哎妈呀，这不就是咱们屯子里的那个……吗！”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
id=&quot;英国市制单位起源于农业生产生活实践&quot;&gt;英国市制单位（起源于农业生产生活实践）&lt;/h2&gt;
&lt;h3 id=&quot;长度&quot;&gt;长度</summary>
      
    
    
    
    <category term="Linguistics" scheme="https://jifengwu2k.github.io/categories/Linguistics/"/>
    
    
  </entry>
  
  <entry>
    <title>Metaclass Fundamentals</title>
    <link href="https://jifengwu2k.github.io/2025/07/25/Metaclass-Fundamentals/"/>
    <id>https://jifengwu2k.github.io/2025/07/25/Metaclass-Fundamentals/</id>
    <published>2025-07-25T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.454Z</updated>
    
    <content type="html"><![CDATA[<p>Metaclasses are one of Python's most powerful yet least understoodfeatures. They enable patterns that would be difficult or impossiblewith regular class definitions. In this post, we'll explore metaclassfundamentals through simple examples.</p><h2 id="what-are-metaclasses">What are Metaclasses?</h2><ul><li>A <strong>class C's metaclass</strong> is basically<code>type(C)</code>. <strong>If you define<code>class Class(metaclass=ClassMeta)</code> in Python, then<code>type(Class) is ClassMeta</code>.</strong></li><li>If we don't explicitly set a metaclass for a class, then itsmetaclass is <code>type</code> by default. <strong>Thus,<code>ClassMeta</code> should inherit from<code>type</code>.</strong></li><li>Just like given <code>o = Class(...)</code>, and that<code>Class</code> defines a method <code>def f(self, ...)</code>,<code>o.f(...)</code> would result in calling<code>Class.f(o, ...)</code>, <strong>if <code>ClassMeta</code> definesa method <code>def g(self, ...)</code>, <code>Class.g(...)</code> wouldresult in calling <code>ClassMeta.g(...)</code></strong>.</li></ul><p>We'll present a concrete example below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">type</span>.__call__(self, *args, **kwargs)  <br>        <span class="hljs-keyword">return</span> instance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>(<span class="hljs-built_in">object</span>, metaclass=ClassMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> instance<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">object</span>.__init__(self)<br></code></pre></td></tr></table></figure><p>What happens when we run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c = Class(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, message=<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>Class(0, 1, 2, message='Hello World')</code> is syntactic sugarfor <code>Class.__call__(0, 1, 2, message='Hello World')</code>.</p><p>If we haven't set a metaclass for <code>Class</code>, then this inturn invokes<code>type.__call__(Class, 0, 1, 2, message='Hello World')</code>.</p><p>However, we have set <code>Class</code>'s metaclass to<code>ClassMeta</code>, whose <code>ClassMeta.__call__</code> overrides<code>type.__call__</code>. Thus,<code>Class.__call__(0, 1, 2, message='Hello World')</code> would invoke<strong><code>ClassMeta.__call__(Class, 0, 1, 2, message='Hello World')</code></strong>instead.</p><p>With a few <code>print</code> statements added, we can see thefunction calls:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassMeta</span>.</span><span class="hljs-module"><span class="hljs-identifier">__call__</span>(</span></span>self, *args, **kwargs), self = &lt;<span class="hljs-keyword">class</span> &#x27;__main__.Class&#x27;&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">type</span>.<span class="hljs-constructor">__call__(<span class="hljs-params">self</span>, <span class="hljs-operator">*</span><span class="hljs-params">args</span>, <span class="hljs-operator">**</span><span class="hljs-params">kwargs</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__new__</span>(</span></span>cls, *args, **kwargs), cls = &lt;<span class="hljs-keyword">class</span> &#x27;__main__.Class&#x27;&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__new__(<span class="hljs-params">cls</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__new__</span>(</span></span>cls, *args, **kwargs), after calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__new__(<span class="hljs-params">cls</span>)</span>, instance: &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>(</span></span>self, *args, **kwargs), self = &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">self</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>(</span></span>self, *args, **kwargs), after calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">self</span>)</span><br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassMeta</span>.</span><span class="hljs-module"><span class="hljs-identifier">__call__</span>(</span></span>self, *args, **kwargs), after calling <span class="hljs-keyword">type</span>.<span class="hljs-constructor">__call__(<span class="hljs-params">self</span>, <span class="hljs-operator">*</span><span class="hljs-params">args</span>, <span class="hljs-operator">**</span><span class="hljs-params">kwargs</span>)</span>, instance: &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="metaclass-inheritance">Metaclass Inheritance</h2><p>Metaclasses are "contagious" - when you inherit from a class with ametaclass, the child class gets the same metaclass:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">type</span>.__call__(self, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> instance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>(<span class="hljs-built_in">object</span>, metaclass=ParentMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">object</span>.__init__(self)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = Parent.__new__(cls, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        Parent.__init__(self, *args, **kwargs)<br></code></pre></td></tr></table></figure><p>In this case,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c = Child(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, message=<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p>would still result in invoking<strong><code>ParentMeta.__call__(Child, 0, 1, 2, message='Hello World')</code></strong>.</p><h2 id="practical-application-1-singleton-pattern">Practical Application1: Singleton Pattern</h2><p>Metaclasses provide an elegant way to implement the Singletonpattern:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    _instances = &#123;&#125;<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cls._instances:<br>            cls._instances[cls] = <span class="hljs-built_in">super</span>().__call__(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls._instances[cls]<br><br><span class="hljs-comment"># SingletonBase(...) gets rerouted to SingletonMeta(SingletonBase, ...)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonBase</span>(metaclass=SingletonMeta):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># SingletonChild(...) also gets rerouted to SingletonMeta(SingletonChild, ...)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonChild</span>(<span class="hljs-title class_ inherited__">SingletonBase</span>):<br>    <span class="hljs-keyword">pass</span><br><br>a = SingletonBase()<br>b = SingletonBase()<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)  <span class="hljs-comment"># True</span><br><br>x = SingletonChild()<br>y = SingletonChild()<br><span class="hljs-built_in">print</span>(x <span class="hljs-keyword">is</span> y)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="practical-application-2-template-metaprogramming">PracticalApplication 2: Template Metaprogramming</h2><p>We can simulate C++-style templates using metaclasses:</p><p>In C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">templace &lt;V VALUE = <span class="hljs-keyword">default</span>&gt; <span class="hljs-keyword">class</span> C &#123;<br>    <span class="hljs-comment">// Use `VALUE` here</span><br>&#125;;<br><br>C&lt;v&gt; *c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">C</span>&lt;v&gt;(...);<br></code></pre></td></tr></table></figure><p>In Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    _values_to_instantiations = &#123;&#125;<br>    value = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">in</span> self._values_to_instantiations:<br>            instantiation = self._values_to_instantiations[value]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Dynamically create `self[value]` containing the class variable VALUE as a subclass of `self`</span><br>            instantiation = <span class="hljs-built_in">type</span>(<br>                <span class="hljs-string">&#x27;%s[%s]&#x27;</span> % (self.__name__, value),<br>                (self,),<br>                &#123; <span class="hljs-string">&#x27;VALUE&#x27;</span>: value &#125;<br>            )<br>            self._values_to_instantiations[value] = instantiation<br><br>        <span class="hljs-keyword">return</span> instantiation<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>(<span class="hljs-built_in">object</span>, metaclass=ClassMeta):<br>    <span class="hljs-comment"># Use `self.VALUE` or `cls.VALUE` here</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>Then, after we run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Dynamically create `Class[True]`</span><br>class_true = Class[<span class="hljs-literal">True</span>]<br><span class="hljs-comment"># Create an instance of `Class[True]`</span><br>c1 = class_true()<br><span class="hljs-comment"># Dynamically create `Class[False]`</span><br>class_false = Class[<span class="hljs-literal">False</span>]<br><span class="hljs-comment"># Create an instance of `Class[False]`</span><br>c2 = class_false()<br></code></pre></td></tr></table></figure><p>we can get something like:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c1</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">&lt;__main__.Class[<span class="hljs-literal">True</span>] at <span class="hljs-number">0x796bbb89d3a0</span>&gt;</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c2</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">&lt;__main__.Class[<span class="hljs-literal">False</span>] at <span class="hljs-number">0x796bbc53fb60</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Metaclasses are one of Python&#39;s most powerful yet least understood
features. They enable patterns that would be difficult or impossible
w</summary>
      
    
    
    
    <category term="Software Design" scheme="https://jifengwu2k.github.io/categories/Software-Design/"/>
    
    <category term="Python" scheme="https://jifengwu2k.github.io/categories/Software-Design/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Creating Custom Data Structures from Abstract Containers in `collections.abc`</title>
    <link href="https://jifengwu2k.github.io/2025/07/24/Creating-Custom-Data-Structures-from-Abstract-Containers-in-collections-abc/"/>
    <id>https://jifengwu2k.github.io/2025/07/24/Creating-Custom-Data-Structures-from-Abstract-Containers-in-collections-abc/</id>
    <published>2025-07-24T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.447Z</updated>
    
    <content type="html"><![CDATA[<h1id="creating-custom-data-structures-from-abstract-containers-in-collections.abc">CreatingCustom Data Structures from Abstract Containers in<code>collections.abc</code></h1><p>Python's <code>collections.abc</code> module provides a set ofabstract base classes (ABCs) that define the interfaces for variouscontainer types. These ABCs serve as excellent starting points when youneed to create custom data structures that behave like built-incontainers. In this post, we'll explore the hierarchy of these abstractcontainers and explain why inheriting from them is beneficial.</p><h2 id="the-hierarchy-of-abstract-containers">The Hierarchy of AbstractContainers</h2><p>The abstract container classes in <code>collections.abc</code> form alogical inheritance hierarchy that mirrors how we think about containerrelationships:</p><ul><li><strong>Container</strong> (requires <code>__contains__</code>)<ul><li>Defines the <code>in</code> operator behavior</li></ul></li><li><strong>Iterable</strong> (requires <code>__iter__</code>)<ul><li>Adds iteration capability</li></ul></li><li><strong>Sized</strong> (requires <code>__len__</code>)<ul><li>Adds length measurement capability</li></ul></li><li><strong>Collection</strong> (combines <code>Container</code>,<code>Iterable</code>, and <code>Sized</code>)<ul><li>A complete basic collection</li></ul></li></ul><p>From these fundamental abstract container classes, more specializedcontainers branch out:</p><ul><li><strong>Sequence</strong> (combines <code>Reversible</code> and<code>Collection</code>, and also requires <code>__getitem__</code>)<ul><li>Represents immutable sequences (like tuple)</li><li>Provides <code>index()</code> and <code>count()</code><strong>automatically</strong></li></ul></li><li><strong>Mapping</strong> (inherits from <code>Collection</code>, andalso requires <code>__getitem__</code>)<ul><li>Represents read-only dictionaries</li><li>Provides <code>get()</code>, <code>items()</code>,<code>keys()</code>, <code>values()</code><strong>automatically</strong></li></ul></li><li><strong>Set</strong> (inherits from <code>Collection</code>,requires no more methods)<ul><li>Represents immutable sets</li><li>Provides <code>isdisjoint()</code> and support for<code>&amp;</code>, <code>|</code>, <code>-</code>, <code>^</code>,<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,<code>&gt;=</code>, <code>==</code> operations<strong>automatically</strong></li></ul></li></ul><p>The inheritance hierarchy of all abstract container classes is asfollows:</p><pre><code class=" mermaid">classDiagram    Awaitable &lt;|-- Coroutine    Iterable &lt;|-- Reversible    Iterable &lt;|-- Iterator    Iterator &lt;|-- Generator    Sized &lt;|-- MappingView    Iterable &lt;|-- Collection    Sized &lt;|-- Collection    Container &lt;|-- Collection    Collection &lt;|-- ValuesView    MappingView &lt;|-- ValuesView    Collection &lt;|-- Mapping    Collection &lt;|-- Sequence    Reversible &lt;|-- Sequence    Sequence &lt;|-- ByteString    Sequence &lt;|-- MutableSequence    Collection &lt;|-- Set    Set &lt;|-- ItemsView    MappingView &lt;|-- ItemsView    Set &lt;|-- MutableSet    Mapping &lt;|-- MutableMapping    AsyncIterable &lt;|-- AsyncIterator    AsyncIterator &lt;|-- AsyncGenerator</code></pre><p>To get a list of all abstract methods you must implement wheninheriting an abstract container class, you can use the followingfunction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all_abstract_methods</span>(<span class="hljs-params">abstract_base_class</span>):<br>    <span class="hljs-comment"># type: (<span class="hljs-built_in">type</span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>]</span><br>    all_abstract_methods = <span class="hljs-built_in">set</span>()<br><br>    <span class="hljs-keyword">for</span> mro_entry <span class="hljs-keyword">in</span> abstract_base_class.__mro__:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(mro_entry, abc.ABCMeta) <span class="hljs-keyword">or</span> <span class="hljs-built_in">hasattr</span>(mro_entry, <span class="hljs-string">&#x27;__abstractmethods__&#x27;</span>):<br>            <span class="hljs-keyword">for</span> abstract_method <span class="hljs-keyword">in</span> mro_entry.__abstractmethods__:<br>                all_abstract_methods.add(abstract_method)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(all_abstract_methods)<br></code></pre></td></tr></table></figure><h2 id="why-inherit-from-abstract-containers">Why Inherit from AbstractContainers?</h2><p>When you create a custom data structure by inheriting from theseabstract container classes, you get several benefits:</p><ul><li><strong>Interface Clarity</strong>: The abstract container classesclearly document what abstract methods your class needs to implement tobe a proper container (see <code>get_all_abstract_methods</code>above).</li><li><strong>Type Checking Compatibility</strong>: Your custom class willbe recognized as the proper type by <code>isinstance()</code> and<code>issubclass()</code> checks, as well as by third-partytype-checking tools such as <code>mypy</code>.</li><li><strong>Automatic Method Implementation</strong>: The abstractcontainer classes provide many methods automatically once you implementthe required abstract methods (see the examples of<code>Sequence</code>, <code>Mapping</code>, and <code>Set</code>above).</li><li><strong>Consistent Behavior</strong>: Your custom container willbehave like Python developers expect it to.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;creating-custom-data-structures-from-abstract-containers-in-collections.abc&quot;&gt;Creating
Custom Data Structures from Abstract Container</summary>
      
    
    
    
    <category term="Software Design" scheme="https://jifengwu2k.github.io/categories/Software-Design/"/>
    
    <category term="Python" scheme="https://jifengwu2k.github.io/categories/Software-Design/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Packaging: Managing Package Files, Compiling Extension Modules When Building a Wheel, and Uploading to PyPI</title>
    <link href="https://jifengwu2k.github.io/2025/07/11/Python-Packaging-Managing-Package-Files-Compiling-Extension-Modules-When-Building-a-Wheel-and-Uploading-to-PyPI/"/>
    <id>https://jifengwu2k.github.io/2025/07/11/Python-Packaging-Managing-Package-Files-Compiling-Extension-Modules-When-Building-a-Wheel-and-Uploading-to-PyPI/</id>
    <published>2025-07-11T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="managing-package-files">Managing Package Files</h1><p>When creating a Python package, the location of files depends on yourproject structure.</p><h2 id="basic-pyproject.toml-configuration">Basic<code>pyproject.toml</code> Configuration</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build-system]</span><br><span class="hljs-attr">requires</span> = [<span class="hljs-string">&quot;setuptools&quot;</span>]<br><span class="hljs-attr">build-backend</span> = <span class="hljs-string">&quot;setuptools.build_meta&quot;</span><br><br><span class="hljs-section">[project]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;your-package&quot;</span>  <span class="hljs-comment"># PyPI name (can contain hyphens)</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">description</span> = <span class="hljs-string">&quot;A description of your-package&quot;</span><br><span class="hljs-attr">readme</span> = <span class="hljs-string">&quot;README.md&quot;</span><br><span class="hljs-attr">requires-python</span> = <span class="hljs-string">&quot;&gt;=2&quot;</span><br><span class="hljs-attr">license</span> = <span class="hljs-string">&quot;MIT&quot;</span><br><span class="hljs-attr">authors</span> = [<br>  &#123; name=<span class="hljs-string">&quot;Jane Doe&quot;</span>, email=<span class="hljs-string">&quot;jane.doe@example.com&quot;</span> &#125;<br>]<br><span class="hljs-attr">classifiers</span> = [<br>    <span class="hljs-string">&quot;Programming Language :: Python :: 2&quot;</span>,<br>    <span class="hljs-string">&quot;Programming Language :: Python :: 3&quot;</span>,<br>    <span class="hljs-string">&quot;Operating System :: OS Independent&quot;</span><br>]<br><span class="hljs-attr">dependencies</span> = [<br>  <span class="hljs-string">&quot;numpy&quot;</span><br>]<br><br><span class="hljs-section">[project.urls]</span><br><span class="hljs-attr">&quot;Homepage&quot;</span> = <span class="hljs-string">&quot;https://github.com/janedoe/my-package&quot;</span><br><span class="hljs-attr">&quot;Bug Tracker&quot;</span> = <span class="hljs-string">&quot;https://github.com/janedoe/my-package/issues&quot;</span><br></code></pre></td></tr></table></figure><h2 id="single-python-file-or-extension-module-as-module">Single PythonFile (or Extension Module) as Module</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">your-package/<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pyproject.toml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">your_package.py # or `your_package.cpython-312-x86_64-linux-gnu.so`, etc.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tests/</span><br></code></pre></td></tr></table></figure><p>This single-file module will be copied into the site-packagesdirectory during installation.</p><blockquote><p>⚠️ This layout makes it difficult to include non-.py or non-extensiondata files (e.g., .json, .html). If you need to include such resources,use the folder-as-module approach described below.</p></blockquote><h2 id="folder-as-module">Folder as Module</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">your-package/<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pyproject.toml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">your_package/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">module1.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">module2.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">subpackage1/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">module_a.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">subpackage2/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">module_b.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">utils/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">helpers.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">data/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">config.json</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">schema.sql</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">templates/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">default.html</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tests/</span><br></code></pre></td></tr></table></figure><p>Each subfolder intended as a submodule must include an<code>__init__.py</code> file (even if empty).</p><p>Configure pyproject.toml:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-comment"># Importable package name (no hyphens allowed)</span><br><span class="hljs-attr">packages</span> = [<span class="hljs-string">&quot;your_package&quot;</span>]<br><span class="hljs-attr">package-dir</span> = &#123;<span class="hljs-string">&quot;your_package&quot;</span> = <span class="hljs-string">&quot;your_package&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>To include non-.py or non-extension data files (e.g., configs,templates):</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-attr">include-package-data</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-section">[tool.setuptools.package-data]</span><br><span class="hljs-attr">your_package</span> = [<br>    <span class="hljs-string">&quot;data/*.json&quot;</span>,<br>    <span class="hljs-string">&quot;templates/*.html&quot;</span>,<br>    <span class="hljs-string">&quot;static/**/*&quot;</span>,  <span class="hljs-comment"># Recursively include all files under `static`</span><br>]<br></code></pre></td></tr></table></figure><h1 id="compiling-extension-modules-when-building-a-wheel">CompilingExtension Modules When Building a Wheel</h1><p>To compile extension modules when building a wheel, implement acustom setuptools <code>build_ext</code> command.</p><h2 id="project-structure">Project Structure</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">your-package/<br><span class="hljs-bullet">  -</span> pyproject.toml<br><span class="hljs-bullet">  -</span> your<span class="hljs-emphasis">_package/</span><br><span class="hljs-emphasis">    - <span class="hljs-strong">__init__</span>.py</span><br><span class="hljs-emphasis">    - _</span>build<span class="hljs-emphasis">_ext_</span>command.py # Custom <span class="hljs-code">`build_ext`</span> command<br></code></pre></td></tr></table></figure><h2id="custom-build_ext-command-your_package_build_ext_command.py">Custom<code>build_ext</code> Command(<code>your_package/_build_ext_command.py</code>)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> setuptools.command.build_ext <span class="hljs-keyword">import</span> build_ext<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_compiler</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        subprocess.check_call([<span class="hljs-string">&quot;c++&quot;</span>, <span class="hljs-string">&quot;-v&quot;</span>], stdout=subprocess.DEVNULL)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuildExtCommand</span>(<span class="hljs-title class_ inherited__">build_ext</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_compiler():<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;c++ compiler not found!&quot;</span>)<br>        subprocess.check_call([<span class="hljs-string">&quot;c++&quot;</span>, <span class="hljs-string">&quot;mymodule.cpp&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;mymodule.so&quot;</span>])<br>        <span class="hljs-built_in">super</span>().run()  <span class="hljs-comment"># Continue default build_ext flow (no-op)</span><br></code></pre></td></tr></table></figure><h2 id="pyproject.toml-configuration"><code>pyproject.toml</code>Configuration</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-comment"># Declare the package as non-ZIP-safe to ensure files are extracted during installation</span><br><span class="hljs-comment"># Required for custom build logic to execute properly</span><br><span class="hljs-attr">zip-safe</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment"># Bind the custom command to the `build_ext` phase</span><br><span class="hljs-attr">cmdclass</span> = &#123; <span class="hljs-string">&quot;build_ext&quot;</span> = <span class="hljs-string">&quot;your_package._build_ext_command.BuildExtCommand&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>If <code>BuildExtCommand</code> requires third-party libraries (e.g.,<code>pybind11</code>), declare them under<code>[build-system]</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build-system]</span><br><span class="hljs-attr">requires</span> = [<br>    <span class="hljs-string">&quot;setuptools&gt;=42&quot;</span>,<br>    <span class="hljs-string">&quot;wheel&quot;</span>,<br>    <span class="hljs-string">&quot;pybind11&gt;=2.6&quot;</span>,<br>    <span class="hljs-string">&quot;numpy&gt;=1.21&quot;</span>,<br>    <span class="hljs-string">&quot;requests&gt;=2.25&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><h1 id="uploading-to-pypi">Uploading to PyPI</h1><h2 id="install-required-tools">Install Required Tools</h2><p>First, install <code>build</code> and <code>twine</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install build twine<br></code></pre></td></tr></table></figure><h2 id="build-the-package">Build the Package</h2><p>Run the following command in your project's root directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m build<br></code></pre></td></tr></table></figure><p>This generates <code>.tar.gz</code> and <code>.whl</code> files inthe <code>dist/</code> folder.</p><h2 id="upload-to-pypi">Upload to PyPI</h2><p>Use <code>twine</code> to upload your package. Navigate to the<code>dist/</code> directory and run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">twine upload dist/*<br></code></pre></td></tr></table></figure><p>You'll be prompted for your PyPI API token. Refer to the <ahref="https://packaging.python.org/latest/guides/publishing-packages/">officialPyPI documentation</a> for details.</p><h2 id="verify-publication">Verify Publication</h2><p>After uploading, check PyPI to see if your package is listed: <ahref="https://pypi.org/">https://pypi.org/</a></p><p>Search for your package name-it may take a few minutes to appear.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;managing-package-files&quot;&gt;Managing Package Files&lt;/h1&gt;
&lt;p&gt;When creating a Python package, the location of files depends on your
project</summary>
      
    
    
    
    <category term="DevOps" scheme="https://jifengwu2k.github.io/categories/DevOps/"/>
    
    
  </entry>
  
  <entry>
    <title>用汉语拼音解读国际音标，快速读出任何语言的发音</title>
    <link href="https://jifengwu2k.github.io/2025/06/30/%E7%94%A8%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E8%A7%A3%E8%AF%BB%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87%EF%BC%8C%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%87%BA%E4%BB%BB%E4%BD%95%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%91%E9%9F%B3/"/>
    <id>https://jifengwu2k.github.io/2025/06/30/%E7%94%A8%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E8%A7%A3%E8%AF%BB%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87%EF%BC%8C%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%87%BA%E4%BB%BB%E4%BD%95%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%91%E9%9F%B3/</id>
    <published>2025-06-30T04:00:00.000Z</published>
    <updated>2025-08-21T23:04:07.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>语言是用来交流的，不是用来炫耀、排斥、孤立的。</strong></p></blockquote><p>你是否遇到过这种情况？</p><ul><li>在土耳其旅游，想对店员说一句“Teşekkürederim”，但看着字母完全不会读？</li><li>在冰岛听到地名“Eyjafjallajökull”，直接放弃尝试？</li><li>想学几句格鲁吉亚语、阿拉伯语，但连音标都看不懂？</li></ul><p>我们大多数人只学过<strong>汉语拼音和英语</strong>，但国际音标（IPA）里很多符号看起来像天书。其实，它们大多能用拼音的发音“近似替代”——<strong>不追求100%准确，但能让你开口，对方听得懂！</strong></p><h2 id="辅音">辅音</h2><ul><li><code>ʔ</code> - 汉语拼音a</li><li><code>ʕ</code> - 汉语拼音à，加强喉咙发声出气，降低音调<ul><li>阿拉伯语<code>ع</code></li><li>希伯来语<code>ע</code></li></ul></li><li><code>p</code><ul><li>突厥语、日耳曼语系（英语、德语等）：汉语拼音p（清辅音/送气音）</li><li>罗曼语系（法语、西班牙语等）：汉语拼音b（浊辅音/不送气音）</li></ul></li><li><code>ɸ</code> - 汉语拼音f</li><li><code>ɲ</code> - 汉语拼音ni<ul><li>西班牙语<code>ñ</code></li></ul></li><li><code>t</code><ul><li>突厥语、日耳曼语系（英语、德语等）：汉语拼音t（清辅音/送气音）</li><li>罗曼语系（法语、西班牙语等）：汉语拼音d（浊辅音/不送气音）</li></ul></li><li><code>ɳ</code> - 汉语拼音na</li><li><code>ɾ</code> - 急促的汉语拼音l，快速往后收舌头<ul><li>日语罗马音<code>r</code></li><li>韩语<code>ㄹ</code>（常音译为"r"或"l"）</li><li>突厥语<code>r</code></li><li>西班牙语<code>r</code></li></ul></li><li><code>ɫ</code> - 汉语拼音ou</li><li><code>q</code>, <code>ɢ</code> - 汉语拼音ga<ul><li>突厥语<code>q</code></li><li>阿拉伯语<code>ق</code>（常音译为"q"）</li><li>希伯来语<code>ק</code></li></ul></li><li><code>k</code><ul><li>突厥语、日耳曼语系（英语、德语等）：汉语拼音k（清辅音/送气音）</li><li>罗曼语系（法语、西班牙语等）：汉语拼音g（浊辅音/不送气音）</li></ul></li><li><code>ħ</code> - 汉语拼音ha，加强喉咙发声出气，舌头往后卷，提高音调<ul><li>阿拉伯语<code>ح</code></li><li>希伯来语<code>ח</code>（发音之一）</li></ul></li><li><code>x</code>, <code>χ</code> -汉语拼音he，加强喉咙发声出气，降低音调<ul><li>突厥语<code>x</code></li><li>阿拉伯语<code>خ</code>（常音译为"kh"）</li><li>希伯来语<code>ח</code>（发音之一，常音译为"ch"）</li><li>希伯来语<code>כ</code>（发音之一）</li><li>俄语<code>х</code></li><li>西班牙语<code>j</code></li><li>西班牙语<code>x</code>（发音之一）</li><li>德语<code>ch</code>（发音之一）</li></ul></li><li><code>ɣ</code>, <code>ʁ</code> -汉语拼音e，加强喉咙发声出气，降低音调<ul><li>突厥语<code>ğ</code></li><li>阿拉伯语<code>غ</code>（常音译为"gh"）</li><li>法语<code>r</code></li><li>德语<code>r</code></li></ul></li><li><code>dʒ</code>, <code>dʑ</code>, <code>tɕ</code> - 汉语拼音j</li><li><code>ɕ</code>, <code>ç</code>, <code>ɬ</code> - 汉语拼音x<ul><li>德语<code>ch</code>（发音之一）</li></ul></li><li><code>ʈʂ</code>, <code>ɖʐ</code> - 汉语拼音zh</li><li><code>ʃ</code>, <code>ʂ</code> - 汉语拼音sh</li><li><code>ʒ</code>, <code>ʐ</code> - 汉语拼音r</li><li><code>r</code> -颤音，发不出来用上面的<code>ɾ</code>、<code>ɣ</code>、<code>ʁ</code>完美替换。</li><li><code>dz</code> - 汉语拼音z</li><li><code>ts</code> - 汉语拼音c</li><li><code>ʝ</code>, <code>ʎ</code>, <code>ʑ</code> - 汉语拼音yà<ul><li>西班牙语<code>ll</code></li></ul></li><li><code>β</code> - 汉语拼音v<ul><li>西班牙语<code>b</code>（发音之一）</li><li>西班牙语<code>v</code>（发音之一）</li></ul></li><li><code>ʋ</code> - 介于汉语拼音v和w之间</li></ul><h2 id="元音">元音</h2><ul><li><code>ɑ</code> - 汉语拼音a</li><li><code>ʌ</code>, <code>ɒ</code> - 汉语拼音à</li><li><code>ɪ</code>, <code>ɛ</code> - 汉语拼音ài</li><li><code>æ</code> - 美式英语apple的a</li><li><code>o</code>, <code>ɞ</code> - 汉语拼音ou</li><li><code>ɔ</code> - 汉语拼音ò</li><li><code>ʏ</code>, <code>ø</code>, <code>œ</code> -介于汉语拼音o和ü之间，圆口<ul><li>突厥语<code>ö</code></li><li>德语<code>ö</code>（常音译为"oe"）</li></ul></li><li><code>ə</code>, <code>ʊ</code>, <code>ɤ</code> - 汉语拼音e</li><li><code>ɨ</code>, <code>ʉ</code>, <code>ɯ</code> -介于汉语拼音e和ü之间，扁口<ul><li>日语<code>う/ウ</code>（常音译为"u"）</li><li>突厥语<code>ı</code></li></ul></li><li><code>i</code> - 汉语拼音i</li><li><code>u</code> - 汉语拼音u</li><li><code>y</code> - 汉语拼音ü</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;语言是用来交流的，不是用来炫耀、排斥、孤立的。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你是否遇到过这种情况？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在土耳其旅游，想对店员说一句“Teşekkür
ederim”，但看着字母</summary>
      
    
    
    
    <category term="Linguistics" scheme="https://jifengwu2k.github.io/categories/Linguistics/"/>
    
    
  </entry>
  
  <entry>
    <title>Lessons learned from Master&#39;s thesis</title>
    <link href="https://jifengwu2k.github.io/2024/08/23/Lessons-learned-from-master-s-thesis/"/>
    <id>https://jifengwu2k.github.io/2024/08/23/Lessons-learned-from-master-s-thesis/</id>
    <published>2024-08-23T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.453Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Firmly define the research topic.</li><li>Do literature research based on keywords, never limit the scope ofjournals and conferences, and continue literature research even afterstarting the project.</li><li>Collect baselines and benchmarks as soon as possible; make sure thebaselines and benchmarks are downloaded and can be run.</li><li>Focus on the NOVELTY of the core aspects; don't be perfect, anddon't support all cases or possibilities.</li><li>Find a few small examples that prove the power of your novelty, andemphasize it in both the paper and the presentation.</li><li>Avoid designing overly complex rule-based systems.</li><li>With GenAI, aim to get a prototype and an illustrative presentationout as soon as possible. This will allow you to collect feedback early,empowering you to make necessary adjustments and improvements.</li><li>Use functional programming architecture that is easy to test.Conduct thorough unit testing, document the coverage, and leave tracesof development step by step. This will provide a solid foundation andinstill confidence in the robustness of your research.</li><li>Insert breakpoints where you're unsure how to code. Figure out whatto do when encountering them, and refine the unit tests in theprocess.</li><li>Don't be perfect; start writing your thesis when you're almostdone.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Firmly define the research topic.&lt;/li&gt;
&lt;li&gt;Do literature research based on keywords, never limit the scope of
journals and conferen</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Talking back and confidence</title>
    <link href="https://jifengwu2k.github.io/2024/07/07/Talking-back-and-confidence/"/>
    <id>https://jifengwu2k.github.io/2024/07/07/Talking-back-and-confidence/</id>
    <published>2024-07-07T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>一个人在听到建议的时候喜欢顶嘴，有叛逆心理，某种意义上是想要证明自己，挽回一些自尊与自信，但又暂时没有强大的以自身实力为基础的自信。面对这种情形，我们虽然会不太舒服，但最好不要顶回去，或者是尝试说服对方，这些只会让对方感到更不愉快，进而也让自己感到更不愉快，既不治标也不治本。更好的做法是去承受，去服输，去退一步，不争了，而是借对方的某个观点转移话题——给对方认可、自信与陪伴，和对方一起去进步，去提升，去做需要做的事情。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>A person who likes to talk back when they hear a suggestion has arebellious mentality and, in a sense, wants to prove themselves toregain some self-esteem and self-confidence, but for the time being,does not have a robust and deep-rooted self-confidence based on theirstrength. Although we will be uncomfortable in this situation, it isbest not to talk back or try to persuade the other party. These willonly make the other party feel more unpleasant and, in turn, makethemselves feel more unpleasant - solving neither the symptoms nor theroot cause of the problem. The better thing to do is to suffer, to givein, to step back, not to argue, but to take advantage of one of theother person's points to change the subject - to give the other personrecognition, self-confidence, and companionship, and together with theother person to progress, to improve, to do what needs to be done.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;一个人在听到建议的时候喜欢顶嘴，有叛逆心理，某种意义上是想要证明自己，挽回一些自尊与自信，但又暂时没有强大的以自身实力为基础的自信。面对这种情形，我们虽然会不太舒服，但最好不</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Some thoughts about chatting</title>
    <link href="https://jifengwu2k.github.io/2024/07/05/Some-thoughts-about-chatting/"/>
    <id>https://jifengwu2k.github.io/2024/07/05/Some-thoughts-about-chatting/</id>
    <published>2024-07-05T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>关于聊天的一点思考：</p><ul><li>开始之前预定一个时间，设置一个时间上的边界感；时间上没有边界感容易让我们没话找话，寻找一些无聊的话题，让对方失去兴趣，甚至不断地因此而擦出矛盾来。</li><li>对方做得不对，我们要简明扼要地点出来，点到为止，然后换下一个话题；切忌在这种情况下，主动地理论、解释，尝试说服对方。</li></ul><hr /><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Some thoughts about chatting:</p><ul><li>Before starting, arrange a time and set a sense of time boundaries.Lacking such a sense makes us constantly look for boring topics when wehave nothing to say, which may lead to the other party losing interestand result in conflicts.</li><li>If the other party is not doing right, we have to point it outsuccinctly, avoid being overly verbose, and then promptly change to thenext topic; do not take the initiative to theorize, explain, and try topersuade the other party in this situation.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;关于聊天的一点思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始之前预定一个时间，设置一个时间上的边界感；时间上没有边界感容易让我们没话找话，寻找一些无聊的话题，让对方失去兴趣，甚至不断</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Pay attention to the other person&#39;s easily overlooked emotional state when chatting online</title>
    <link href="https://jifengwu2k.github.io/2024/07/02/Pay-Attention-to-the-Other-Person-s-Easily-Overlooked-Emotional-State-When-Chatting-Online/"/>
    <id>https://jifengwu2k.github.io/2024/07/02/Pay-Attention-to-the-Other-Person-s-Easily-Overlooked-Emotional-State-When-Chatting-Online/</id>
    <published>2024-07-02T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>线上聊天一定要关注对方容易被忽视的情绪状态。</p><p>与线下聊天相比，线上聊天少了很多关键的nonverbalcontext，其中就包括对方的情绪状态。线上聊天还是在和人说话，而不是在和人工智能说话，人的情绪状态会对聊天的走向产生极大的影响。但不是所有的人都擅于、习惯于或想要表达情绪。在这种情况下，我们极易在线上聊天的过程中，因为对方在某种我们尚不清楚的情绪的影响下，不按我们的预期聊天，而让我们做出很多误解误判。为了避免由此产生的一些不愉快的情形，我们可以：</p><ul><li>在聊天一开始的时候就去了解对方的情绪状态，如可以直接在寒暄的过程中问。</li><li>在聊天进行的过程中时刻去关注对方的情绪状态。包括时不时主动问问对方感觉如何（哪怕对方没有任何反馈或暗示），绝不能自己一个人旁若无人滔滔不绝地讲。同时也要清楚地意识到，对方的任何表达都有可能是心境的投射。我们要从中捕获尽可能多的信息来。</li></ul><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Pay attention to the other person's easily overlooked emotional statewhen chatting online.</p><p>Compared to offline chatting, online chatting has a much lesscritical nonverbal context, including the other person's emotionalstate. Online chatting is still talking to a human being, not an AI, anda person's emotional state can have a huge impact on the direction ofthe chat. But not all people are good at, used to, or want to expressemotions. In this case, it is very easy for us to make a lot ofmisunderstandings and misjudgments during an online chat because theother person, under the influence of some emotion we are not yet awareof, does not chat as we expect. These misunderstandings cansignificantly alter the course of the conversation, leading to potentialconflicts or misinterpretations. In order to avoid some unpleasantsituations arising from this, we can:</p><ul><li>At the beginning of the chat, it's crucial to understand the otherparty's emotional state. This can be achieved by asking directly duringthe initial small talk.</li><li>When chatting, always consider the other party's emotional state.This includes taking the initiative to ask the other person from time totime how they are feeling (even if the other person does not have anyfeedback or hints) and never speaking on your own like there is no oneelse. It's also important to realize that any expression of the otherperson may be a projection of their state of mind. We need to capture asmuch information from it as possible.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;线上聊天一定要关注对方容易被忽视的情绪状态。&lt;/p&gt;
&lt;p&gt;与线下聊天相比，线上聊天少了很多关键的nonverbal
context，其中就包括对方的情绪状态。线上聊天还是在</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Show, not tell</title>
    <link href="https://jifengwu2k.github.io/2024/06/20/Show-not-tell/"/>
    <id>https://jifengwu2k.github.io/2024/06/20/Show-not-tell/</id>
    <published>2024-06-20T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>导师在告诉我如何回答reviewers comments的时候曾经说过：“show, nottell”。意思是面对他们希望我们加baseline和metric的comments，在点到我们要加上他们之后，最好展现一些初步结果（比如说在部分数据集上评测那些baseline和metric），而不是一味地说服对方我们之后一定能加上去。</p><p>感觉这种思想用在日常生活中的说服上也是很值得借鉴的：在点出一件事之后，如果对方认可了，更好的做法是以身作则去示范他或者是展现自己怎么想，而不是一味地去说服对方应该怎么怎么做。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>My mentor once said "show, not tell" when he told me how to answerreviewers comments. The idea is that when faced with comments that theywant us to add baselines and metrics to, it is better to show somepreliminary results (e.g., evaluating those baselines and metrics on apart of the dataset) after pointing out that we want to add them to,instead of just convincing the other party that we will definitely beable to add them afterward.</p><p>I feel that this idea is also useful for persuasion in daily life:after pointing out something, if the other person approves of it, it'sbetter to set an example by demonstrating what he thinks or showing whathe thinks, rather than just trying to convince the other person of whathe should do.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;导师在告诉我如何回答reviewers comments的时候曾经说过：“show, not
tell”。意思是面对他们希望我们加baseline和metric的commen</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Our minds are, indeed, the minds of engineers</title>
    <link href="https://jifengwu2k.github.io/2024/06/19/Our-minds-are-indeed-the-minds-of-engineers/"/>
    <id>https://jifengwu2k.github.io/2024/06/19/Our-minds-are-indeed-the-minds-of-engineers/</id>
    <published>2024-06-19T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>我们的思维，的确是工程师的思维。这体现在我们日常生活的方方面面：不论是开车，还是做菜，还是写代码，还是制定计划，我们总是会非常关注计划，关注流程，关注优化，关注总结，关注反馈；而我们的头脑没有那么敏捷，不擅长理论创新——我们是罗马人，而非希腊人。</p><p>我们不应该误入理论创新的歧途。是的，我们确实对理论很感兴趣，但是那种兴趣不是形而上的对理论本身的兴趣，而是对理论有何价值以及如何落地的兴趣。</p><p>当下的热点是什么？我们应该如何结合某个具体的工业背景，有效而创造性地运用那些理论解决现实问题。这应该是我们的主业。而去研究理论，并思考如何创造性地使用它们，是我们的副业与兴趣爱好。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Our minds are, indeed, the minds of engineers. This is reflected inevery aspect of our daily lives: whether we are driving, cooking,writing code, or making plans, we will always pay great attention to theplan, to the process, to the optimization, to the summary, and to thefeedback; and our minds are not as agile and not as good at theoreticalinnovation - we are Romans, not Greeks!</p><p>We shouldn't get sidetracked into theoretical innovation. Yes, we dohave an interest in theory, but that interest is not metaphysicalinterest in the theory itself, it is interest in what the theory isworth and how it can be implemented.</p><p>What are the hot topics of the moment? How should we effectively andcreatively apply those theories to solve real-world problems in aspecific industrial context. That should be our main business. Studyingtheories and thinking about how to use them creatively is our sideproject and hobby.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;我们的思维，的确是工程师的思维。这体现在我们日常生活的方方面面：不论是开车，还是做菜，还是写代码，还是制定计划，我们总是会非常关注计划，关注流程，关注优化，关注总结，关注反馈</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
</feed>
