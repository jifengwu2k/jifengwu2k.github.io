<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jifeng Wu&#39;s Personal Website</title>
  
  <subtitle>Jifeng Wu&#39;s Personal Website</subtitle>
  <link href="https://jifengwu2k.github.io/atom.xml" rel="self"/>
  
  <link href="https://jifengwu2k.github.io/"/>
  <updated>2025-08-13T04:31:00.453Z</updated>
  <id>https://jifengwu2k.github.io/</id>
  
  <author>
    <name>Jifeng Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to Make VS Code&#39;s Language Detection Sane (and Deterministic)</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/How-to-Make-VS-Code-s-Language-Detection-Sane-and-Deterministic/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/How-to-Make-VS-Code-s-Language-Detection-Sane-and-Deterministic/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.453Z</updated>
    
    <content type="html"><![CDATA[<p>Anyone who's used Visual Studio Code long enough has probably runinto some surprisingly silly (and maddening) mistakes from its automaticlanguage detection.</p><p>Things get especially annoying with temporary or scratch files: VSCode tries too hard to be clever and ends up insisting your random notesare "Groovy" or "Shell" scripts. If you're like me, you just want<strong>files with clear, non-ambiguous extensions</strong> mappedcorrectly, and everything else opened as <strong>plain text</strong>.Simpler, saner, less frustrating.</p><h2 id="the-fix-use-explicit-file-associations">The Fix: Use ExplicitFile Associations</h2><p>By explicitly listing out the extension - language bindings in your<code>settings.json</code>, you can make VS Code behave in a much morepredictable way.</p><ul><li>For every common, unambiguous extension (<code>.js</code>,<code>.py</code>, <code>.cpp</code>, etc.), set the language associationdirectly.</li><li>For ambiguous or tricky cases (like <code>.m</code> for bothObjective-C and MATLAB), don't specify anything - you can alwaysoverride them manually.</li><li>For all other files (including all extensionless files and temporaryfiles), <strong>force them to open as plain text</strong>.</li></ul><p>This means no more unwanted language features popping up, and everycommon language just works.</p><h2 id="how-to-set-it-up">How to Set It Up</h2><ol type="1"><li>Open the command palette (<code>Ctrl+Shift+P</code> /<code>Cmd+Shift+P</code>).</li><li>Type and select: <code>Preferences: Open Settings (JSON)</code></li><li>Replace any existing <code>"files.associations"</code> block in yourglobal <code>settings.json</code>:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Dockerfile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockerfile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Makefile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;makefile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.abap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abap&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.bat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bat&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.bib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.clj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cljc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cljs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bat&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.coffee&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coffeescript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;csharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cshtml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;razor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;css&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cuda-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cuh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cuda-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cxx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;d&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.dart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.diff&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;diff&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.erl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erlang&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fsi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.groovy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;groovy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.haml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.handlebars&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;handlebars&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hbs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;handlebars&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erlang&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haskell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.htm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ini&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ini&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jade&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;julia&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;json&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jsonc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jsonc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascriptreact&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;less&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.lua&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lua&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.markdown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;markdown&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.md&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;markdown&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.mli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.mm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;objective-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.p6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pascal&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.patch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;diff&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.phtml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pl6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ps1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.psm1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.r&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;r&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.raku&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rakumod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruby&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rust&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sass&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shellscript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.shader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shaderlab&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.slim&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;slim&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sql&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sql&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.styl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stylus&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.svelte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;svelte&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.swift&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.tex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typescript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.tsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typescriptreact&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.txt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;plaintext&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.vb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vb&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xsl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xsl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xslt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xsl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.yaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.yml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;plaintext&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Notice the last line: <code>"*": "plaintext"</code> - this forcesevery file <strong>not matched above</strong>, including all files withno extension, to open as plain text.</p><h3 id="why-this-is-so-much-better">Why this is so much better</h3><ul><li><strong>No more weird guesses:</strong> Scratch files stay as plaintext.</li><li><strong>You get what you expect:</strong> Every major extension getsits proper language features.</li><li><strong>You can still override manually:</strong> For rare ambiguouscases, you can still set the language from the bottom right and VS Coderemembers per file.</li></ul><h2 id="conclusion">Conclusion</h2><p>VS Code's default language detection tries to be smart, but oftenoutsmarts itself. By making associations deterministic and catching allother files as plain text, you make your workflow saner and morepredictable.</p><p>Try it out and enjoy a quieter, less-annoying VS Code!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Anyone who&#39;s used Visual Studio Code long enough has probably run
into some surprisingly silly (and maddening) mistakes from its automati</summary>
      
    
    
    
    <category term="Developer Experience" scheme="https://jifengwu2k.github.io/categories/Developer-Experience/"/>
    
    
  </entry>
  
  <entry>
    <title>Using DevTools Console for Web Scraping</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Using-DevTools-Console-for-Web-Scraping/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Using-DevTools-Console-for-Web-Scraping/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="convert-an-html-table-to-a-pandas-compatible-json">Convert anHTML Table to a Pandas-compatible JSON</h2><p>If you want to convert an HTML table to a Pandas-compatible JSON:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>    <span class="hljs-string">&quot;column1&quot;</span>: [value1, value2, <span class="hljs-string">...</span>],<br>    <span class="hljs-string">&quot;column2&quot;</span>: [value1, value2, <span class="hljs-string">...</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>you can do this in a browser using DOM manipulation:</p><ul><li><strong>Extract headers</strong>: Get the header text from the<code>&lt;th&gt;</code> elements.</li><li><strong>Build the output object</strong>: Each header is a keypointing to an array.</li><li><strong>Fill columns</strong>: Loop over the rows, pushing cellvalues to the appropriate key/array.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tableToPandasJson</span>(<span class="hljs-params">table</span>) &#123;<br>  <span class="hljs-comment">// Get the headers from the first row of the table head</span><br>  <span class="hljs-keyword">var</span> thead = table.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;thead&#x27;</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> headerCells = thead.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;th&#x27;</span>);<br>  <span class="hljs-keyword">var</span> headers = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; headerCells.<span class="hljs-property">length</span>; i++) &#123;<br>    headers.<span class="hljs-title function_">push</span>(headerCells[i].<span class="hljs-property">innerText</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// Initialize the result object, one array per header</span><br>  <span class="hljs-keyword">var</span> result = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; headers.<span class="hljs-property">length</span>; j++) &#123;<br>    result[headers[j]] = [];<br>  &#125;<br><br>  <span class="hljs-comment">// Go through each row in tbody</span><br>  <span class="hljs-keyword">var</span> tbody = table.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> rows = tbody.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> r = <span class="hljs-number">0</span>; r &lt; rows.<span class="hljs-property">length</span>; r++) &#123;<br>    <span class="hljs-keyword">var</span> cells = rows[r].<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;td&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span>; c &lt; headers.<span class="hljs-property">length</span>; c++) &#123;<br>      <span class="hljs-comment">// Always treat as text</span><br>      <span class="hljs-keyword">var</span> cellText = cells[c].<span class="hljs-property">innerText</span>;<br>      result[headers[c]].<span class="hljs-title function_">push</span>(cellText);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="example">Example</h3><h4 id="example-html-table">Example HTML table</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myTable&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="javascript-code">JavaScript code</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> table = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myTable&#x27;</span>);<br><span class="hljs-keyword">var</span> pandasJson = <span class="hljs-title function_">tableToPandasJson</span>(table);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(pandasJson));<br><span class="hljs-comment">// Output: &#123;&quot;Name&quot;:[&quot;Alice&quot;,&quot;Bob&quot;],&quot;Age&quot;:[&quot;25&quot;,&quot;30&quot;]&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;convert-an-html-table-to-a-pandas-compatible-json&quot;&gt;Convert an
HTML Table to a Pandas-compatible JSON&lt;/h2&gt;
&lt;p&gt;If you want to convert </summary>
      
    
    
    
    <category term="Data Science" scheme="https://jifengwu2k.github.io/categories/Data-Science/"/>
    
    
  </entry>
  
  <entry>
    <title>Copying Files via `cat` and `dd`</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Copying-Files-via-cat-and-dd/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Copying-Files-via-cat-and-dd/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:49:33.070Z</updated>
    
    <content type="html"><![CDATA[<p><code>cat</code> and <code>dd</code> are standard Unix utilities forhandling file data.</p><ul><li><code>cat</code> outputs the contents of a file to<code>stdout</code>.</li><li><code>dd</code> reads <code>stdin</code> (if no <code>if=</code>)and writes to <code>stdout</code> or a file.</li></ul><p>To copy a file, you can use a Unix pipe (<code>|</code>) to send<code>cat</code>'s output to <code>dd</code>, then write to adestination file:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> sourcefile | <span class="hljs-built_in">dd</span> of=destinationfile<br></code></pre></td></tr></table></figure><h2 id="potential-advantages-of-cat-and-dd-over-cp">Potential Advantagesof <code>cat</code> and <code>dd</code> Over <code>cp</code></h2><h3 id="better-progressstatistics"><strong>Betterprogress/statistics</strong></h3><ul><li><code>dd</code> with the <code>status=progress</code> (GNU dd)option shows live copy statistics: <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat bigfile | dd <span class="hljs-attribute">of</span>=outfile <span class="hljs-attribute">status</span>=progress<br></code></pre></td></tr></table></figure></li></ul><h3 id="working-around-cp-limitations"><strong>Working Around<code>cp</code> Limitations</strong></h3><ul><li>Some device files, file descriptors, or pseudo-files (like<code>/proc</code> or <code>/sys</code>) do not support <code>cp</code>,but streaming with <code>cat</code> + <code>dd</code> may work.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;dd&lt;/code&gt; are standard Unix utilities for
handling file data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; outputs the conten</summary>
      
    
    
    
    <category term="System Administration" scheme="https://jifengwu2k.github.io/categories/System-Administration/"/>
    
    
  </entry>
  
  <entry>
    <title>Generating Google Calendar Event URLs</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Generating-Google-Calendar-Event-URLs/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Generating-Google-Calendar-Event-URLs/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:47:45.848Z</updated>
    
    <content type="html"><![CDATA[<p>You can generate your own Google Calendar event URLs following thisgeneral structure:</p><h2 id="google-calendar-event-url-format">Google Calendar Event URLFormat</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">https:<span class="hljs-comment">//calendar.google.com/calendar/render?action=TEMPLATE&amp;</span><br>  text=EVENT_TITLE<span class="hljs-meta">&amp;</span><br>  dates=START_DATE_TIME/END_DATE_TIME<span class="hljs-meta">&amp;</span><br>  details=EVENT_DESCRIPTION<span class="hljs-meta">&amp;</span><br>  location=EVENT_LOCATION<span class="hljs-meta">&amp;</span><br>  ctz=TIMEZONE<br></code></pre></td></tr></table></figure><h2 id="parameter-breakdown"><strong>Parameter Breakdown</strong></h2><table><thead><tr class="header"><th>Parameter</th><th>Purpose</th><th>Format/Example</th><th>Required?</th></tr></thead><tbody><tr class="odd"><td><code>text</code></td><td>The event title (URL-encoded)</td><td><code>text=Grad%20Connect%202025</code></td><td>Yes</td></tr><tr class="even"><td><code>dates</code></td><td>Start/end date and time, in <code>YYYYMMDDTHHMMSS</code></td><td><code>dates=20250821T100000/20250821T130000</code> (<code>T</code>for time)</td><td>Yes</td></tr><tr class="odd"><td><code>details</code></td><td>Event description (URL-encoded)</td><td><code>details=Description%20here...</code></td><td>No</td></tr><tr class="even"><td><code>location</code></td><td>Event location (URL-encoded)</td><td><code>location=Ramin%20Room%2C%20Bartels%20Hall...</code></td><td>No</td></tr><tr class="odd"><td><code>ctz</code></td><td>IANA timezone name (URL-encoded)</td><td><code>ctz=America/New_York</code></td><td>No</td></tr></tbody></table><h2 id="create-your-own">Create Your Own</h2><p>To generate these URLs yourself, you can use the following Pythonfunction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-keyword">if</span> sys.version_info &lt; (<span class="hljs-number">3</span>,):<br>    <span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> quote<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_google_calendar_event_url</span>(<span class="hljs-params"></span><br><span class="hljs-params">    title,  <span class="hljs-comment"># type: str</span></span><br><span class="hljs-params">    start_datetime,  <span class="hljs-comment"># type: datetime.datetime</span></span><br><span class="hljs-params">    end_datetime,  <span class="hljs-comment"># type: datetime.datetime</span></span><br><span class="hljs-params">    description=<span class="hljs-literal">None</span>,  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params">    location=<span class="hljs-literal">None</span>,  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params">    iana_timezone_name=<span class="hljs-literal">None</span>  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params"></span>):<br>    base_url = <span class="hljs-string">&quot;https://calendar.google.com/calendar/render&quot;</span><br><br>    query_string_fragments = [<br>        <span class="hljs-string">&#x27;action=TEMPLATE&#x27;</span>,<br>        <span class="hljs-string">&#x27;text=%s&#x27;</span> % quote(title),<br>        <span class="hljs-string">&#x27;dates=%s/%s&#x27;</span> % (start_datetime.strftime(<span class="hljs-string">&#x27;%Y%m%dT%H%M%S&#x27;</span>), end_datetime.strftime(<span class="hljs-string">&#x27;%Y%m%dT%H%M%S&#x27;</span>))<br>    ]<br><br>    <span class="hljs-keyword">if</span> description <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;details=%s&#x27;</span> % quote(description))<br>    <br>    <span class="hljs-keyword">if</span> location <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;location=%s&#x27;</span> % quote(location))<br>    <br>    <span class="hljs-keyword">if</span> iana_timezone_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;ctz=%s&#x27;</span> % quote(iana_timezone_name))<br>    <br>    query_string = <span class="hljs-string">&#x27;&amp;&#x27;</span>.join(query_string_fragments)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%s?%s&#x27;</span> % (base_url, query_string)<br></code></pre></td></tr></table></figure><h3 id="example">Example</h3><p>Suppose you want an event: - Title: <strong>Sample Event</strong> -Date/Time: <strong>June 10, 2024, 2pm to 3:30pm</strong> - Description:<strong>Don't miss this important meeting!</strong> - Location:<strong>123 Main St, New York, NY</strong> - Time zone:<strong>America/New_York</strong></p><p>Here's how you'd create the URL:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> zoneinfo <span class="hljs-keyword">import</span> ZoneInfo<br><br><br>generate_google_calendar_event_url(<br>    title=<span class="hljs-string">&#x27;Sample Event&#x27;</span>,<br>    start_datetime=datetime.datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">00</span>),<br>    end_datetime=datetime.datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>),<br>    description=<span class="hljs-string">&quot;Don&#x27;t miss this important meeting!&quot;</span>,<br>    location=<span class="hljs-string">&#x27;123 Main St, New York, NY&#x27;</span>,<br>    iana_timezone_name=<span class="hljs-string">&#x27;America/New_York&#x27;</span><br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;You can generate your own Google Calendar event URLs following this
general structure:&lt;/p&gt;
&lt;h2 id=&quot;google-calendar-event-url-format&quot;&gt;Goog</summary>
      
    
    
    
    <category term="Process Automation" scheme="https://jifengwu2k.github.io/categories/Process-Automation/"/>
    
    
  </entry>
  
  <entry>
    <title>Manipulating `DataFrame`s Using `pandas`</title>
    <link href="https://jifengwu2k.github.io/2025/08/12/Manipulating-DataFrame-s-Using-pandas/"/>
    <id>https://jifengwu2k.github.io/2025/08/12/Manipulating-DataFrame-s-Using-pandas/</id>
    <published>2025-08-12T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.454Z</updated>
    
    <content type="html"><![CDATA[<h2id="one-dataframe-has-the-columns-a-b-and-another-has-the-columns-a-c.-how-to-merge-into-one-dataframe-with-columns-a-b-and-c">One<code>DataFrame</code> has the columns <code>A</code>, <code>B</code>and another has the columns <code>A</code>, <code>C</code>. How to mergeinto one <code>DataFrame</code> with columns <code>A</code>,<code>B</code>, and <code>C</code>?</h2><p>You can achieve this using <code>pd.merge()</code> in<code>pandas</code> with the <code>how='outer'</code> argument. Thiswill merge on the common column <code>A</code> and include all rows fromboth DataFrames, filling in missing values (as <code>NaN</code>) wherethe data does not exist.</p><p>Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># Example data</span><br>df1 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>]<br>&#125;)<br><br>df2 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>    <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>]<br>&#125;)<br><br><span class="hljs-comment"># Merge on column &#x27;A&#x27;</span><br>merged = pd.merge(df1, df2, on=<span class="hljs-string">&#x27;A&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(merged)<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tp">   A    B    C<br><span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-keyword">X</span>  NaN<br><span class="hljs-number">1</span>  <span class="hljs-number">2</span>    <span class="hljs-keyword">Y</span>    <span class="hljs-keyword">P</span><br><span class="hljs-number">2</span>  <span class="hljs-number">3</span>    <span class="hljs-keyword">Z</span>    Q<br><span class="hljs-number">3</span>  <span class="hljs-number">4</span>  NaN    <span class="hljs-keyword">R</span><br></code></pre></td></tr></table></figure><h2 id="iterate-over-rows-and-access-columns-in-a-dataframe">Iterateover rows and access columns in a <code>DataFrame</code></h2><p>If the column names are valid Python identifiers, using<code>itertuples()</code> to yield <code>namedtuple</code>s isfastest:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> df.itertuples():<br>    <span class="hljs-built_in">print</span>(row.Index, row.A, row.B)   <span class="hljs-comment"># Access columns with dot notation</span><br></code></pre></td></tr></table></figure><p>If not all column names are valid Python identifiers (e.g., somecolumn names contain spaces), use <code>iterrows()</code> to yield anindex and a <code>Series</code> for each row:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> df.iterrows():<br>    <span class="hljs-built_in">print</span>(index, row[<span class="hljs-string">&#x27;A&#x27;</span>], row[<span class="hljs-string">&#x27;B&#x27;</span>])   <span class="hljs-comment"># Access columns via indexing</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2
id=&quot;one-dataframe-has-the-columns-a-b-and-another-has-the-columns-a-c.-how-to-merge-into-one-dataframe-with-columns-a-b-and-c&quot;&gt;One
&lt;code</summary>
      
    
    
    
    <category term="Data Science" scheme="https://jifengwu2k.github.io/categories/Data-Science/"/>
    
    
  </entry>
  
  <entry>
    <title>Powering `clangd`-based C++ IDEs with `compile_commands.json`</title>
    <link href="https://jifengwu2k.github.io/2025/08/11/Powering-clangd-based-C-IDEs-with-compile-commands-json/"/>
    <id>https://jifengwu2k.github.io/2025/08/11/Powering-clangd-based-C-IDEs-with-compile-commands-json/</id>
    <published>2025-08-11T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-compile_commands.json">What is<code>compile_commands.json?</code></h2><p><code>clangd</code>, the C++ language server that powers IDE featuresin VS Code, CLion, etc. such as <strong>code navigation, linting anderror detection, and refactoring</strong>, requires<code>compile_commands.json</code>, a JSON file that records exactly howeach source file in your project should be compiled. The example shows asimple structure:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;directory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/path/to/project&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang++ -std=c++11 -g -Og main.cpp -o main&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;main.cpp&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>Each entry contains:</p><ul><li><code>directory</code>: The absolute path of where the compilationoccurs</li><li><code>command</code>: The full compilation command (Shell featuressuch as variable and command substitution are NOT supported)</li><li><code>file</code>: The relative path of the source file beingcompiled</li></ul><h2 id="generating-compile_commands.json">Generatingcompile_commands.json</h2><p>You can create one manually as shown in the following Shellscript:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># The absolute path of the project directory (where the compilation occurs)</span><br>DIRECTORY=<span class="hljs-string">&quot;<span class="hljs-subst">$(realpath .)</span>&quot;</span><br><br><span class="hljs-comment"># The relative path of the source file being compiled</span><br>FILE=<span class="hljs-string">&#x27;main.cpp&#x27;</span><br><br><span class="hljs-comment"># The full compilation command (precompute variable and command substitutions)</span><br>COMMAND=<span class="hljs-string">&quot;clang++ -std=c++11 -g -Og -fprofile-instr-generate -fcoverage-mapping main.cpp -o main <span class="hljs-subst">$(python3-config --includes)</span> <span class="hljs-subst">$(python3-config --ldflags)</span>&quot;</span><br><br><span class="hljs-comment"># Generate `compile_commands.json` under the project directory</span><br><span class="hljs-built_in">cat</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$DIRECTORY</span>/compile_commands.json&quot;</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    &quot;directory&quot;: &quot;$DIRECTORY&quot;,</span><br><span class="hljs-string">    &quot;command&quot;: &quot;$COMMAND&quot;,</span><br><span class="hljs-string">    &quot;file&quot;: &quot;$FILE&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>This approach works well for small projects. For larger ones,consider using CMake or <code>bear</code> (for make-based projects).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;what-is-compile_commands.json&quot;&gt;What is
&lt;code&gt;compile_commands.json?&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;clangd&lt;/code&gt;, the C++ language server that</summary>
      
    
    
    
    <category term="Developer Experience" scheme="https://jifengwu2k.github.io/categories/Developer-Experience/"/>
    
    
  </entry>
  
  <entry>
    <title>Metaclass Fundamentals</title>
    <link href="https://jifengwu2k.github.io/2025/07/25/Metaclass-Fundamentals/"/>
    <id>https://jifengwu2k.github.io/2025/07/25/Metaclass-Fundamentals/</id>
    <published>2025-07-25T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.454Z</updated>
    
    <content type="html"><![CDATA[<p>Metaclasses are one of Python's most powerful yet least understoodfeatures. They enable patterns that would be difficult or impossiblewith regular class definitions. In this post, we'll explore metaclassfundamentals through simple examples.</p><h2 id="what-are-metaclasses">What are Metaclasses?</h2><ul><li>A <strong>class C's metaclass</strong> is basically<code>type(C)</code>. <strong>If you define<code>class Class(metaclass=ClassMeta)</code> in Python, then<code>type(Class) is ClassMeta</code>.</strong></li><li>If we don't explicitly set a metaclass for a class, then itsmetaclass is <code>type</code> by default. <strong>Thus,<code>ClassMeta</code> should inherit from<code>type</code>.</strong></li><li>Just like given <code>o = Class(...)</code>, and that<code>Class</code> defines a method <code>def f(self, ...)</code>,<code>o.f(...)</code> would result in calling<code>Class.f(o, ...)</code>, <strong>if <code>ClassMeta</code> definesa method <code>def g(self, ...)</code>, <code>Class.g(...)</code> wouldresult in calling <code>ClassMeta.g(...)</code></strong>.</li></ul><p>We'll present a concrete example below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">type</span>.__call__(self, *args, **kwargs)  <br>        <span class="hljs-keyword">return</span> instance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>(<span class="hljs-built_in">object</span>, metaclass=ClassMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> instance<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">object</span>.__init__(self)<br></code></pre></td></tr></table></figure><p>What happens when we run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c = Class(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, message=<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>Class(0, 1, 2, message='Hello World')</code> is syntactic sugarfor <code>Class.__call__(0, 1, 2, message='Hello World')</code>.</p><p>If we haven't set a metaclass for <code>Class</code>, then this inturn invokes<code>type.__call__(Class, 0, 1, 2, message='Hello World')</code>.</p><p>However, we have set <code>Class</code>'s metaclass to<code>ClassMeta</code>, whose <code>ClassMeta.__call__</code> overrides<code>type.__call__</code>. Thus,<code>Class.__call__(0, 1, 2, message='Hello World')</code> would invoke<strong><code>ClassMeta.__call__(Class, 0, 1, 2, message='Hello World')</code></strong>instead.</p><p>With a few <code>print</code> statements added, we can see thefunction calls:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassMeta</span>.</span><span class="hljs-module"><span class="hljs-identifier">__call__</span>(</span></span>self, *args, **kwargs), self = &lt;<span class="hljs-keyword">class</span> &#x27;__main__.Class&#x27;&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">type</span>.<span class="hljs-constructor">__call__(<span class="hljs-params">self</span>, <span class="hljs-operator">*</span><span class="hljs-params">args</span>, <span class="hljs-operator">**</span><span class="hljs-params">kwargs</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__new__</span>(</span></span>cls, *args, **kwargs), cls = &lt;<span class="hljs-keyword">class</span> &#x27;__main__.Class&#x27;&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__new__(<span class="hljs-params">cls</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__new__</span>(</span></span>cls, *args, **kwargs), after calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__new__(<span class="hljs-params">cls</span>)</span>, instance: &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>(</span></span>self, *args, **kwargs), self = &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">self</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>(</span></span>self, *args, **kwargs), after calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">self</span>)</span><br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassMeta</span>.</span><span class="hljs-module"><span class="hljs-identifier">__call__</span>(</span></span>self, *args, **kwargs), after calling <span class="hljs-keyword">type</span>.<span class="hljs-constructor">__call__(<span class="hljs-params">self</span>, <span class="hljs-operator">*</span><span class="hljs-params">args</span>, <span class="hljs-operator">**</span><span class="hljs-params">kwargs</span>)</span>, instance: &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="metaclass-inheritance">Metaclass Inheritance</h2><p>Metaclasses are "contagious" - when you inherit from a class with ametaclass, the child class gets the same metaclass:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">type</span>.__call__(self, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> instance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>(<span class="hljs-built_in">object</span>, metaclass=ParentMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">object</span>.__init__(self)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = Parent.__new__(cls, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        Parent.__init__(self, *args, **kwargs)<br></code></pre></td></tr></table></figure><p>In this case,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c = Child(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, message=<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p>would still result in invoking<strong><code>ParentMeta.__call__(Child, 0, 1, 2, message='Hello World')</code></strong>.</p><h2 id="practical-application-1-singleton-pattern">Practical Application1: Singleton Pattern</h2><p>Metaclasses provide an elegant way to implement the Singletonpattern:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    _instances = &#123;&#125;<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cls._instances:<br>            cls._instances[cls] = <span class="hljs-built_in">super</span>().__call__(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls._instances[cls]<br><br><span class="hljs-comment"># SingletonBase(...) gets rerouted to SingletonMeta(SingletonBase, ...)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonBase</span>(metaclass=SingletonMeta):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># SingletonChild(...) also gets rerouted to SingletonMeta(SingletonChild, ...)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonChild</span>(<span class="hljs-title class_ inherited__">SingletonBase</span>):<br>    <span class="hljs-keyword">pass</span><br><br>a = SingletonBase()<br>b = SingletonBase()<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)  <span class="hljs-comment"># True</span><br><br>x = SingletonChild()<br>y = SingletonChild()<br><span class="hljs-built_in">print</span>(x <span class="hljs-keyword">is</span> y)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="practical-application-2-template-metaprogramming">PracticalApplication 2: Template Metaprogramming</h2><p>We can simulate C++-style templates using metaclasses:</p><p>In C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">templace &lt;V VALUE = <span class="hljs-keyword">default</span>&gt; <span class="hljs-keyword">class</span> C &#123;<br>    <span class="hljs-comment">// Use `VALUE` here</span><br>&#125;;<br><br>C&lt;v&gt; *c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">C</span>&lt;v&gt;(...);<br></code></pre></td></tr></table></figure><p>In Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    _values_to_instantiations = &#123;&#125;<br>    value = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">in</span> self._values_to_instantiations:<br>            instantiation = self._values_to_instantiations[value]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Dynamically create `self[value]` containing the class variable VALUE as a subclass of `self`</span><br>            instantiation = <span class="hljs-built_in">type</span>(<br>                <span class="hljs-string">&#x27;%s[%s]&#x27;</span> % (self.__name__, value),<br>                (self,),<br>                &#123; <span class="hljs-string">&#x27;VALUE&#x27;</span>: value &#125;<br>            )<br>            self._values_to_instantiations[value] = instantiation<br><br>        <span class="hljs-keyword">return</span> instantiation<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>(<span class="hljs-built_in">object</span>, metaclass=ClassMeta):<br>    <span class="hljs-comment"># Use `self.VALUE` or `cls.VALUE` here</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>Then, after we run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Dynamically create `Class[True]`</span><br>class_true = Class[<span class="hljs-literal">True</span>]<br><span class="hljs-comment"># Create an instance of `Class[True]`</span><br>c1 = class_true()<br><span class="hljs-comment"># Dynamically create `Class[False]`</span><br>class_false = Class[<span class="hljs-literal">False</span>]<br><span class="hljs-comment"># Create an instance of `Class[False]`</span><br>c2 = class_false()<br></code></pre></td></tr></table></figure><p>we can get something like:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c1</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">&lt;__main__.Class[<span class="hljs-literal">True</span>] at <span class="hljs-number">0x796bbb89d3a0</span>&gt;</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c2</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">&lt;__main__.Class[<span class="hljs-literal">False</span>] at <span class="hljs-number">0x796bbc53fb60</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Metaclasses are one of Python&#39;s most powerful yet least understood
features. They enable patterns that would be difficult or impossible
w</summary>
      
    
    
    
    <category term="Software Design" scheme="https://jifengwu2k.github.io/categories/Software-Design/"/>
    
    <category term="Python" scheme="https://jifengwu2k.github.io/categories/Software-Design/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Creating Custom Data Structures from Abstract Containers in `collections.abc`</title>
    <link href="https://jifengwu2k.github.io/2025/07/24/Creating-Custom-Data-Structures-from-Abstract-Containers-in-collections-abc/"/>
    <id>https://jifengwu2k.github.io/2025/07/24/Creating-Custom-Data-Structures-from-Abstract-Containers-in-collections-abc/</id>
    <published>2025-07-24T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.447Z</updated>
    
    <content type="html"><![CDATA[<h1id="creating-custom-data-structures-from-abstract-containers-in-collections.abc">CreatingCustom Data Structures from Abstract Containers in<code>collections.abc</code></h1><p>Python's <code>collections.abc</code> module provides a set ofabstract base classes (ABCs) that define the interfaces for variouscontainer types. These ABCs serve as excellent starting points when youneed to create custom data structures that behave like built-incontainers. In this post, we'll explore the hierarchy of these abstractcontainers and explain why inheriting from them is beneficial.</p><h2 id="the-hierarchy-of-abstract-containers">The Hierarchy of AbstractContainers</h2><p>The abstract container classes in <code>collections.abc</code> form alogical inheritance hierarchy that mirrors how we think about containerrelationships:</p><ul><li><strong>Container</strong> (requires <code>__contains__</code>)<ul><li>Defines the <code>in</code> operator behavior</li></ul></li><li><strong>Iterable</strong> (requires <code>__iter__</code>)<ul><li>Adds iteration capability</li></ul></li><li><strong>Sized</strong> (requires <code>__len__</code>)<ul><li>Adds length measurement capability</li></ul></li><li><strong>Collection</strong> (combines <code>Container</code>,<code>Iterable</code>, and <code>Sized</code>)<ul><li>A complete basic collection</li></ul></li></ul><p>From these fundamental abstract container classes, more specializedcontainers branch out:</p><ul><li><strong>Sequence</strong> (combines <code>Reversible</code> and<code>Collection</code>, and also requires <code>__getitem__</code>)<ul><li>Represents immutable sequences (like tuple)</li><li>Provides <code>index()</code> and <code>count()</code><strong>automatically</strong></li></ul></li><li><strong>Mapping</strong> (inherits from <code>Collection</code>, andalso requires <code>__getitem__</code>)<ul><li>Represents read-only dictionaries</li><li>Provides <code>get()</code>, <code>items()</code>,<code>keys()</code>, <code>values()</code><strong>automatically</strong></li></ul></li><li><strong>Set</strong> (inherits from <code>Collection</code>,requires no more methods)<ul><li>Represents immutable sets</li><li>Provides <code>isdisjoint()</code> and support for<code>&amp;</code>, <code>|</code>, <code>-</code>, <code>^</code>,<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,<code>&gt;=</code>, <code>==</code> operations<strong>automatically</strong></li></ul></li></ul><p>The inheritance hierarchy of all abstract container classes is asfollows:</p><pre><code class=" mermaid">classDiagram    Awaitable &lt;|-- Coroutine    Iterable &lt;|-- Reversible    Iterable &lt;|-- Iterator    Iterator &lt;|-- Generator    Sized &lt;|-- MappingView    Iterable &lt;|-- Collection    Sized &lt;|-- Collection    Container &lt;|-- Collection    Collection &lt;|-- ValuesView    MappingView &lt;|-- ValuesView    Collection &lt;|-- Mapping    Collection &lt;|-- Sequence    Reversible &lt;|-- Sequence    Sequence &lt;|-- ByteString    Sequence &lt;|-- MutableSequence    Collection &lt;|-- Set    Set &lt;|-- ItemsView    MappingView &lt;|-- ItemsView    Set &lt;|-- MutableSet    Mapping &lt;|-- MutableMapping    AsyncIterable &lt;|-- AsyncIterator    AsyncIterator &lt;|-- AsyncGenerator</code></pre><p>To get a list of all abstract methods you must implement wheninheriting an abstract container class, you can use the followingfunction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all_abstract_methods</span>(<span class="hljs-params">abstract_base_class</span>):<br>    <span class="hljs-comment"># type: (<span class="hljs-built_in">type</span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>]</span><br>    all_abstract_methods = <span class="hljs-built_in">set</span>()<br><br>    <span class="hljs-keyword">for</span> mro_entry <span class="hljs-keyword">in</span> abstract_base_class.__mro__:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(mro_entry, abc.ABCMeta) <span class="hljs-keyword">or</span> <span class="hljs-built_in">hasattr</span>(mro_entry, <span class="hljs-string">&#x27;__abstractmethods__&#x27;</span>):<br>            <span class="hljs-keyword">for</span> abstract_method <span class="hljs-keyword">in</span> mro_entry.__abstractmethods__:<br>                all_abstract_methods.add(abstract_method)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(all_abstract_methods)<br></code></pre></td></tr></table></figure><h2 id="why-inherit-from-abstract-containers">Why Inherit from AbstractContainers?</h2><p>When you create a custom data structure by inheriting from theseabstract container classes, you get several benefits:</p><ul><li><strong>Interface Clarity</strong>: The abstract container classesclearly document what abstract methods your class needs to implement tobe a proper container (see <code>get_all_abstract_methods</code>above).</li><li><strong>Type Checking Compatibility</strong>: Your custom class willbe recognized as the proper type by <code>isinstance()</code> and<code>issubclass()</code> checks, as well as by third-partytype-checking tools such as <code>mypy</code>.</li><li><strong>Automatic Method Implementation</strong>: The abstractcontainer classes provide many methods automatically once you implementthe required abstract methods (see the examples of<code>Sequence</code>, <code>Mapping</code>, and <code>Set</code>above).</li><li><strong>Consistent Behavior</strong>: Your custom container willbehave like Python developers expect it to.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;creating-custom-data-structures-from-abstract-containers-in-collections.abc&quot;&gt;Creating
Custom Data Structures from Abstract Container</summary>
      
    
    
    
    <category term="Software Design" scheme="https://jifengwu2k.github.io/categories/Software-Design/"/>
    
    <category term="Python" scheme="https://jifengwu2k.github.io/categories/Software-Design/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Packaging: Managing Package Files, Compiling Extension Modules When Building a Wheel, and Uploading to PyPI</title>
    <link href="https://jifengwu2k.github.io/2025/07/11/Python-Packaging-Managing-Package-Files-Compiling-Extension-Modules-When-Building-a-Wheel-and-Uploading-to-PyPI/"/>
    <id>https://jifengwu2k.github.io/2025/07/11/Python-Packaging-Managing-Package-Files-Compiling-Extension-Modules-When-Building-a-Wheel-and-Uploading-to-PyPI/</id>
    <published>2025-07-11T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="managing-package-files">Managing Package Files</h1><p>When creating a Python package, the location of files depends on yourproject structure.</p><h2 id="basic-pyproject.toml-configuration">Basic<code>pyproject.toml</code> Configuration</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build-system]</span><br><span class="hljs-attr">requires</span> = [<span class="hljs-string">&quot;setuptools&quot;</span>]<br><span class="hljs-attr">build-backend</span> = <span class="hljs-string">&quot;setuptools.build_meta&quot;</span><br><br><span class="hljs-section">[project]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;your-package&quot;</span>  <span class="hljs-comment"># PyPI name (can contain hyphens)</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">description</span> = <span class="hljs-string">&quot;A description of your-package&quot;</span><br><span class="hljs-attr">readme</span> = <span class="hljs-string">&quot;README.md&quot;</span><br><span class="hljs-attr">requires-python</span> = <span class="hljs-string">&quot;&gt;=2&quot;</span><br><span class="hljs-attr">license</span> = <span class="hljs-string">&quot;MIT&quot;</span><br><span class="hljs-attr">authors</span> = [<br>  &#123; name=<span class="hljs-string">&quot;Jane Doe&quot;</span>, email=<span class="hljs-string">&quot;jane.doe@example.com&quot;</span> &#125;<br>]<br><span class="hljs-attr">classifiers</span> = [<br>    <span class="hljs-string">&quot;Programming Language :: Python :: 2&quot;</span>,<br>    <span class="hljs-string">&quot;Programming Language :: Python :: 3&quot;</span>,<br>    <span class="hljs-string">&quot;Operating System :: OS Independent&quot;</span><br>]<br><span class="hljs-attr">dependencies</span> = [<br>  <span class="hljs-string">&quot;numpy&quot;</span><br>]<br><br><span class="hljs-section">[project.urls]</span><br><span class="hljs-attr">&quot;Homepage&quot;</span> = <span class="hljs-string">&quot;https://github.com/janedoe/my-package&quot;</span><br><span class="hljs-attr">&quot;Bug Tracker&quot;</span> = <span class="hljs-string">&quot;https://github.com/janedoe/my-package/issues&quot;</span><br></code></pre></td></tr></table></figure><h2 id="single-python-file-or-extension-module-as-module">Single PythonFile (or Extension Module) as Module</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">your-package/<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pyproject.toml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">your_package.py # or `your_package.cpython-312-x86_64-linux-gnu.so`, etc.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tests/</span><br></code></pre></td></tr></table></figure><p>This single-file module will be copied into the site-packagesdirectory during installation.</p><blockquote><p>⚠️ This layout makes it difficult to include non-.py or non-extensiondata files (e.g., .json, .html). If you need to include such resources,use the folder-as-module approach described below.</p></blockquote><h2 id="folder-as-module">Folder as Module</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">your-package/<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pyproject.toml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">your_package/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">module1.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">module2.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">subpackage1/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">module_a.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">subpackage2/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">module_b.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">utils/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">helpers.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">data/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">config.json</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">schema.sql</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">templates/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">default.html</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tests/</span><br></code></pre></td></tr></table></figure><p>Each subfolder intended as a submodule must include an<code>__init__.py</code> file (even if empty).</p><p>Configure pyproject.toml:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-comment"># Importable package name (no hyphens allowed)</span><br><span class="hljs-attr">packages</span> = [<span class="hljs-string">&quot;your_package&quot;</span>]<br><span class="hljs-attr">package-dir</span> = &#123;<span class="hljs-string">&quot;your_package&quot;</span> = <span class="hljs-string">&quot;your_package&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>To include non-.py or non-extension data files (e.g., configs,templates):</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-attr">include-package-data</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-section">[tool.setuptools.package-data]</span><br><span class="hljs-attr">your_package</span> = [<br>    <span class="hljs-string">&quot;data/*.json&quot;</span>,<br>    <span class="hljs-string">&quot;templates/*.html&quot;</span>,<br>    <span class="hljs-string">&quot;static/**/*&quot;</span>,  <span class="hljs-comment"># Recursively include all files under `static`</span><br>]<br></code></pre></td></tr></table></figure><h1 id="compiling-extension-modules-when-building-a-wheel">CompilingExtension Modules When Building a Wheel</h1><p>To compile extension modules when building a wheel, implement acustom setuptools <code>build_ext</code> command.</p><h2 id="project-structure">Project Structure</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">your-package/<br><span class="hljs-bullet">  -</span> pyproject.toml<br><span class="hljs-bullet">  -</span> your<span class="hljs-emphasis">_package/</span><br><span class="hljs-emphasis">    - <span class="hljs-strong">__init__</span>.py</span><br><span class="hljs-emphasis">    - _</span>build<span class="hljs-emphasis">_ext_</span>command.py # Custom <span class="hljs-code">`build_ext`</span> command<br></code></pre></td></tr></table></figure><h2id="custom-build_ext-command-your_package_build_ext_command.py">Custom<code>build_ext</code> Command(<code>your_package/_build_ext_command.py</code>)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> setuptools.command.build_ext <span class="hljs-keyword">import</span> build_ext<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_compiler</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        subprocess.check_call([<span class="hljs-string">&quot;c++&quot;</span>, <span class="hljs-string">&quot;-v&quot;</span>], stdout=subprocess.DEVNULL)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuildExtCommand</span>(<span class="hljs-title class_ inherited__">build_ext</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_compiler():<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;c++ compiler not found!&quot;</span>)<br>        subprocess.check_call([<span class="hljs-string">&quot;c++&quot;</span>, <span class="hljs-string">&quot;mymodule.cpp&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;mymodule.so&quot;</span>])<br>        <span class="hljs-built_in">super</span>().run()  <span class="hljs-comment"># Continue default build_ext flow (no-op)</span><br></code></pre></td></tr></table></figure><h2 id="pyproject.toml-configuration"><code>pyproject.toml</code>Configuration</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-comment"># Declare the package as non-ZIP-safe to ensure files are extracted during installation</span><br><span class="hljs-comment"># Required for custom build logic to execute properly</span><br><span class="hljs-attr">zip-safe</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment"># Bind the custom command to the `build_ext` phase</span><br><span class="hljs-attr">cmdclass</span> = &#123; <span class="hljs-string">&quot;build_ext&quot;</span> = <span class="hljs-string">&quot;your_package._build_ext_command.BuildExtCommand&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>If <code>BuildExtCommand</code> requires third-party libraries (e.g.,<code>pybind11</code>), declare them under<code>[build-system]</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build-system]</span><br><span class="hljs-attr">requires</span> = [<br>    <span class="hljs-string">&quot;setuptools&gt;=42&quot;</span>,<br>    <span class="hljs-string">&quot;wheel&quot;</span>,<br>    <span class="hljs-string">&quot;pybind11&gt;=2.6&quot;</span>,<br>    <span class="hljs-string">&quot;numpy&gt;=1.21&quot;</span>,<br>    <span class="hljs-string">&quot;requests&gt;=2.25&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><h1 id="uploading-to-pypi">Uploading to PyPI</h1><h2 id="install-required-tools">Install Required Tools</h2><p>First, install <code>build</code> and <code>twine</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install build twine<br></code></pre></td></tr></table></figure><h2 id="build-the-package">Build the Package</h2><p>Run the following command in your project's root directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m build<br></code></pre></td></tr></table></figure><p>This generates <code>.tar.gz</code> and <code>.whl</code> files inthe <code>dist/</code> folder.</p><h2 id="upload-to-pypi">Upload to PyPI</h2><p>Use <code>twine</code> to upload your package. Navigate to the<code>dist/</code> directory and run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">twine upload dist/*<br></code></pre></td></tr></table></figure><p>You'll be prompted for your PyPI API token. Refer to the <ahref="https://packaging.python.org/latest/guides/publishing-packages/">officialPyPI documentation</a> for details.</p><h2 id="verify-publication">Verify Publication</h2><p>After uploading, check PyPI to see if your package is listed: <ahref="https://pypi.org/">https://pypi.org/</a></p><p>Search for your package name-it may take a few minutes to appear.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;managing-package-files&quot;&gt;Managing Package Files&lt;/h1&gt;
&lt;p&gt;When creating a Python package, the location of files depends on your
project</summary>
      
    
    
    
    <category term="DevOps" scheme="https://jifengwu2k.github.io/categories/DevOps/"/>
    
    
  </entry>
  
  <entry>
    <title>Lessons learned from Master&#39;s thesis</title>
    <link href="https://jifengwu2k.github.io/2024/08/23/Lessons-learned-from-master-s-thesis/"/>
    <id>https://jifengwu2k.github.io/2024/08/23/Lessons-learned-from-master-s-thesis/</id>
    <published>2024-08-23T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.453Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Firmly define the research topic.</li><li>Do literature research based on keywords, never limit the scope ofjournals and conferences, and continue literature research even afterstarting the project.</li><li>Collect baselines and benchmarks as soon as possible; make sure thebaselines and benchmarks are downloaded and can be run.</li><li>Focus on the NOVELTY of the core aspects; don't be perfect, anddon't support all cases or possibilities.</li><li>Find a few small examples that prove the power of your novelty, andemphasize it in both the paper and the presentation.</li><li>Avoid designing overly complex rule-based systems.</li><li>With GenAI, aim to get a prototype and an illustrative presentationout as soon as possible. This will allow you to collect feedback early,empowering you to make necessary adjustments and improvements.</li><li>Use functional programming architecture that is easy to test.Conduct thorough unit testing, document the coverage, and leave tracesof development step by step. This will provide a solid foundation andinstill confidence in the robustness of your research.</li><li>Insert breakpoints where you're unsure how to code. Figure out whatto do when encountering them, and refine the unit tests in theprocess.</li><li>Don't be perfect; start writing your thesis when you're almostdone.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Firmly define the research topic.&lt;/li&gt;
&lt;li&gt;Do literature research based on keywords, never limit the scope of
journals and conferen</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Talking back and confidence</title>
    <link href="https://jifengwu2k.github.io/2024/07/07/Talking-back-and-confidence/"/>
    <id>https://jifengwu2k.github.io/2024/07/07/Talking-back-and-confidence/</id>
    <published>2024-07-07T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>一个人在听到建议的时候喜欢顶嘴，有叛逆心理，某种意义上是想要证明自己，挽回一些自尊与自信，但又暂时没有强大的以自身实力为基础的自信。面对这种情形，我们虽然会不太舒服，但最好不要顶回去，或者是尝试说服对方，这些只会让对方感到更不愉快，进而也让自己感到更不愉快，既不治标也不治本。更好的做法是去承受，去服输，去退一步，不争了，而是借对方的某个观点转移话题——给对方认可、自信与陪伴，和对方一起去进步，去提升，去做需要做的事情。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>A person who likes to talk back when they hear a suggestion has arebellious mentality and, in a sense, wants to prove themselves toregain some self-esteem and self-confidence, but for the time being,does not have a robust and deep-rooted self-confidence based on theirstrength. Although we will be uncomfortable in this situation, it isbest not to talk back or try to persuade the other party. These willonly make the other party feel more unpleasant and, in turn, makethemselves feel more unpleasant - solving neither the symptoms nor theroot cause of the problem. The better thing to do is to suffer, to givein, to step back, not to argue, but to take advantage of one of theother person's points to change the subject - to give the other personrecognition, self-confidence, and companionship, and together with theother person to progress, to improve, to do what needs to be done.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;一个人在听到建议的时候喜欢顶嘴，有叛逆心理，某种意义上是想要证明自己，挽回一些自尊与自信，但又暂时没有强大的以自身实力为基础的自信。面对这种情形，我们虽然会不太舒服，但最好不</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Some thoughts about chatting</title>
    <link href="https://jifengwu2k.github.io/2024/07/05/Some-thoughts-about-chatting/"/>
    <id>https://jifengwu2k.github.io/2024/07/05/Some-thoughts-about-chatting/</id>
    <published>2024-07-05T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>关于聊天的一点思考：</p><ul><li>开始之前预定一个时间，设置一个时间上的边界感；时间上没有边界感容易让我们没话找话，寻找一些无聊的话题，让对方失去兴趣，甚至不断地因此而擦出矛盾来。</li><li>对方做得不对，我们要简明扼要地点出来，点到为止，然后换下一个话题；切忌在这种情况下，主动地理论、解释，尝试说服对方。</li></ul><hr /><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Some thoughts about chatting:</p><ul><li>Before starting, arrange a time and set a sense of time boundaries.Lacking such a sense makes us constantly look for boring topics when wehave nothing to say, which may lead to the other party losing interestand result in conflicts.</li><li>If the other party is not doing right, we have to point it outsuccinctly, avoid being overly verbose, and then promptly change to thenext topic; do not take the initiative to theorize, explain, and try topersuade the other party in this situation.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;关于聊天的一点思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始之前预定一个时间，设置一个时间上的边界感；时间上没有边界感容易让我们没话找话，寻找一些无聊的话题，让对方失去兴趣，甚至不断</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Pay attention to the other person&#39;s easily overlooked emotional state when chatting online</title>
    <link href="https://jifengwu2k.github.io/2024/07/02/Pay-Attention-to-the-Other-Person-s-Easily-Overlooked-Emotional-State-When-Chatting-Online/"/>
    <id>https://jifengwu2k.github.io/2024/07/02/Pay-Attention-to-the-Other-Person-s-Easily-Overlooked-Emotional-State-When-Chatting-Online/</id>
    <published>2024-07-02T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>线上聊天一定要关注对方容易被忽视的情绪状态。</p><p>与线下聊天相比，线上聊天少了很多关键的nonverbalcontext，其中就包括对方的情绪状态。线上聊天还是在和人说话，而不是在和人工智能说话，人的情绪状态会对聊天的走向产生极大的影响。但不是所有的人都擅于、习惯于或想要表达情绪。在这种情况下，我们极易在线上聊天的过程中，因为对方在某种我们尚不清楚的情绪的影响下，不按我们的预期聊天，而让我们做出很多误解误判。为了避免由此产生的一些不愉快的情形，我们可以：</p><ul><li>在聊天一开始的时候就去了解对方的情绪状态，如可以直接在寒暄的过程中问。</li><li>在聊天进行的过程中时刻去关注对方的情绪状态。包括时不时主动问问对方感觉如何（哪怕对方没有任何反馈或暗示），绝不能自己一个人旁若无人滔滔不绝地讲。同时也要清楚地意识到，对方的任何表达都有可能是心境的投射。我们要从中捕获尽可能多的信息来。</li></ul><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Pay attention to the other person's easily overlooked emotional statewhen chatting online.</p><p>Compared to offline chatting, online chatting has a much lesscritical nonverbal context, including the other person's emotionalstate. Online chatting is still talking to a human being, not an AI, anda person's emotional state can have a huge impact on the direction ofthe chat. But not all people are good at, used to, or want to expressemotions. In this case, it is very easy for us to make a lot ofmisunderstandings and misjudgments during an online chat because theother person, under the influence of some emotion we are not yet awareof, does not chat as we expect. These misunderstandings cansignificantly alter the course of the conversation, leading to potentialconflicts or misinterpretations. In order to avoid some unpleasantsituations arising from this, we can:</p><ul><li>At the beginning of the chat, it's crucial to understand the otherparty's emotional state. This can be achieved by asking directly duringthe initial small talk.</li><li>When chatting, always consider the other party's emotional state.This includes taking the initiative to ask the other person from time totime how they are feeling (even if the other person does not have anyfeedback or hints) and never speaking on your own like there is no oneelse. It's also important to realize that any expression of the otherperson may be a projection of their state of mind. We need to capture asmuch information from it as possible.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;线上聊天一定要关注对方容易被忽视的情绪状态。&lt;/p&gt;
&lt;p&gt;与线下聊天相比，线上聊天少了很多关键的nonverbal
context，其中就包括对方的情绪状态。线上聊天还是在</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Show, not tell</title>
    <link href="https://jifengwu2k.github.io/2024/06/20/Show-not-tell/"/>
    <id>https://jifengwu2k.github.io/2024/06/20/Show-not-tell/</id>
    <published>2024-06-20T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>导师在告诉我如何回答reviewers comments的时候曾经说过：“show, nottell”。意思是面对他们希望我们加baseline和metric的comments，在点到我们要加上他们之后，最好展现一些初步结果（比如说在部分数据集上评测那些baseline和metric），而不是一味地说服对方我们之后一定能加上去。</p><p>感觉这种思想用在日常生活中的说服上也是很值得借鉴的：在点出一件事之后，如果对方认可了，更好的做法是以身作则去示范他或者是展现自己怎么想，而不是一味地去说服对方应该怎么怎么做。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>My mentor once said "show, not tell" when he told me how to answerreviewers comments. The idea is that when faced with comments that theywant us to add baselines and metrics to, it is better to show somepreliminary results (e.g., evaluating those baselines and metrics on apart of the dataset) after pointing out that we want to add them to,instead of just convincing the other party that we will definitely beable to add them afterward.</p><p>I feel that this idea is also useful for persuasion in daily life:after pointing out something, if the other person approves of it, it'sbetter to set an example by demonstrating what he thinks or showing whathe thinks, rather than just trying to convince the other person of whathe should do.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;导师在告诉我如何回答reviewers comments的时候曾经说过：“show, not
tell”。意思是面对他们希望我们加baseline和metric的commen</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Our minds are, indeed, the minds of engineers</title>
    <link href="https://jifengwu2k.github.io/2024/06/19/Our-minds-are-indeed-the-minds-of-engineers/"/>
    <id>https://jifengwu2k.github.io/2024/06/19/Our-minds-are-indeed-the-minds-of-engineers/</id>
    <published>2024-06-19T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>我们的思维，的确是工程师的思维。这体现在我们日常生活的方方面面：不论是开车，还是做菜，还是写代码，还是制定计划，我们总是会非常关注计划，关注流程，关注优化，关注总结，关注反馈；而我们的头脑没有那么敏捷，不擅长理论创新——我们是罗马人，而非希腊人。</p><p>我们不应该误入理论创新的歧途。是的，我们确实对理论很感兴趣，但是那种兴趣不是形而上的对理论本身的兴趣，而是对理论有何价值以及如何落地的兴趣。</p><p>当下的热点是什么？我们应该如何结合某个具体的工业背景，有效而创造性地运用那些理论解决现实问题。这应该是我们的主业。而去研究理论，并思考如何创造性地使用它们，是我们的副业与兴趣爱好。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Our minds are, indeed, the minds of engineers. This is reflected inevery aspect of our daily lives: whether we are driving, cooking,writing code, or making plans, we will always pay great attention to theplan, to the process, to the optimization, to the summary, and to thefeedback; and our minds are not as agile and not as good at theoreticalinnovation - we are Romans, not Greeks!</p><p>We shouldn't get sidetracked into theoretical innovation. Yes, we dohave an interest in theory, but that interest is not metaphysicalinterest in the theory itself, it is interest in what the theory isworth and how it can be implemented.</p><p>What are the hot topics of the moment? How should we effectively andcreatively apply those theories to solve real-world problems in aspecific industrial context. That should be our main business. Studyingtheories and thinking about how to use them creatively is our sideproject and hobby.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;我们的思维，的确是工程师的思维。这体现在我们日常生活的方方面面：不论是开车，还是做菜，还是写代码，还是制定计划，我们总是会非常关注计划，关注流程，关注优化，关注总结，关注反馈</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Financial strategies during master&#39;s and PhD degrees (tentative)</title>
    <link href="https://jifengwu2k.github.io/2024/06/16/Financial-strategies-during-master-s-and-PhD-degrees-tentative/"/>
    <id>https://jifengwu2k.github.io/2024/06/16/Financial-strategies-during-master-s-and-PhD-degrees-tentative/</id>
    <published>2024-06-16T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><ul><li>记录每月工资，跟踪每月固定必需开销（房租、订阅服务等），分配每月可变必需开销（食品百货等）、可变可选开销（衣物、旅行等）与储蓄。<ul><li>储蓄包括银行的储蓄账户和各种理财产品。<ul><li>对我们而言，各种理财产品的职责首先是对抗通货膨胀的<strong>储蓄账户</strong>，而非盈利的手段——我们是斗不过高频交易算法的。不得花过多的时间经历关注理财产品的价格变化，严格禁止各种赌博心理。</li></ul></li></ul></li><li>充分利用各种税收和学费资助的“免费”服务：<ul><li>规划好行程，充分利用公共交通，少打车。</li><li>充分利用学校提供的医疗保险；</li><li>通过学校订购的在线课程，不断提升与科研需求相辅相成的实用技能，如网页前端开发、数据科学等，并获取相应证书，既提升我们欠缺的implementation能力，又方便找实习与工作等。</li></ul></li><li>做好灵活的食品百货采货计划。<ul><li>关注超市传单；</li><li>书包中常备购物袋；</li><li>适量减少红肉采货量，适量增加鱼、蛋白粉、谷物、水果、蛋、奶采货量。</li></ul></li></ul><hr /><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><ul><li>Record monthly paychecks, track monthly fixed essential expenses(rent, subscription services, etc.), and allocate monthly variableessential expenses (food, groceries, etc.) and variable optionalexpenses (clothing, travel, etc.) with savings.</li><li>Savings include savings accounts in banks and various financialproducts.</li><li>For us, the duty of various financial products is, first andforemost, an inflation-fighting <strong>savings account</strong>, not ameans of profit - we can't beat high-frequency trading algorithms. Wemust not spend excessive time paying attention to price changes infinancial products and strictly prohibit all kinds of gamblingmentality.</li><li>Take advantage of tax and tuition assistance "freebies":</li><li>Plan trips well, use public transportation, and take fewercabs.</li><li>Take advantage of the school's health insurance;</li><li>Through online courses purchased by the school, improve practicalskills that complement research needs, such as web front-enddevelopment, data science, etc., and obtain the appropriate certificatesto improve our lack of implementation skills and facilitate the searchfor internships and jobs.</li><li>Make a flexible food and grocery procurement plan.</li><li>Pay attention to supermarket flyers;</li><li>Always carry a shopping bag in your bag;</li><li>Reduce the amount of red meat and increase the amount of fish,protein powder, cereals, fruits, eggs, and milk.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;记录每月工资，跟踪每月固定必需开销（房租、订阅服务等），分配每月可变必需开销（食品百货等）、可变可选开销（衣物、旅行等）与储蓄。
&lt;ul&gt;
&lt;li&gt;储蓄包括银行的</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>On doing things with others</title>
    <link href="https://jifengwu2k.github.io/2024/05/30/On-Doing-Things-with-Others/"/>
    <id>https://jifengwu2k.github.io/2024/05/30/On-Doing-Things-with-Others/</id>
    <published>2024-05-30T04:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>和别人一起做事的时候，如果遇到了某件说好了要做的事别人不愿意开始做，我们不应该面露难色，变得焦虑、愤怒；我们更好的做法应该是给对方一个善意的提醒，然后重新规划时间——这时候规划的时间必须具体，不能是大而化之的“之后”“再过几天”等。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>When doing things with others, if we encounter a certain thing thatwe said we would do that others are not willing to start doing, weshould not look embarrassed, become anxious and angry; our betterapproach should be to give each other a kind reminder, and thenre-planning time - this time the planning time must be specific, not abig and generalized "afterward," "a few more days," etc.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;p&gt;和别人一起做事的时候，如果遇到了某件说好了要做的事别人不愿意开始做，我们不应该面露难色，变得焦虑、愤怒；我们更好的做法应该是给对方一个善意的提醒，然后重新规划时间——这时候规</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Some thoughts on maintaining fitness habits and improving physical fitness in the future</title>
    <link href="https://jifengwu2k.github.io/2024/02/29/Some-thoughts-on-maintaining-fitness-habits-and-improving-physical-fitness-in-the-future/"/>
    <id>https://jifengwu2k.github.io/2024/02/29/Some-thoughts-on-maintaining-fitness-habits-and-improving-physical-fitness-in-the-future/</id>
    <published>2024-02-29T05:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><h2id="关于今后健身习惯的保持与身体素质的提升的若干思考">关于今后健身习惯的保持与身体素质的提升的若干思考</h2><p>在今后漫长的人生之路上，我们要让健身成为一种像散步、跑步、爬山一样深入我们日常生活并且随时都有心情做的消遣活动。</p><p>结合我们初高中时期跑步、跳绳、坐位体前屈通过强制性的体育课逐渐成为我们习惯去做并能在不断进步中获得成就感的活动这样一段经历，<strong>我们也可以充分利用我们在UBC的最后一学期，每一次去学校学习时，在离开之前尽可能去一趟健身房——且不论时间长短，但还是尽可能去一趟</strong>。近日的实践证明，在脑力劳动之后，这样的“体力劳动”在有效缓解我们精神上的疲惫感的同时，又有助于提升我们的身体素质，可谓一举两得。</p><p>与之相伴的另一个问题是如何在坚持健身的同时在力量上取得突破。如果有人陪伴我们锻炼，那么这将不是一个难题。但当我们一个人锻炼的时候，我们又将怎么做呢？我们或许也可以从初高中时期独自练习跑步、跳绳、坐位体前屈的经历中获得灵感。</p><p>首先，我们必须有耐心。进步必定是一个漫长的过程，这个过程急不得。</p><p>其次，我们可以做到以巩固为主，提升为辅——在一段较长的时间段内，尽可能做到不倒退，稳扎稳打，保持并巩固当前来之不易的训练成果。为此，我们需要记录我们做各项锻炼是我们能接受的最大强度，从而做到每次锻炼时心中有数。</p><p>最后，还要时不时像扰动一样尝试突破自己能接受的最大强度。每一次的突破，哪怕只能做一两下，都将成为我们下一阶段巩固的目标。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><h2id="some-thoughts-on-maintaining-fitness-habits-and-improving-physical-fitness-in-the-future">Somethoughts on maintaining fitness habits and improving physical fitness inthe future</h2><p>In the long road of life ahead, we want to make fitness a pastimethat is as deep into our daily lives as walking, running, and hiking andthat we are always in the mood to do.</p><p>Combined with our experiences in junior and senior high school, whererunning, jumping rope, and seated forward bends became habitual throughmandatory gym classes, and we gained a sense of accomplishment throughcontinuous improvement,<strong>we can also make the most of our lastsemester at UBC, and make it a point to go to the gym every time we goto school before we leave - regardless of the length of time</strong>.Recently, it has been proven that this kind of "physical labor"effectively relieves our mental fatigue and improves our physicalfitness after mental work, so it is a double win.</p><p>Another issue with this is how to make a breakthrough in strengthwhile staying fit. If we have someone to accompany us in our workouts,then this will not be a problem. But what will we do when we work outalone? We might also draw inspiration from our middle and high schoolyears when we practiced running, jumping rope, and seated forward bendsalone.</p><p>First, we must be patient. Progress is bound to be a long processthat cannot be rushed.</p><p>Secondly, we can do this by consolidating and improving - as much aspossible over a longer period- without regressing, building steadily,maintaining and consolidating our current hard-won training gains. To dothis, we need to keep track of the maximum intensity we are comfortablewith each workout so that we can be mindful of what we do each time wework out.</p><p>Finally, from time to time, we must also try to break through themaximum intensity that we can accept, just like a perturbation. Eachbreakthrough, even if we can only do one or two reps, will be our goalfor the next consolidation phase.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;original-chinese&quot;&gt;Original (Chinese)&lt;/h1&gt;
&lt;h2
id=&quot;关于今后健身习惯的保持与身体素质的提升的若干思考&quot;&gt;关于今后健身习惯的保持与身体素质的提升的若干思考&lt;/h2&gt;
&lt;p&gt;在今后漫长的人生之路上，我们要让健身成为一种像</summary>
      
    
    
    
    <category term="Reflections" scheme="https://jifengwu2k.github.io/categories/Reflections/"/>
    
    
  </entry>
  
  <entry>
    <title>Paper Reading: Asynchronous Functional Reactive Programming for GUIs (The Elm Paper)</title>
    <link href="https://jifengwu2k.github.io/2024/01/24/Paper-Reading-Asynchronous-Functional-Reactive-Programming-for-GUIs/"/>
    <id>https://jifengwu2k.github.io/2024/01/24/Paper-Reading-Asynchronous-Functional-Reactive-Programming-for-GUIs/</id>
    <published>2024-01-24T05:00:00.000Z</published>
    <updated>2025-08-13T04:31:00.455Z</updated>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for the PL Reading Group. The originalpaper can be found <ahref="https://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf">here</a>.</p><h1 id="introduction">Introduction</h1><ul><li>Functional reactive programming (FRP) integrates pure functionalprogramming with time-varying values (signals), useful for GUIs.</li><li>FRP allows modeling of complex, time-dependent relationships in adeclarative style.</li><li>Previous FRP languages faced inefficiencies, including unnecessaryrecomputation and global delays.</li><li>Most FRP languages treat signals as continuously changing, leadingto excessive sampling and recomputation.</li><li>Elm, an FRP language, treats all signals as discrete, reducingunnecessary recomputation by detecting unchanged signals.</li><li>In Elm, signals change only with discrete events (like user inputs),necessitating program recomputation.</li><li>Traditional FRP systems process events synchronously, causing delaysif event processing is time-consuming.</li><li>Synchronous processing in GUIs can lead to unresponsiveness duringlong computations.</li><li>Elm introduces an abstraction for specifying asynchronouscomputations within FRP.</li><li>This feature in Elm allows concurrent execution of long-runningcomputations and other events, maintaining GUI responsiveness.</li><li>Elm's approach to asynchronous computation in FRP is novel and isformalized in its language semantics.</li><li>Elm restricts signal use for efficient implementation, similar toprevious efficient FRP systems.</li></ul><h1 id="core-language">Core Language</h1><ul><li>The core language of Elm, termed "FElm" (Featherweight Elm), isintroduced, outlining Elm's key abstractions.</li><li>FElm is a simply-typed functional language with a set of reactiveprimitives.</li><li>It differentiates between simple types (like unit and int, andfunctions from simple types to simple types) and signal types (like<code>Signal[T]</code> and functions producing signal types).</li><li>Signals are conceptualized as streams of values, and input signalsare required to have a default value.</li><li>Signal transformations and combinations are achieved using<code>lift_n</code> primitives, which apply functions to the currentvalues of signals.</li><li>The <code>foldp</code> primitive performs computations on bothcurrent and previous signal values, acting like a fold operation on asignal.</li><li>An example of <code>foldp</code> is counting key presses using asignal that indicates the latest key pressed.</li><li>FElm's type system prohibits signals of signals to avoid potentialcomputational inefficiencies and inconsistencies.</li><li>FElm programs evaluate in two stages: functional constructs arefirst evaluated, resulting in an intermediate term showing signalconnections; then signals are evaluated in a push-based manner as newinput values arrive.</li><li>Signal terms are represented as directed acyclic graphs, where nodesrepresent source nodes, <code>liftn</code> terms, and <code>foldp</code>terms.</li><li>An event occurs when a source node produces a new value, with aglobal event dispatcher ensuring total order and non-simultaneity ofevents.</li><li>Whenever an event occurs, all source nodes are notified by theglobal event dispatcher: the one source node relevant to the eventproduces the new value, and all other source nodes generate a specialvalue noChange v, where v is the current (unchanged) value of thesignal.</li><li>Nodes perform computations on signal values, with synchronousconceptual computation but pipelined execution for efficiency.</li><li>The <code>async</code> primitive allows for specifying asynchronouscomputations, enabling separation of long-running computations andmaintaining GUI responsiveness. An <code>async</code> node creates a newsource node. When an <code>async</code> node produces a value, it istreated like an event from the external environment associated from thatnew source node.</li><li><code>async</code> effectively divides the synchronous graph into aprimary subgraph and multiple secondary subgraphs, maintaining eventorder within each subgraph but not globally, enhancing responsivenesswithout strict global event ordering.</li></ul><h1 id="building-guis-with-elm">Building GUIs with Elm</h1><ul><li>Elm encourages separation between reactive code and GUI layout code,using a purely functional and declarative approach for graphicallayout.</li><li>Elm supports various base values, including strings, numbers, time,tuples, and graphical values like Elements and Forms.</li><li>Libraries in Elm offer data structures like options, lists, sets,and dictionaries.</li><li>Elm provides input support from devices like mouse, keyboard, touch,and also handles window attributes and network communication viaHTTP.</li><li>It supports JSON, Markdown for text creation, let-polymorphism,recursive simple types, type inference, extensible records, and a modulesystem.</li><li>Elm has two major graphical primitives: elements and forms.<ul><li>Elements are rectangles that can contain text, images, orvideos.</li><li>Forms allow for non-rectangular shapes and text, including arbitrary2D shapes with texture and color enhancements.</li></ul></li><li>Reactive GUIs in Elm interact with user input and environmentalevents using primitive signals.</li><li>Elm's signal identifiers include Mouse.position, Mouse.clicks,Window.dimensions, Time.every, Time.fps, Touch.touches, Touch.taps,Keyboard.keysDown, Keyboard.arrows, and Keyboard.shift.</li><li>Input components like text boxes, buttons, and sliders arerepresented as pairs of signals: an element for the graphical componentand a value for the input.</li><li>The <code>Input.text</code> function in Elm allows for the creationof text input components, returning a pair of signals for the graphicalinput field and the current user input.</li></ul><h1 id="other-links">Other Links</h1><ul><li><ahref="https://package.elm-lang.org/packages/evancz/automaton/latest/Automaton">Understandingthe Automaton</a></li><li>Time-Travel Debugging (when Elm was still based on FRP)<ul><li><ahref="https://web.archive.org/web/20160206080252/http://elm-lang.org/blog/interactive-programming">InteractiveProgramming</a></li><li><ahref="https://web.archive.org/web/20160503091931/http://debug.elm-lang.org/">Elm’sTime Traveling Debugger</a></li><li>https://web.archive.org/web/20160504183927/http://elm-lang.org/</li><li><a href="https://www.youtube.com/watch?v=lK0vph1zR8s">Bret Victorstyle reactive debugging ‒ Laszlo Pandy</a></li><li><a href="https://www.youtube.com/watch?v=PUv66718DII">Bret Victor -Inventing on Principle</a></li></ul></li><li><ahref="https://www.youtube.com/live/vHI7XlgmYCg?si=wWyHsFa6P6FHOZbw&amp;t=2324">Reasonfor a farewell to FRP: learning curve as Elm went mainstream</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NOTE: This is a Paper Reading for the PL Reading Group. The original
paper can be found &lt;a
href=&quot;https://people.seas.harvard.edu/~chong/p</summary>
      
    
    
    
    <category term="Paper Reading" scheme="https://jifengwu2k.github.io/categories/Paper-Reading/"/>
    
    <category term="PL Reading Group" scheme="https://jifengwu2k.github.io/categories/Paper-Reading/PL-Reading-Group/"/>
    
    
  </entry>
  
  <entry>
    <title>Functional Array Programming</title>
    <link href="https://jifengwu2k.github.io/2024/01/04/Functional-Array-Programming/"/>
    <id>https://jifengwu2k.github.io/2024/01/04/Functional-Array-Programming/</id>
    <published>2024-01-04T05:00:00.000Z</published>
    <updated>2025-08-13T04:31:51.274Z</updated>
    
    <content type="html"><![CDATA[<h1id="functional-programming-in-r-focus-on-usability-contains-detailed-description-of-removing-for-loops">FunctionalProgramming in R (focus on <em>usability</em>, contains detaileddescription of <em>removing for loops</em>)</h1><ul><li>http://modern-rstats.eu/functional-programming.html</li><li>https://appsilon.com/functional-programming-in-r-part-1/</li><li>http://adv-r.had.co.nz/Functional-programming.html</li><li>https://www.stat.umn.edu/geyer/8054/notes/functional.html</li><li>https://www.reddit.com/r/Rlanguage/comments/vxsf4p/is_r_a_functional_programming_language/</li></ul><h1id="functional-programming-in-python-focus-on-usability-contains-detailed-description-of-removing-for-loops-broadcasting-persistent-ndarrays-jax-and-representing-multimodal-data-using-records-and-trees">FunctionalProgramming in Python (focus on <em>usability</em>, contains detaileddescription of <em>removing for loops</em>, <em>broadcasting</em>,<em>persistent ndarrays (JAX)</em> and <em>representing multimodal datausing records and trees</em>)</h1><ul><li>https://realpython.com/numpy-array-programming/</li><li>https://jax.readthedocs.io/en/latest/jax-101/07-state.html</li><li>https://data-apis.org/</li><li>https://github.com/docarray/docarray</li><li>https://jax.readthedocs.io/en/latest/pytrees.html</li></ul><h1id="scientific-computing-in-ocaml-focus-on-ocaml-comprehensive-not-necessarily-pure">ScientificComputing in OCaml (focus on <em>OCaml</em>, comprehensive, notnecessarily pure)</h1><ul><li>https://link.springer.com/book/10.1007/978-3-030-97645-3</li></ul><h1id="functional-array-programming-per-se-focus-on-theory---rank-polymorphism-and-performance">FunctionalArray Programming Per Se (focus on <em>theory</em> - <em>rankpolymorphism</em> and <em>performance</em>)</h1><ul><li>https://github.com/f5devcentral/shapeRank</li><li>https://prl.khoury.northeastern.edu/blog/2017/05/04/rank-polymorphism/</li><li>https://futhark-lang.org/publications.html</li></ul><h1 id="related-topics">Related Topics</h1><h2 id="arrays-vs.-linked-lists-in-functional-programming">Arrays vs.Linked Lists in Functional Programming</h2><ul><li>https://www.reddit.com/r/haskell/comments/hvxqzz/is_it_unfunctional_to_use_direct_access_arrays/</li></ul><h2 id="data-access-patterns">Data Access Patterns</h2><ul><li>http://www.nic.uoregon.edu/~khuck/ts/acumem-report/manual_html/ch05s02.html</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;functional-programming-in-r-focus-on-usability-contains-detailed-description-of-removing-for-loops&quot;&gt;Functional
Programming in R (foc</summary>
      
    
    
    
    <category term="Software Design" scheme="https://jifengwu2k.github.io/categories/Software-Design/"/>
    
    
  </entry>
  
</feed>
