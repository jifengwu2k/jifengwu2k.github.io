<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Using Jupyter Lab as a Lightweight Remote Desktop</title>
    <link href="/2025/10/04/Using-Jupyter-Lab-as-a-Lightweight-Remote-Desktop/"/>
    <url>/2025/10/04/Using-Jupyter-Lab-as-a-Lightweight-Remote-Desktop/</url>
    
    <content type="html"><![CDATA[<h1 id="using-jupyter-lab-as-a-lightweight-remote-desktop">Using JupyterLab as a Lightweight Remote Desktop</h1><p>Jupyter Lab isn't just for data scince - it's a powerful all-in-oneenvironment offering:</p><ul><li>Programming (Python, R, etc.)</li><li>Shell Access</li><li>File Browser &amp; Editor</li><li>Plugins</li></ul><p>All within your browser, without heavy windowing systems or VNC,making it a great alternative to traditional remote desktops!</p><h2 id="setup-instructions">Setup Instructions</h2><h3 id="server-side">Server Side</h3><p>First, <ahref="/2025/07/10/Managing-Development-Environments-with-Conda/">installConda and set up a Conda environment</a>.</p><h4 id="install-jupyter-lab">Install Jupyter Lab</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install -c conda-forge jupyterlab<br></code></pre></td></tr></table></figure><p>Install kernels for Jupyter Lab:</p><p>Python (IPyKernel):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install -c conda-forge ipykernel<br></code></pre></td></tr></table></figure><p>R (IRKernel):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install -c conda-forge r-irkernel<br></code></pre></td></tr></table></figure><h4 id="launch-jupyter-lab-and-make-it-accessible">Launch Jupyter Laband Make it accessible</h4><p>Start a <code>tmux</code> session.</p><p>Start JupyterLab in it, listening on localhost, with nopassword/token:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jupyter lab --ip=127.0.0.1 --no-browser --NotebookApp.token=<span class="hljs-string">&#x27;&#x27;</span> --NotebookApp.password=<span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>Then open another <code>tmux</code> pane, set up <ahref="https://github.com/jifengwu2k/push-pull-port">push-pull-port</a>,and push SSH port 22 to port <code>$PUBLIC_PORT</code> of remote publicserver <code>$PUBLIC_HOST</code>:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">sh <span class="hljs-keyword">push</span>-<span class="hljs-keyword">local</span>-port.sh -l <span class="hljs-number">22</span> -r $PUBLIC_PORT -u $PUBLIC_USER -h $PUBLIC_HOST <br></code></pre></td></tr></table></figure><p>Then detach from the <code>tmux</code> session.</p><h3 id="client-side">Client Side</h3><p>Set up <ahref="https://github.com/jifengwu2k/push-pull-port">push-pull-port</a>.</p><p>Pull the remote port and forward it to your local <code>8888</code>port:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sh pull-remote-port<span class="hljs-selector-class">.sh</span> -r <span class="hljs-number">8888</span> -l <span class="hljs-number">8888</span> -u <span class="hljs-variable">$PRIVATE_USER</span> -h <span class="hljs-variable">$PUBLIC_HOST</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-variable">$PUBLIC_PORT</span><br></code></pre></td></tr></table></figure><p>Access in Browser: Open <ahref="http://localhost:8888/lab">http://localhost:8888/lab</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Environments</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025-09 Financial Statement</title>
    <link href="/2025/10/04/2025-09-Financial-Statement/"/>
    <url>/2025/10/04/2025-09-Financial-Statement/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csv">date,name,amount<br>2025-09-01,Cornell Universi NBS REFUND Monthly Dividend,3195.846<br>2025-09-01,ETSY, INC. ETSY.COM*BU BROOKLYN NY,-2.70<br>2025-08-31,GANNETT MEDIA CO 888-426-0491 VA,-1.00<br>2025-09-02,Payment to Chase card ending in &lt;redacted&gt;,-200.00<br>2025-09-02,MIDJOURNEY INC. MIDJOURNEY.CO CA,-10.80<br>2025-09-03,WALMART.COM 800-925-6278 AR,-17.14<br>2025-09-03,MIDJOURNEY INC. MIDJOURNEY.CO CA,-103.68<br>2025-09-04,WALMART.COM 800-925-6278 AR,-82.54<br>2025-09-03,WMT PLUS Sep 2025 800-925-6278 AR,-2.99<br>2025-09-07,Coinbase Oakland CA,-20.00<br>2025-09-08,Payment to Chase card ending in &lt;redacted&gt;,-40.00<br>2025-09-07,WALMART.COM 800-925-6278 AR,-45.47<br>2025-09-10,Payment to Chase card ending in &lt;redacted&gt;,-118.49<br>2025-09-10,WALMART.COM 800-925-6278 AR,-10.70<br>2025-09-12,APPLE.COM/BILL 866-712-7753 CA,-10.99<br>2025-09-12,Payment to Chase card ending in &lt;redacted&gt;,-26.40<br>2025-09-12,WALMART.COM 800-925-6278 AR,-42.48<br>2025-09-15,Payment to Chase card ending in &lt;redacted&gt;,-1668.52<br>2025-09-15,Zelle payment from &lt;redacted&gt;,14.20<br>2025-09-17,Payment to Chase card ending in &lt;redacted&gt;,-170.00<br>2025-09-18,OPENAI OPENAI.COM CA,-10.03<br>2025-09-20,OPENAI OPENAI.COM CA,-45.07<br>2025-09-20,USPS CHANGE OF ADDRESS 800-238-3150 TN,-1.25<br>2025-09-22,Payment to Chase card ending in &lt;redacted&gt;,-118.35<br>2025-09-22,Zelle payment to &lt;redacted&gt;,-15.00<br>2025-09-23,Payment to Chase card ending in &lt;redacted&gt;,-240.69<br>2025-09-29,Payment to Chase card ending in &lt;redacted&gt;,-220.00<br>2025-09-29,Payment to Chase card ending in &lt;redacted&gt;,-29.95<br>2025-09-29,Zelle payment to &lt;redacted&gt;,-28.00<br></code></pre></td></tr></table></figure><p>Total Net: -72.19</p>]]></content>
    
    
    <categories>
      
      <category>Financial Statements</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>POSIX Shell Coding How-Tos</title>
    <link href="/2025/09/28/POSIX-Shell-Coding-How-Tos/"/>
    <url>/2025/09/28/POSIX-Shell-Coding-How-Tos/</url>
    
    <content type="html"><![CDATA[<h2 id="removing-suffix-by-separator">Removing Suffix by Separator</h2><p>Want to strip off everything after the <strong>first or lastoccurrence</strong> of a separator in a string? Suppose your string is<code>$string</code> and the separator is <code>$separator</code>:</p><p>Before the <strong>first</strong> occurrence:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">result=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;string%%&quot;$separator&quot;*&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Before the <strong>last</strong> occurrence:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">result=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;string%&quot;$separator&quot;*&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">string=<span class="hljs-string">&#x27;abc-def-ghi&#x27;</span><br>separator=<span class="hljs-string">&#x27;-&#x27;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;string%%&quot;$separator&quot;*&#125;</span>&quot;</span>  <span class="hljs-comment"># Outputs: abc</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;string%&quot;$separator&quot;*&#125;</span>&quot;</span>   <span class="hljs-comment"># Outputs: abc-def</span><br></code></pre></td></tr></table></figure><h2 id="appending-content-to-a-command-pipeline">Appending Content to aCommand Pipeline</h2><p>Suppose you have a file and want to process its contents, then appendmore data before passing it all to the next part of a pipeline. The mostrobust, portable (POSIX-compliant) solution is:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123; <span class="hljs-built_in">cat</span> file.txt; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;additional content&#x27;</span>; &#125; | your_next_command<br></code></pre></td></tr></table></figure><p>Why this works:</p><ul><li><code>&#123; ...; &#125;</code> groups commands together in the currentshell.</li><li>The pipe (<code>|</code>) passes their combined output.</li><li>This does not create unnecessary subshells and works in all POSIXshells.</li></ul><p><strong>Syntax tip:</strong> A space is required after <code>&#123;</code>and the last command must end in a semicolon (<code>;</code>) before theclosing <code>&#125;</code>.</p><h2 id="safely-using-find-xargs-with-filenames">Safely Using<code>find</code> + <code>xargs</code> with Filenames</h2><p>Using <code>find</code> + <code>xargs</code> with filenames can breakwhen filenames have spaces or special characters. To handle this safely,use null (<code>\0</code>) terminators:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">find mydir -name <span class="hljs-string">&#x27;*.txt&#x27;</span> -print0 | xargs -0 <span class="hljs-built_in">rm</span><br></code></pre></td></tr></table></figure><ul><li><code>-print0</code> makes <code>find</code> use a null character atthe end of each filename.</li><li><code>-0</code> tells <code>xargs</code> to expect null-delimitedinput.</li></ul><p>This combination ensures even weird filenames (with spaces, newlines,quotes, etc.) are handled safely.</p><h2 id="batch-killing-processes">Batch Killing Processes</h2><p>Sometimes we acidentally spawn a series of processes, and we want tokill them. We can look up their pid's through<code>ps -aux | grep &lt;process_name&gt;</code> (as shown below) andmanually run the <code>kill</code> command to kill each process byproviding its pid, but <em>how can we automate this tedioustask</em>?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.7  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.3  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br>jifengwu   59564  0.0  0.0  19612  2516 pts/2    S+   13:45   0:00 grep --color=auto pipreqs<br></code></pre></td></tr></table></figure><p>First, we can add <code>grep -v grep</code> to the pipe to <em>hidethe grep processes from the output</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep<br>jifengwu   58180  0.0  0.1  46440 27332 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/spectria/tildes/tildes --mode no-pin<br>jifengwu   58205  0.1  0.1  48140 29392 pts/0    T    13:38   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/PnX-SI/GeoNature --mode no-pin<br>jifengwu   58224  5.6  0.2  51856 33108 pts/0    T    13:38   0:23 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/fabiandevia/home --mode no-pin<br>jifengwu   58267  4.4  0.2  57880 38204 pts/0    T    13:39   0:17 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/377312117/gitproject --mode no-pin<br>jifengwu   58272  2.2  0.2  53756 34252 pts/0    T    13:39   0:08 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/crazyfish1111/home --mode no-pin<br>jifengwu   58282  0.1  0.1  47840 28132 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/Piratenpartei/ekklesia-portal --mode no-pin<br>jifengwu   58295  0.1  0.1  48220 28492 pts/0    T    13:39   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/jauhararifin/ugrade/server --mode no-pin<br>jifengwu   58659  0.3  0.1  48608 29324 pts/0    T    13:41   0:00 /home/jifengwu/miniconda3/envs/dataset_investigation/bin/python /home/jifengwu/miniconda3/envs/dataset_investigation/bin/pipreqs repos/klen/pylama --mode no-pin<br></code></pre></td></tr></table></figure><p>Then, we can add <code>awk '&#123;print $2&#125;'</code> to the pipe to invoke<code>awk</code> to <em>trim the second space-delimited component</em>(which in this case is the pid). Now we have a list of the pid's of theprocesses we want to kill:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br>58180<br>58205<br>58224<br>58267<br>58272<br>58282<br>58295<br>58659<br></code></pre></td></tr></table></figure><p>Finally, we can iterate over the pid's in a for-loop to killthem.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> $(ps aux | grep pipreqs | grep -v grep | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">kill</span> -15 <span class="hljs-variable">$pid</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="copying-files-via-cat-and-dd">Copying Files via <code>cat</code>and <code>dd</code></h2><p><code>cat</code> and <code>dd</code> are standard Unix utilities forhandling file data.</p><ul><li><code>cat</code> outputs the contents of a file to<code>stdout</code>.</li><li><code>dd</code> reads <code>stdin</code> (if no <code>if=</code>)and writes to <code>stdout</code> or a file.</li></ul><p>To copy a file, you can use a Unix pipe (<code>|</code>) to send<code>cat</code>'s output to <code>dd</code>, then write to adestination file:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> sourcefile | <span class="hljs-built_in">dd</span> of=destinationfile<br></code></pre></td></tr></table></figure><h3 id="potential-advantages-of-cat-and-dd-over-cp">Potential Advantagesof <code>cat</code> and <code>dd</code> Over <code>cp</code></h3><h4 id="better-progressstatistics"><strong>Betterprogress/statistics</strong></h4><ul><li><code>dd</code> with the <code>status=progress</code> (GNU dd)option shows live copy statistics: <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat bigfile | dd <span class="hljs-attribute">of</span>=outfile <span class="hljs-attribute">status</span>=progress<br></code></pre></td></tr></table></figure></li></ul><h4 id="working-around-cp-limitations"><strong>Working Around<code>cp</code> Limitations</strong></h4><ul><li>Some device files, file descriptors, or pseudo-files (like<code>/proc</code> or <code>/sys</code>) do not support <code>cp</code>,but streaming with <code>cat</code> + <code>dd</code> may work.</li></ul><h2 id="parsing-command-line-options">Parsing Command-line Options</h2><p><code>getopts</code> is a built-in Unix shell command for parsingcommand-line options. It is a wrapper around <code>getopt</code>, aPOSIX C library function used to parse command-line options of theUnix/POSIX style. Specifically:</p><ul><li>Options are <em>single-character alphanumerics</em> preceded by a -(hyphen-minus) character, i.e. <code>-a</code>. <code>-b</code>,<code>-c</code>.</li><li>Options can take an argument or none.</li><li>Multiple options can be chained together, as long as the non-lastones are not argument-taking. If <code>-a</code> and <code>-b</code>take no arguments while <code>-c</code> takes an argument,<code>-abc foo</code> is the same as <code>-a -c -e foo</code>, but<code>-bca</code> is not the same as <code>-b -c a</code> due to thepreceding rule.</li><li>When an option takes an argument, this can be in the same token orin the next one. In other words, if <code>-c</code> takes an argument,<code>-cfoo</code> is the same as <code>-c foo</code>.</li></ul><h3 id="optstrings"><code>optstring</code>'s</h3><p>Both getopt and getopts specifies specify options using a<em>optstring</em>. Specifically:</p><ul><li><em>Begin an optstring with <code>:</code>.</em></li><li>To specify an option that <em>does not take an argument</em>, appendits name to the optstring.</li><li>To specify an option that <em>takes an argument</em>, append itsname <em>and <code>:</code></em> to the optstring.</li></ul><p>For example, the optstring that specifies two options<code>-a</code>, <code>-b</code> that do not take arguments and twooptions <code>-c</code>, <code>-d</code> that take arguments is<code>:abc:d:</code>.</p><h3 id="using-getopts-in-a-shell-script">Using <code>getopts</code> in aShell Script</h3><p>In Shell scripts, <code>getopts</code> invoked with an<code>optstring</code> is used with a <code>while</code>-loop to parsecommand-line options.</p><p>Say that our Shell script <code>test_getopts.sh</code> accepts twooptions <code>-a</code>, <code>-b</code> that do not take arguments andtwo options <code>-c</code>, <code>-d</code> that take arguments. OurShell script can look like this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&#x27;:abc:d:&#x27;</span> name<br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$name</span> <span class="hljs-keyword">in</span><br>        a)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -a&quot;</span><br>            ;;<br>        b)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -b&quot;</span><br>            ;;<br>        c)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -c with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        d)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided option -d with argument <span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>        :)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Option -<span class="hljs-variable">$OPTARG</span> requires an argument&quot;</span><br>            ;;<br>        ?)<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;You provided an invalid option -<span class="hljs-variable">$OPTARG</span>&quot;</span><br>            ;;<br>    <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>Here, <code>getopts</code> is invoked with the <code>optstring</code>for specifying our options, <code>:abc:d:</code>. In each iteration ofthe <code>while</code>-loop, the <em>next option</em> is parsed and theShell variables <code>name</code> and <code>OPTARG</code> are set todifferent values based on different conditions we may encounter.</p><ul><li>If a <em>valid</em> option is detected and that option <em>does nottake an argument</em>, the Shell variable <code>name</code> is set tothe name of the option.</li><li>If a <em>valid</em> option is detected and that option <em>takes anargument</em>:<ul><li>If we have provided an argument, the Shell variable<code>name</code> is set to the name of the option, and the Shellvariable <code>OPTARG</code> is set to the value of the argument.</li><li>If we <em>haven't provided an argument</em>, <em>the Shell variable<code>name</code> is set to <code>:</code>, and the Shell variable<code>OPTARG</code> is set to the name of the argument</em>.</li></ul></li><li>If an <em>invalid</em> option is detected, <em>the Shell variable<code>name</code> is set to <code>?</code>, and the Shell variable<code>OPTARG</code> is set to the name of the argument</em>.</li></ul><p>We can see <code>getopts</code> at work by providing differentcommand-line options when invoking our Shell script.</p><p>Providing no command-line options:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-a</code> that do not take arguments<em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -a -a<br>You provided option -a<br>You provided option -a<br>$ sh test_getopts.sh -aa<br>You provided option -a<br>You provided option -a<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with anargument <code>foo</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo<br>You provided option -c with argument foo<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument with anargument <code>foo</code> <em>twice</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c foo -c bar<br>You provided option -c with argument foo<br>You provided option -c with argument bar<br></code></pre></td></tr></table></figure><p>Providing option <code>-c</code> that takes an argument without anargument:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -c<br>Option -c requires an argument<br></code></pre></td></tr></table></figure><p>Providing an invalid argument <code>-e</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sh test_getopts.sh -e<br>You provided an invalid option -e<br></code></pre></td></tr></table></figure><h3 id="references">References</h3><ul><li>https://www.baeldung.com/linux/grep-exclude-ps-results</li><li>https://stackoverflow.com/questions/46008880/how-to-always-cut-the-pid-from-ps-aux-command</li><li>https://en.wikipedia.org/wiki/Getopts</li><li>https://pubs.opengroup.org/onlinepubs/9699919799/utilities/getopts.html</li><li>https://en.wikipedia.org/wiki/Getopt</li><li>https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reference</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Coding Guidelines</title>
    <link href="/2025/09/15/C-Coding-Guidelines/"/>
    <url>/2025/09/15/C-Coding-Guidelines/</url>
    
    <content type="html"><![CDATA[<h2 id="guiding-philosophy">Guiding Philosophy</h2><ul><li>Prioritize modularity, clarity, and maintainability over prematureoptimization or legacy patterns.<ul><li>Code should be readable, easily understood, and safe bydefault.</li></ul></li><li>Favor Python-style expressiveness with modern C++ strengths:<ul><li>Use strong type systems, STL containers, concepts, range-based andhigher-order functions.</li><li>Avoid C-style loops, macros, and pointer tricks that hideintent.</li></ul></li><li>Make the compiler's job as easy as possible:<ul><li>Clear ownership, resource lifetime, and data flow allow compilers tooptimize code aggressively.</li><li>By avoiding hidden dependencies and using STL idioms, enable thecompiler to perform superior vectorization, inlining, and memory/layoutoptimizations.</li></ul></li><li>Design for trivial portability to GPU, FPGA, and other accelerators:<ul><li>Functional, range-based, and stateless/RAII idioms map directly tobulk-parallel and dataflow hardware.</li><li>State machines using <code>std::variant</code> or explicit types,instead of enums and scattered flags, make auto-parallelization andoffloading straightforward.</li><li>Consistent type size/platform rules yield code predictable forhigh-level synthesis and cross-ISA portability.</li><li>By steering clear of manual low-level hacks, code lifts cleanly tomodern frameworks like CUDA, SYCL, or high-level FPGA toolchains.</li></ul></li><li>C++ is treated as a platform-level language like Python. Theguidelines do not merely govern surface syntax and C++ standardfeatures, but unambiguously specify expectations for the <em>entireexecution environment</em>:<ul><li>ABI (Application Binary Interface)</li><li>OS and system libraries (e.g. POSIX semantics,thread/process/signaling behavior)</li><li>Consistency of type sizes, object layout, exception handling, RTTI,and dynamic loading</li><li>Deterministic handling and semantics for all STL andlanguage/library features</li></ul></li></ul><h2 id="lexical-filing-conventions">Lexical &amp; FilingConventions</h2><h3 id="indentation">Indentation</h3><ul><li>Always use 4 spaces per indentation level (Python style).</li><li>Tabs, 2-space or 8-space indents are forbidden.</li></ul><h3 id="functions-variables">Functions &amp; Variables</h3><ul><li>All function and variable names (including members):<code>snake_case</code>, all lowercase.<ul><li><code>int max_value;</code>, <code>double amount_sum;</code></li></ul></li><li>No CamelCase, PascalCase, or mixing.</li></ul><h3 id="typesclassesstructs">Types/Classes/Structs</h3><ul><li>Class, struct, and enum names: <code>CamelCase</code> (first letterof each word capitalized), <strong>no underscores.</strong><ul><li><code>class FileReader &#123; ... &#125;;</code>,<code>struct UserInfo &#123; ... &#125;;</code></li></ul></li></ul><h3 id="file-extensions">File Extensions</h3><ul><li><code>.c</code>: C-style source code.</li><li><code>.m</code>, <code>.mm</code>: Objective-C style source code.<ul><li>We explicitly allow and encourage the usage of POSIX-compliantObjective-C OUTSIDE the Cocoa framework, whenever Python-style "look upby name" is required.</li></ul></li><li><code>.cpp</code>: C++-style source code.</li><li><code>.h</code>: Only interface declarations, neverfunction/template bodies.</li><li><code>.hpp</code>: Can include full implementations, templates,inline functions.</li></ul><p>No other file extensions.</p><h3 id="include-guards">Include Guards</h3><ul><li>Every header (<code>.h</code>, <code>.hpp</code>) must use aninclude guard named as the file name in all caps, dots replaced withunderscores, with no added prefix or suffix, e.g.,<ul><li><code>foo_bar.h</code> - <code>#ifndef FOO_BAR_H</code></li><li><code>my_class.hpp</code> - <code>#ifndef MY_CLASS_HPP</code></li></ul></li></ul><h3 id="file-naming">File Naming</h3><ul><li>All source/header files: <code>snake_case</code>, all lowercase, useunderscores, e.g.:<ul><li><code>network_manager.h</code>, <code>data_loader.cpp</code></li></ul></li><li>No CamelCase, hyphens, or uppercase.</li></ul><h2 id="type-system-and-data-model">Type System and Data Model</h2><h3 id="type-size-assumptions">Type Size Assumptions</h3><table><thead><tr class="header"><th>Type</th><th>Bytes</th></tr></thead><tbody><tr class="odd"><td><code>char</code></td><td>1</td></tr><tr class="even"><td><code>short</code></td><td>2</td></tr><tr class="odd"><td><code>int</code></td><td>4</td></tr><tr class="even"><td><code>wchar_t</code></td><td>4</td></tr><tr class="odd"><td><code>float</code></td><td>4</td></tr><tr class="even"><td><code>long</code></td><td>8</td></tr><tr class="odd"><td><code>double</code></td><td>8</td></tr></tbody></table><ul><li>Any violation makes the platform "unsupported".</li></ul><h3 id="struct-vs-class-semantics">Struct vs Class Semantics</h3><ul><li>Struct: For plain data (POD).<ul><li>Structs NEVER own resources, nor clean up.</li><li>Always default-initializable to valid state.</li><li>No custom Big Five (destructor, copy constructor, etc.)</li><li>Never allocate struct on the heap (no <code>new StructType</code>).They must live on stack or inside containers/smart pointers.</li><li>Do not store pointers/references to struct instance for long-termuse.</li></ul></li><li>Class: For resource management.<ul><li>Must define explicit constructor(s) and Big Five.</li><li>No raw pointers escape outside internal implementation; prefer smartpointers/containers.</li></ul></li></ul><h3 id="function-parameters">Function Parameters</h3><ul><li>If struct/class is 16 bytes: always pass by reference(<code>const T&amp;</code>/<code>T&amp;</code>/<code>T&amp;&amp;</code>and <code>std::move</code>).</li><li>Value passing only for simple types and small STL types.</li></ul><h3 id="strings-unicode">Strings &amp; Unicode</h3><ul><li><code>std::string</code>: Always UTF-8 encoded.</li><li><code>std::wstring</code> (POSIX): Each <code>wchar_t</code> holds adecoded unicode codepoint; use for character-based logic.<ul><li>Serialize or send as UTF-8 (<code>std::wstring</code> -&gt;<code>std::string</code>) for output/network.</li></ul></li></ul><h3 id="subtyping">Subtyping</h3><ul><li>Use C++20 concepts and duck typing with templates, NOT classinheritance, whenever possible.<ul><li>Prioritize using the standard library's concepts, and use themaccording to Python conventions.<ul><li>See Appendix for details.</li></ul></li></ul></li></ul><h3 id="functors">Functors</h3><ul><li>Always use functors (including lambdas) forgeneralization/high-order logic.</li><li>C-style function pointers are only allowed for low-levelABI/C-interfacing.</li></ul><h3 id="container-data-structure-policy">Container &amp; Data StructurePolicy</h3><ul><li>Always prefer STL: <code>vector</code>, <code>map</code>,<code>set</code>, <code>optional</code>, <code>variant</code>, etc.</li><li>Only use third-party containers (boost, absl, folly) with fulldocumentation and technical review.</li><li>Never hand-write data structures for "preemptive optimization".</li></ul><h2 id="operational-semantics">Operational Semantics</h2><h3 id="control-flow">Control Flow</h3><ul><li>Strongly discourage the use of counting-based for-loops. Hard toread, hard to optimize.</li><li>Only allow <code>goto</code> for control flow in plain-POD non-ownercode, never with objects needing destruction.</li><li>Use modern functional idioms (map/reduce/filter/apply_if) wheneverpossible.</li><li>Use explicit patterns like State Machine whenever possible.<ul><li>Important program states must use concrete types and variants, neverenums+switches+separate local variables, e.g.,<ul><li><code>struct IdleState &#123; /* ... */ &#125;;</code></li><li><code>struct RunningState &#123; /* ... */ &#125;;</code></li><li><code>using State = std::variant&lt;IdleState, RunningState&gt;;</code></li></ul></li></ul></li><li>Use C++20 coroutines for complex control flow.<ul><li>Follow Python generator conventions (<code>co_yield</code> =<code>yield</code>, "delegating" = <code>yield from</code>).</li><li>Document coroutines in Pythonic style for zero cognitive gap.</li></ul></li></ul><h3 id="exceptions-error-handling">Exceptions &amp; Error Handling</h3><h4 id="exception-policy">Exception Policy</h4><ul><li>Use exceptions as standard; do not rewrite everything to error codesor forbid exceptions.</li><li>Only exclude exceptions in hard-constrained "special" cases (must befully justified &amp; documented).</li></ul><h4 id="fail-fast-fail-loudly">Fail Fast, Fail Loudly</h4><ul><li>On detection of error/inconsistency, immediately abort/throw/assertwith full context.<ul><li>Never clip, silence, or tolerate errors unless in controlled,reviewed, and documented edge cases.</li></ul></li></ul><h2 id="platform-build-system">Platform &amp; Build System</h2><h3 id="platform-abi">Platform, ABI</h3><ul><li>Only POSIX-conformant platforms with full POSIX C API for file/IO,threads, sockets, signals, etc. are supported.</li><li>Only Itanium C++ ABI is supported.</li></ul><h3 id="build-toolchain">Build Toolchain</h3><ul><li>All build/link flows use GCC-style CLI tools, preferably LLVM/Clang.<ul><li>Assume availability of all GCC extensions.</li></ul></li><li>Always specify all needed options/libraries, e.g.:<ul><li><code>-pthread</code> (threads)</li><li><code>-lc++</code> (clang libc++)</li><li><code>-ldl</code> (dlopen)</li></ul></li></ul><h3 id="intermediate-representation">Intermediate Representation</h3><ul><li>Always use LLVM IR (<code>.ll</code>, <code>.bc</code>) as theintermediate layer for cross-platform, analysis, optimization.</li><li>Never use native assembly.</li></ul><h2 id="appendix-c-concepts-vs-python-typing-constructs">Appendix: C++Concepts vs Python Typing Constructs</h2><h3 id="equality-ordering">Equality, Ordering</h3><table><thead><tr class="header"><th>C++ Concept</th><th>Example</th><th>Meaning</th><th>Python Typing Equivalent</th></tr></thead><tbody><tr class="odd"><td><code>std::equality_comparable&lt;T&gt;</code></td><td><code>equality_comparable&lt;MyType&gt;</code></td><td>Can test equality (<code>==</code>, <code>!=</code>)</td><td><code>typing.SupportsRichComparison</code></td></tr><tr class="even"><td><code>std::totally_ordered&lt;T&gt;</code></td><td><code>totally_ordered&lt;MyType&gt;</code></td><td>All <code>&lt;, &lt;=, &gt;, &gt;=</code> comparisons</td><td><code>typing.SupportsRichComparison</code></td></tr></tbody></table><h3 id="numeric-and-mathematical-types">Numeric and MathematicalTypes</h3><table style="width:100%;"><thead><tr class="header"><th>C++ Concept</th><th>Example</th><th>Meaning</th><th>Python Typing Equivalent</th></tr></thead><tbody><tr class="odd"><td><code>std::integral&lt;T&gt;</code></td><td><code>integral&lt;int&gt;</code></td><td>Is an integral (integer) type</td><td><code>numbers.Integer</code></td></tr><tr class="even"><td><code>std::signed_integral&lt;T&gt;</code></td><td><code>signed_integral&lt;int&gt;</code></td><td>Is a signed integer type</td><td></td></tr><tr class="odd"><td><code>std::unsigned_integral&lt;T&gt;</code></td><td><code>unsigned_integral&lt;uint32_t&gt;</code></td><td>Is an unsigned integer type</td><td></td></tr><tr class="even"><td><code>std::floating_point&lt;T&gt;</code></td><td><code>floating_point&lt;double&gt;</code></td><td>Is a floating point type</td><td><code>numbers.Real</code></td></tr></tbody></table><h3 id="containers">Containers</h3><table><thead><tr class="header"><th>C++ Concept</th><th>Example</th><th>Meaning</th><th>Python Typing Equivalent</th></tr></thead><tbody><tr class="odd"><td><code>std::ranges::range&lt;T&gt;</code></td><td><code>range&lt;std::vector&lt;int&gt;&gt;</code></td><td>Iterable range concept</td><td><code>typing.Iterable[T]</code></td></tr><tr class="even"><td><code>std::ranges::input_range&lt;T&gt;</code></td><td><code>input_range&lt;std::istream&gt;</code></td><td>Readable, single pass</td><td><code>typing.Iterator[T]</code></td></tr><tr class="odd"><td><code>std::ranges::sized_range&lt;T&gt;</code></td><td><code>sized_range&lt;std::array&lt;int, 3&gt;&gt;</code></td><td>Has a known size (<code>.size()</code>)</td><td><code>typing.Sized</code></td></tr><tr class="even"><td><code>std::ranges::output_range&lt;T, V&gt;</code></td><td></td><td>Writable range (output iterators)</td><td><code>typing.MutableSequence[T]</code></td></tr><tr class="odd"><td><code>std::ranges::view&lt;T&gt;</code></td><td></td><td>Lightweight, non-owning range</td><td></td></tr><tr class="even"><td><code>std::input_iterator&lt;T&gt;</code></td><td><code>input_iterator&lt;Iter&gt;</code></td><td>Supports <code>++</code>, deref, read</td><td><code>typing.Iterator[T]</code></td></tr><tr class="odd"><td><code>std::forward_iterator&lt;T&gt;</code></td><td><code>forward_iterator&lt;Iter&gt;</code></td><td>Multi-pass input iterator</td><td><code>typing.Iterator[T]</code></td></tr><tr class="even"><td><code>std::bidirectional_iterator&lt;T&gt;</code></td><td><code>bidirectional_iterator&lt;Iter&gt;</code></td><td>Forward/backward iteration</td><td><code>typing.Sequence[T]</code></td></tr><tr class="odd"><td><code>std::random_access_iterator&lt;T&gt;</code></td><td><code>random_access_iterator&lt;Iter&gt;</code></td><td>Supports <code>it[n]</code> indexing, etc.</td><td><code>typing.Sequence[T]</code></td></tr><tr class="even"><td><code>std::contiguous_iterator&lt;T&gt;</code></td><td><code>contiguous_iterator&lt;Iter&gt;</code></td><td>Underlying data is contiguous in memory</td><td><code>typing.Sequence[T]</code></td></tr></tbody></table><h3 id="callables">Callables</h3><table><thead><tr class="header"><th>C++ Concept</th><th>Example</th><th>Meaning</th><th>Python Typing Equivalent</th></tr></thead><tbody><tr class="odd"><td><code>std::invocable&lt;F, Args...&gt;</code></td><td><code>invocable&lt;Fn, int&gt;</code></td><td>Callable object (function, lambda, etc.)</td><td><code>typing.Callable[..., T]</code></td></tr><tr class="even"><td><code>std::predicate&lt;F, Args...&gt;</code></td><td><code>predicate&lt;Fn, int&gt;</code></td><td>Callable returns <code>bool</code></td><td><code>typing.Callable[..., bool]</code></td></tr></tbody></table><h3 id="type-identity-and-conversion">Type Identity and Conversion</h3><table><thead><tr class="header"><th>C++ Concept</th><th>Example (C++)</th><th>Meaning</th><th>Python <code>typing</code> Equivalent</th></tr></thead><tbody><tr class="odd"><td><code>std::same_as&lt;T, U&gt;</code></td><td><code>same_as&lt;int, int&gt;</code></td><td>Types are exactly the same</td><td></td></tr><tr class="even"><td><code>std::convertible_to&lt;From, To&gt;</code></td><td><code>convertible_to&lt;int, float&gt;</code></td><td>Can be converted (<code>static_cast&lt;To&gt;(from)</code>)</td><td></td></tr><tr class="odd"><td><code>std::derived_from&lt;D, B&gt;</code></td><td><code>derived_from&lt;class A, class Base&gt;</code></td><td>D inherits from B</td><td></td></tr><tr class="even"><td><code>std::constructible_from&lt;T, Args...&gt;</code></td><td><code>constructible_from&lt;std::string, const char*&gt;</code></td><td>Constructible from given args</td><td><code>typing.Callable</code> for constructors</td></tr><tr class="odd"><td><code>std::default_initializable&lt;T&gt;</code></td><td></td><td>Default (no-arg) constructable</td><td></td></tr></tbody></table><h3 id="copying-moving-assignment-swap">Copying, Moving, Assignment&amp; Swap</h3><table><thead><tr class="header"><th>C++ Concept</th><th>Example</th><th>Meaning</th><th>Python Typing Equivalent</th></tr></thead><tbody><tr class="odd"><td><code>std::move_constructible&lt;T&gt;</code></td><td><code>move_constructible&lt;MyType&gt;</code></td><td>Supports move semantics</td><td></td></tr><tr class="even"><td><code>std::copy_constructible&lt;T&gt;</code></td><td><code>copy_constructible&lt;MyType&gt;</code></td><td>Can be copy-constructed</td><td></td></tr><tr class="odd"><td><code>std::assignable_from&lt;T, U&gt;</code></td><td><code>assignable_from&lt;MyType&amp;, int&gt;</code></td><td>lhs can be assigned rhs</td><td></td></tr><tr class="even"><td><code>std::swappable&lt;T&gt;</code></td><td><code>swappable&lt;MyType&gt;</code></td><td>Can exchange values (swap)</td><td></td></tr><tr class="odd"><td><code>std::swappable_with&lt;T, U&gt;</code></td><td><code>swappable_with&lt;A, B&gt;</code></td><td>Can swap values with another type</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Reference</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>古诗词现代解读</title>
    <link href="/2025/09/12/%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%8E%B0%E4%BB%A3%E8%A7%A3%E8%AF%BB/"/>
    <url>/2025/09/12/%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%8E%B0%E4%BB%A3%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>朝搴阰之木兰兮，夕揽洲之宿莽。</p><p>乘骐骥以驰骋兮，来吾道夫先路！</p><p>朝饮木兰之坠露兮，夕餐秋菊之落英。</p><p>回朕车以复路兮，及行迷之未远。</p><p>步余马于兰皋兮，驰椒丘且焉止息。</p><p>忽反顾以游目兮，将往观乎四荒。</p><p>驷玉虬以桀鹥兮，溘埃风余上征。</p><p>朝发轫于苍梧兮，夕余至乎县圃。</p><p>览相观于四极兮，周流乎天余乃下。</p><p>朝发轫于天津兮，夕余至乎西极。</p><p>凤皇翼其承旗兮，高翱翔之翼翼。</p><p>驾八龙之婉婉兮，载云旗之委蛇。</p><p>抑志而弭节兮，神高驰之邈邈。</p><p>陟升皇之赫戏兮，忽临睨夫旧乡。</p><p>——屈原</p></blockquote><p>现代解读：</p><ul><li>沿江河步行，</li><li>驾车翻越山岗，</li><li>然后飞上三万五千英尺的高空，</li><li>俯瞰荆楚大地郁郁葱葱的照叶树林。</li></ul><hr /><blockquote><p>穷发之北，有冥海者，天池也……背若泰山，翼若垂天之云，抟扶摇羊角而上者九万里，绝云气，负青天，然后图南，且适南冥也。</p><p>天之苍苍，其正色邪？其远而无所至极邪？其视下也，亦若是则已矣。且夫水之积也不厚，则其负大舟也无力……风之积也不厚，则其负大翼也无力。故九万里，则风斯在下矣……</p><p>——庄子</p></blockquote><blockquote><p>北海虽赊，扶摇可接。东隅已逝，桑榆非晚。</p><p>——王勃</p></blockquote><hr /><p>现代解读：</p><ul><li>从中原到贝加尔湖乃至更远的北极地区，是跨越数千公里的超远距离。</li><li>“扶摇”是想象中的、威力无穷的自然之力，而科技将古典文学中最瑰丽的想象变成了现实。</li><li>在百万英尺的高空，空气稀薄，阻力极小，飞机可以高效地进行高超音速巡航，实现极速远距离飞行。</li><li>在这个高度，飞行员所见正是永恒的夜色，脚下是云层或微茫的大地，星辰仿佛触手可及。</li></ul><hr /><blockquote><p>Deniz üstü köpürür ... Benim de şu cihana gelişim ... Deniz üstüyelkenden ... Denizin ortasında ... Benim de bu cihandan gidişim</p><p>Kayığa da binsem götürür ... Bir güzelden ötürü ... Ecel geldierkenden ... Mum yanar sofrasında ... Memleket sevdasından</p><p>Hey canım, hey ... Hey canım, hey ... Hey canım, hey ... Hey canım,hey ... Hey canım, hey</p><ul><li>Cem Karaca</li></ul></blockquote><p>现代解读：</p><p>运用比兴及复沓的手法，一唱三叹，表达其“道不行，乘桴浮于海”，政治上落魄失意。</p>]]></content>
    
    
    <categories>
      
      <category>Linguistics and Literature</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Running Local LLMs with Ollama</title>
    <link href="/2025/09/05/Running-Local-LLMs-with-Ollama/"/>
    <url>/2025/09/05/Running-Local-LLMs-with-Ollama/</url>
    
    <content type="html"><![CDATA[<p>Large Language Models (LLMs) have revolutionized AI, but cloud-basedsolutions often come with privacy concerns and usage limitations. Ollamaprovides an elegant solution by enabling you to run LLMs locally on yourmachine. This guide will walk you through the entire process frominstallation to interaction.</p><h2 id="what-is-ollama">What is Ollama?</h2><p>Ollama is a lightweight, extensible framework that allows you to runvarious open-source LLMs on your local hardware. It handles modelweights, configurations, and provides a simple API interface similar toOpenAI's.</p><h2 id="installation-process">Installation Process</h2><h3 id="download-ollama">Download Ollama</h3><p>Open your terminal and execute the following command to download thelatest version of Ollama:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://ollama.com/download/ollama-linux-amd64.tgz<br></code></pre></td></tr></table></figure><h3 id="install-ollama">Install Ollama</h3><p>Extract the downloaded archive to your system directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar -C /usr -xzvf ollama-linux-amd64.tgz<br></code></pre></td></tr></table></figure><h2 id="starting-the-ollama-service">Starting the Ollama Service</h2><p>Launch the Ollama service with this simple command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ollama serve<br></code></pre></td></tr></table></figure><p>Keep this terminal session active to maintain the service.</p><h2 id="verifying-your-installation">Verifying Your Installation</h2><p>Open a new terminal window and verify that Ollama is properlyinstalled and running:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ollama -v<br></code></pre></td></tr></table></figure><p>This command will display the installed version of Ollama, confirmingsuccessful installation.</p><h2 id="finding-the-right-model">Finding the Right Model</h2><p>Ollama supports numerous models with different capabilities andsizes. Browse the <a href="https://ollama.com/search">Ollama ModelLibrary</a> to explore available options.</p><h3 id="downloading-a-model">Downloading a Model</h3><p>For this example, we'll download the gemma3:4b model:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ollama pull gemma3:4b<br></code></pre></td></tr></table></figure><p>The download process may take considerable time depending on yourInternet connection speed and the model size.</p><h3 id="terminal-based-conversation">Terminal-Based Conversation</h3><p>Once your model is downloaded, you can start interacting with itdirectly through the terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ollama run gemma3:4b<br></code></pre></td></tr></table></figure><p>This command launches an interactive chat session with your model.Press <code>Ctrl-D</code> to exit the conversation when finished.</p><h2 id="programmatic-access-via-python-api">Programmatic Access viaPython API</h2><p>Ollama provides an OpenAI-compatible API, making it easy to integratewith existing applications and scripts.</p><p>Install a client library:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> chat-completions-conversation<br></code></pre></td></tr></table></figure><p>Use the client library:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> chat_completions_conversation <span class="hljs-keyword">import</span> ChatCompletionsConversation<br><br>conversation = ChatCompletionsConversation(<br>    api_key=<span class="hljs-string">&#x27;&#x27;</span>,<br>    base_url=<span class="hljs-string">&#x27;http://localhost:11434/v1&#x27;</span>,<br>    model=<span class="hljs-string">&#x27;gemma3:4b&#x27;</span><br>)<br><br>conversation.send_and_receive_response(<span class="hljs-string">&#x27;Hello, how are you?&#x27;</span>)<br><span class="hljs-comment"># Model returns a string</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Science, Multimedia, and Process Automation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>穿搭技巧</title>
    <link href="/2025/09/03/%E7%A9%BF%E6%90%AD%E6%8A%80%E5%B7%A7/"/>
    <url>/2025/09/03/%E7%A9%BF%E6%90%AD%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="/static/videos/怎么穿“显高”！.mp4">怎么穿“显高”！</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Lifestyle</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PyPI Packages</title>
    <link href="/2025/08/31/PyPI-Packages/"/>
    <url>/2025/08/31/PyPI-Packages/</url>
    
    <content type="html"><![CDATA[<pre><code class=" mermaid">graph LR    posix_or_nt --&gt; textcompat    textcompat --&gt; chat_completions_conversation    intersperse --&gt; chat_completions_conversation    canonical_interval --&gt; canonical_range    canonical_range --&gt; determine_slice_assignment_action    canonical_interval --&gt; determine_slice_assignment_action        fixed_width_int --&gt; tuplehash    canonical_range --&gt; cowlist    determine_slice_assignment_action --&gt; cowlist    tuplehash --&gt; cowlist        cowlist --&gt; tree_traversals    rawattr --&gt; less_than_key    cowlist --&gt; prefix_free_sorted_cowlist_set    put_back_iterator --&gt; prefix_free_sorted_cowlist_set    canonical_range --&gt; sorted_fractionally_indexed_cowlist_set    cowlist --&gt; sorted_fractionally_indexed_cowlist_set    generalized_range --&gt; sorted_fractionally_indexed_cowlist_set    posix_or_nt --&gt; read_unicode_environment_variables_dictionary    posix_or_nt --&gt; get_unicode_shell    read_unicode_environment_variables_dictionary --&gt; get_unicode_shell    posix_or_nt --&gt; get_unicode_home    read_unicode_environment_variables_dictionary --&gt; get_unicode_home    posix_or_nt --&gt; find_unicode_executable    read_unicode_environment_variables_dictionary --&gt; find_unicode_executable    find_unicode_executable --&gt; get_unicode_arguments_to_launch_editor    posix_or_nt --&gt; get_unicode_arguments_to_launch_editor    read_unicode_environment_variables_dictionary --&gt; get_unicode_arguments_to_launch_editor    split_command_line --&gt; get_unicode_arguments_to_launch_editor    file_to_unicode_base64_data_uri    send_recv_json    cowlist --&gt; escape_nt_command_line_argument    hwc_chw_ndarray_conversion    escape_nt_command_line_argument --&gt; ctypes_unicode_proclaunch    find_unicode_executable --&gt; ctypes_unicode_proclaunch    posix_or_nt --&gt; ctypes_unicode_proclaunch    read_unicode_environment_variables_dictionary --&gt; ctypes_unicode_proclaunch    send_recv_json --&gt; ctypes_unicode_proclaunch    ctypes_unicode_proclaunch --&gt; get_unicode_multiline_input_with_editor    get_unicode_arguments_to_launch_editor --&gt; get_unicode_multiline_input_with_editor</code></pre>]]></content>
    
    
    <categories>
      
      <category>Reference</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>座右铭</title>
    <link href="/2025/08/31/%E5%BA%A7%E5%8F%B3%E9%93%AD/"/>
    <url>/2025/08/31/%E5%BA%A7%E5%8F%B3%E9%93%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="freedom-perception">Freedom &amp; Perception</h2><blockquote><p>The best slave is the one who thinks he is free.</p></blockquote><blockquote><p>Every accusation is a confession.</p></blockquote><h2 id="change-action">Change &amp; Action</h2><blockquote><p>Philosophers have only interpreted the world, in various ways; thepoint, however, is to change it.</p></blockquote><h2 id="vision-strategy">Vision &amp; Strategy</h2><blockquote><p>左牵黄，右擎苍，锦帽貂裘，千骑卷平冈。</p></blockquote><blockquote><p>不谋万世者，不足谋一时；不谋全局者，不足谋一域。</p></blockquote><blockquote><p>It is hallowed by no traditions; it is hampered by none. Its fingerposts all point forward.</p></blockquote><blockquote><p>剧是必须从序幕开始的，但序幕还不是高潮。</p></blockquote><blockquote><p>一张白纸，没有负担，好写最新最美的文字，好画最新最美的画图。</p></blockquote><blockquote><p>……结合各自具体实际开拓创新，特别是在前沿实践、未知领域，鼓励大胆探索、敢为人先，寻求有效解决新矛盾新问题的思路和办法，努力创造可复制、可推广的新鲜经验。</p></blockquote><h2 id="practical-wisdom-problem-solving">Practical Wisdom &amp; ProblemSolving</h2><blockquote><p>Smart data structures and dumb code works a lot better than the otherway around.</p></blockquote><blockquote><p>Premature optimization is the root of all evil.</p></blockquote><blockquote><p>The biggest lesson that can be read from 70 years of AI research isthat general methods that leverage computation are ultimately the mosteffective, and by a large margin.</p><p>Building in how we think we think does not work in the long run.</p><p>The only thing that matters in the long run is the leveraging ofcomputation.</p><p>AI researchers have often tried to build knowledge into their agents,this always helps in the short term, and is personally satisfying to theresearcher, but in the long run it plateaus and even inhibits furtherprogress, and breakthrough progress eventually arrives by an opposingapproach based on scaling computation by search and learning.</p><p>The eventual success is tinged with bitterness, and oftenincompletely digested, because it is success over a favored,human-centric approach.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linguistics and Literature</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python Coding Guidelines</title>
    <link href="/2025/08/29/Python-Coding-Guidelines/"/>
    <url>/2025/08/29/Python-Coding-Guidelines/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Philosophy:</p><p>We have exceptionally strict coding standards.</p><p>But we explicitly use them in tandem with LLMs.</p><p>No brittle linters. The LLM <em>is</em> the living compliancechecker, code reviewer, and first-pass automator.</p><p>We achieve uncompromising quality control, reliability, andportability - <em>while moving faster than ever before</em>.</p></blockquote><h1 id="guidelines">Guidelines</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-section">## General Principles</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**One file = one module = one purpose**</span>: Each file must be explicitly importable as a module and serve exactly one main purpose.<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Portability to C++**</span>: Code must be directly portable to C++ (avoid dynamic, Python-specific idioms).<br><br><span class="hljs-section">## Compatibility</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Python 2 &amp; 3**</span>: All code must run and be tested under both Python 2 and 3.<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**POSIX &amp; NT**</span>: All code must work on both UNIX-like and Windows systems.<br><br><span class="hljs-section">## File and Folder Structure</span><br><br><span class="hljs-bullet">-</span> Import all files (modules) via absolute import. No relative import, no <span class="hljs-code">`sys.path`</span> manipulation.<br><span class="hljs-bullet">-</span> All files (modules) must only have public functions and classes - no private/internal APIs.<br><span class="hljs-bullet">-</span> All directories must include an explicit <span class="hljs-code">`__init__.py`</span> within them.<br><br><span class="hljs-section">### Utility Code: No &quot;utils.py&quot; - Publish Generalized Tools</span><br><br><span class="hljs-bullet">-</span> No local &quot;utils.py&quot; files: Do not keep grab-bag or miscellaneous utility functions/classes in a project-private <span class="hljs-code">`utils.py`</span> file.<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**General-purpose tools must be published as standalone packages to PyPI**</span>, each focusing on one well-defined function, class, or concept.<br><span class="hljs-bullet">    -</span> Move helpers that would otherwise go into &quot;utils.py&quot; into their own properly documented, versioned packages.<br><span class="hljs-bullet">    -</span> These utility packages should be:<br><span class="hljs-bullet">        -</span> Named after their actual purpose;<br><span class="hljs-bullet">        -</span> Well-tested and actively maintained;<br><span class="hljs-bullet">        -</span> Equipped with a README, proper docstrings, testable usage examples, semantic versioning, and a clear license.<br><span class="hljs-bullet">-</span> All projects share utilities via explicit dependencies rather than duplicating or copying helpers.<br><span class="hljs-bullet">    -</span> When a utility is improved or a bug is fixed, updating the package ensures all dependent projects benefit automatically - &quot;write once, run everywhere.&quot;<br><span class="hljs-bullet">    -</span> This approach avoids hidden technical debt and promotes code quality, documentation, reuse, and maintainability across your entire codebase.<br><span class="hljs-bullet">    -</span> It also contributes to the wider Python ecosystem.<br><br><span class="hljs-section">## Testing &amp; Documentation</span><br><br><span class="hljs-bullet">-</span> Tests must:<br><span class="hljs-bullet">    -</span> Run successfully on both Python 2 and 3, POSIX and NT.<br><span class="hljs-bullet">    -</span> Be suitable for inclusion in <span class="hljs-code">`README.md`</span> under &quot;Usage&quot; or &quot;Quickstart&quot;.<br><span class="hljs-bullet">        -</span> Simultaneously serve as usage documentation (idiomatic examples).<br><span class="hljs-bullet">        -</span> Self-contained and runnable as a script or documentation block.<br><br><span class="hljs-section">## Syntax &amp; Language Features</span><br><br><span class="hljs-section">### Division/Print</span><br><br><span class="hljs-bullet">-</span> Use <span class="hljs-code">`from __future__ import division, print_function`</span> if using <span class="hljs-code">`/`</span> or <span class="hljs-code">`print()`</span><br><br><span class="hljs-section">### String Types</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Always be explicit:**</span><br><span class="hljs-bullet">    -</span> <span class="hljs-code">`b&#x27;&#x27;`</span> = byte string<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`u&#x27;&#x27;`</span> = Unicode string (as <span class="hljs-code">`typing.Text`</span>)<br><span class="hljs-bullet">    -</span> Plain <span class="hljs-code">`str`</span> only for ambiguous APIs (filesystem operations, <span class="hljs-code">`argparse`</span>).<br><br><span class="hljs-section">### String Formatting</span><br><br><span class="hljs-bullet">-</span> Only use the legacy <span class="hljs-code">`%`</span> formatting syntax. No <span class="hljs-code">`.format()`</span> or f-strings.<br><br><span class="hljs-section">### Typing</span><br><br><span class="hljs-bullet">-</span> All APIs fully typed with type <span class="hljs-strong">**comments only**</span> (<span class="hljs-code">`# type: ...`</span>)<br><span class="hljs-bullet">    -</span> No inline type annotations, no <span class="hljs-code">`AnnAssign`</span>.<br><span class="hljs-bullet">-</span> Use only typing features as in Python 3.5 / PEP 484.<br><span class="hljs-bullet">-</span> Absolutely no dependent typing. The return type of a function must not vary with different parameter types and/or values.<br><span class="hljs-bullet">-</span> No use of <span class="hljs-code">`@overload`</span> permitted.<br><br><span class="hljs-section">### Classes</span><br><br><span class="hljs-bullet">-</span> No <span class="hljs-code">`attrs`</span>, <span class="hljs-code">`dataclasses`</span>, or <span class="hljs-code">`namedtuple`</span>.<br><span class="hljs-bullet">-</span> All classes must have:<br><span class="hljs-bullet">    -</span> Declared <span class="hljs-code">`__slots__`</span><br><span class="hljs-bullet">    -</span> Explicit <span class="hljs-code">`object`</span> base class <br><span class="hljs-bullet">    -</span> Use <span class="hljs-code">`six.with_metaclass(meta, *bases)`</span> for metaclasses<br><span class="hljs-bullet">    -</span> Mutable: <span class="hljs-code">`__init__`</span>; Immutable: `<span class="hljs-strong">__new__</span><br><br><span class="hljs-section">### Enums</span><br><br><span class="hljs-bullet">-</span> Only manual/explicit values; do not use <span class="hljs-code">`auto()`</span> even with <span class="hljs-code">`enum34`</span>.<br><br><span class="hljs-section">### Version Checks &amp; Imports</span><br><br><span class="hljs-bullet">-</span> Use only <span class="hljs-code">`sys.version_info`</span> for version-conditional code.<br><span class="hljs-bullet">-</span> No <span class="hljs-code">`except ImportError`</span> or <span class="hljs-code">`sys.version`</span> checks.<br><br><span class="hljs-section">### Restricted Language Features</span><br><br><span class="hljs-bullet">-</span> Never use: <span class="hljs-code">`async`</span>, <span class="hljs-code">`await`</span>, <span class="hljs-code">`yield from`</span>, walrus (<span class="hljs-code">`:=`</span>), structural pattern matching (<span class="hljs-code">`match/case`</span>).<br><br><span class="hljs-section">## Input &amp; Argument Parsing</span><br><br><span class="hljs-section">### Input Handling</span><br><br><span class="hljs-bullet">-</span> For interactive input, always <span class="hljs-code">`import readline`</span>.<br><span class="hljs-bullet">-</span> Use <span class="hljs-code">`open(...)`</span> for binary files; <span class="hljs-code">`codecs.open(...)`</span> for Unicode text files.<br><br><span class="hljs-section">### Regular Expressions</span><br><br><span class="hljs-bullet">-</span> Regular expressions <span class="hljs-strong">**only for simple parsing**</span>.<br><span class="hljs-bullet">-</span> Use <span class="hljs-strong">**Unix-style/basic**</span> regex features:<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`.`</span>: any single character<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`[ ]`</span>: character set/class<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`[^ ]`</span>: negated class<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`^, $`</span>: line start/end<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`( )`</span>: grouping/subexpression<br><span class="hljs-bullet">    -</span> <span class="hljs-code">`*`</span>: zero or more<br><span class="hljs-bullet">-</span> For <span class="hljs-strong">**complicated input**</span>:  <br>  Use a context-free grammar parser (e.g. [<span class="hljs-string">Lark</span>](<span class="hljs-link">https://github.com/lark-parser/lark</span>)), hand-written parser, or an LLM.<br><br><span class="hljs-section">### Argument Parsing</span><br><br><span class="hljs-bullet">-</span> Use <span class="hljs-code">`argparse`</span>.<br><span class="hljs-bullet">-</span> Use ambiguous <span class="hljs-code">`str`</span> for all argument values (default API behavior).<br><span class="hljs-bullet">-</span> All arguments should have a <span class="hljs-code">`help=...`</span> string.<br><br><span class="hljs-section">#### Flag Arguments</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Presence only:**</span> <span class="hljs-code">`action=&#x27;store_true&#x27;`</span> -&gt; <span class="hljs-code">`bool`</span><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Counted:**</span> <span class="hljs-code">`action=&#x27;count&#x27;`</span> -&gt; <span class="hljs-code">`int`</span><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Single value:**</span> <span class="hljs-code">`type=str`</span>, <span class="hljs-code">`required=True/False`</span>, explicit <span class="hljs-code">`default=...`</span><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Multiple occurrences:**</span> <span class="hljs-code">`action=&#x27;append&#x27;`</span> -&gt; <span class="hljs-code">`Optional[List[str]]`</span><br><br><span class="hljs-section">#### Positional Arguments</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**Exactly one:**</span> simple positional<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**0/1 (optional):**</span> <span class="hljs-code">`nargs=&#x27;?&#x27;`</span>, must be last positional argument<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**0 or more/1 or more:**</span> <span class="hljs-code">`nargs=&#x27;*&#x27;`</span>/<span class="hljs-code">`nargs=&#x27;+&#x27;`</span>, with plural argument name and singular <span class="hljs-code">`metavar`</span>, must be last positional argument<br><br><span class="hljs-section">## Python Packaging &amp; Distribution</span><br><br><span class="hljs-section">### File Layout</span><br><br><span class="hljs-bullet">-</span> All files start with a copyright and license block:<br><span class="hljs-bullet">    -</span> Boilerplate: <span class="hljs-code">`# Copyright (c) 2025 Jifeng Wu\n# Licensed under the &lt;license&gt; License. See LICENSE file in the project root for full license information.`</span><br><span class="hljs-bullet">    -</span> simple infrastructure: MIT/BSD<br><span class="hljs-bullet">    -</span> complex infra: Apache-2.0<br><span class="hljs-bullet">    -</span> applications: AGPL-3.0<br><br><span class="hljs-section">### Required Files &amp; Metadata</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-code">`README.md`</span> with standard boilerplate (see below)<br><span class="hljs-bullet">-</span> <span class="hljs-code">`LICENSE`</span><br><span class="hljs-bullet">-</span> <span class="hljs-code">`requirements.txt`</span> (see example)<br><span class="hljs-bullet">-</span> <span class="hljs-code">`pyproject.toml`</span> (see template)<br><span class="hljs-bullet">-</span> <span class="hljs-code">`setup.cfg`</span> (see template)<br><br><span class="hljs-section">### `README.md` Boilerplate</span><br><br><span class="hljs-code">```</span><br><span class="hljs-code">&lt;Project Description&gt;</span><br><span class="hljs-code"></span><br><span class="hljs-code">## Installation</span><br><span class="hljs-code"></span><br><span class="hljs-code">...</span><br><span class="hljs-code"></span><br><span class="hljs-code">## Usage</span><br><span class="hljs-code"></span><br><span class="hljs-code">...</span><br><span class="hljs-code"></span><br><span class="hljs-code">## Contributing</span><br><span class="hljs-code"></span><br><span class="hljs-code">Contributions are welcome! Please submit pull requests or open issues on the GitHub repository.</span><br><span class="hljs-code"></span><br><span class="hljs-code">## License</span><br><span class="hljs-code"></span><br><span class="hljs-code">This project is licensed under the [&lt;license&gt; License](LICENSE).</span><br><span class="hljs-code">```</span><br><br><span class="hljs-section">### Example `requirements.txt`</span><br><br><span class="hljs-code">```</span><br><span class="hljs-code">enum34; python_version &lt; &#x27;3.4&#x27;</span><br><span class="hljs-code">pyreadline</span><br><span class="hljs-code">six</span><br><span class="hljs-code">typing; python_version &lt; &#x27;3.5&#x27;</span><br><span class="hljs-code">```</span><br><br><span class="hljs-section">### `pyproject.toml` Template</span><br><br><span class="hljs-code">```</span><br><span class="hljs-code">[build-system]</span><br><span class="hljs-code">requires = [&quot;setuptools&quot;]</span><br><span class="hljs-code">build-backend = &quot;setuptools.build_meta&quot;</span><br><span class="hljs-code"></span><br><span class="hljs-code">[project]</span><br><span class="hljs-code">name = &quot;&lt;project-name&gt;&quot;</span><br><span class="hljs-code">version = &quot;&lt;version&gt;&quot;</span><br><span class="hljs-code">description = &quot;&lt;Project Description&gt;&quot;</span><br><span class="hljs-code">readme = &quot;README.md&quot;</span><br><span class="hljs-code">requires-python = &quot;&gt;=2&quot;</span><br><span class="hljs-code">license = &quot;&lt;license&gt;&quot;</span><br><span class="hljs-code">authors = [</span><br><span class="hljs-code">  &#123; name=&quot;Jifeng Wu&quot;, email=&quot;jifengwu2k@gmail.com&quot; &#125;</span><br><span class="hljs-code">]</span><br><span class="hljs-code">classifiers = [</span><br><span class="hljs-code">    &quot;Programming Language :: Python :: 2&quot;,</span><br><span class="hljs-code">    &quot;Programming Language :: Python :: 3&quot;,</span><br><span class="hljs-code">    &quot;Operating System :: OS Independent&quot;,</span><br><span class="hljs-code">]</span><br><span class="hljs-code">dependencies = [</span><br><span class="hljs-code">    &quot;&lt;requirements.txt line 1&gt;&quot;,</span><br><span class="hljs-code">    &quot;&lt;requirements.txt line 2&gt;&quot;,</span><br><span class="hljs-code">    &quot;&lt;requirements.txt line 3&gt;&quot;</span><br><span class="hljs-code">]</span><br><span class="hljs-code"></span><br><span class="hljs-code">[project.urls]</span><br><span class="hljs-code">&quot;Homepage&quot; = &quot;https://github.com/jifengwu2k/&lt;project-name&gt;&quot;</span><br><span class="hljs-code">&quot;Bug Tracker&quot; = &quot;https://github.com/jifengwu2k/&lt;project-name&gt;/issues&quot;</span><br><span class="hljs-code">```</span><br><br>Replace <span class="hljs-code">`&lt;project-name&gt;`</span>, <span class="hljs-code">`&lt;version&gt;`</span>, <span class="hljs-code">`&lt;license&gt;`</span>, and requirements as appropriate.<br><br><span class="hljs-section">### `setup.cfg` Template</span><br><br><span class="hljs-code">```</span><br><span class="hljs-code">[bdist_wheel]</span><br><span class="hljs-code">universal = 1</span><br><span class="hljs-code">```</span><br></code></pre></td></tr></table></figure><h1 id="checking">Checking</h1><p>Ensure you meet the following prerequisites:</p><ul><li>Your Python project is a Git repository.</li><li>You have <code>pbpaste</code> properly set up.</li></ul><p>Execute the following to generate an LLM prompt:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">LLM_PROMPT_FILE=<span class="hljs-string">&#x27;llm_prompt.txt&#x27;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is my Python project:&quot;</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LLM_PROMPT_FILE&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LLM_PROMPT_FILE&#125;</span>&quot;</span><br><br>git ls-files --others --exclude-standard --cached | grep -v <span class="hljs-string">&#x27;.gitignore&#x27;</span> | grep -v <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LLM_PROMPT_FILE&#125;</span>&quot;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> file<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\`<span class="hljs-variable">$&#123;file&#125;</span>\`:&quot;</span><br>    <span class="hljs-built_in">echo</span><br>    <span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file&#125;</span>&quot;</span><br>    <span class="hljs-built_in">echo</span><br><span class="hljs-keyword">done</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LLM_PROMPT_FILE&#125;</span>&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Please do a code review and assess whether the code complies with these guidelines:&quot;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LLM_PROMPT_FILE&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LLM_PROMPT_FILE&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Copy some or all of the above guidelines.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pbpaste &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LLM_PROMPT_FILE&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Feed that LLM prompt into your LLM of choice. Then<code>rm $&#123;LLM_PROMPT_FILE&#125;</code>.</p>]]></content>
    
    
    <categories>
      
      <category>Reference</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简易运动</title>
    <link href="/2025/08/29/%E7%AE%80%E6%98%93%E8%BF%90%E5%8A%A8/"/>
    <url>/2025/08/29/%E7%AE%80%E6%98%93%E8%BF%90%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="全身运动">全身运动</h2><ul><li><ahref="https://www.youtube.com/watch?v=QDIx22h2TBc">八段锦</a></li><li><ahref="https://www.youtube.com/watch?v=RAsmxj6W2R0">八部金刚功</a></li></ul><h2 id="面部运动">面部运动</h2><ul><li><a href="/static/videos/瘦鼻训练.mp4">瘦鼻训练</a></li><li><a href="/static/videos/改善双下巴.mp4">改善双下巴</a></li><li><ahref="/static/videos/双下巴不是胖！每天3分钟下颌线越练越清晰！（播音训练）.mp4">双下巴不是胖！每天3分钟下颌线越练越清晰！（播音训练）</a></li></ul><h2 id="臀腿运动">臀腿运动</h2><ul><li><ahref="/static/videos/这种腿型的都去练‼️这个动作很炸裂🔥.mp4">这种腿型的都去练‼️这个动作很炸裂🔥</a></li></ul><h2id="凯格尔运动仅供教育用途请手动替换链接">凯格尔运动（仅供教育用途，请手动替换链接）</h2><h3 id="基础凯格尔运动">基础凯格尔运动</h3><ul><li><code>/view_video.php?viewkey=ph62f3e9b2bc880</code></li><li><code>/view_video.php?viewkey=ph611acfca7e5be</code></li><li><code>/view_video.php?viewkey=ph61ea4e4b90ef0</code></li></ul><h3 id="凯格尔复合运动">凯格尔复合运动</h3><ul><li><code>/view_video.php?viewkey=ph6197d0beeff54&amp;pkey=10810581</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Lifestyle</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Philosophical Idioms</title>
    <link href="/2025/08/27/Philosophical-Idioms/"/>
    <url>/2025/08/27/Philosophical-Idioms/</url>
    
    <content type="html"><![CDATA[<h2 id="cutting-through-the-nonsense">Cutting Through the Nonsense</h2><blockquote><p>“艾玛，这不就是咱们屯子里的那个……吗？”</p></blockquote><ul><li>"Ain't that just that ... from our neck o' the woods?"</li></ul><blockquote><p>"... is by definition ..."</p></blockquote><ul><li>Literal: “……从定义上讲/从本质上说是……</li><li>Idiomatic: “……说白了就是……”</li></ul><blockquote><p>"That's a feature, not a bug."</p></blockquote><ul><li>Literal: “那是功能，不是缺陷。”</li><li>Idiomatic: “这是设计好的，不是整劈叉了。”</li></ul><h2 id="your-situation-shapes-your-views">Your Situation Shapes YourViews</h2><blockquote><p>“屁股决定脑袋。”</p></blockquote><ul><li>Literal: "Your ass determines your head."</li><li>Idiomatic: "Where you stand depends on where you sit." (A classicU.S. political saying with the same idea.)</li></ul><h2 id="pragmatism-and-results-driven-thinking">Pragmatism andResults-Driven Thinking</h2><blockquote><p>“实践是检验真理的唯一标准。”</p></blockquote><ul><li>Literal: "Practice is the sole criterion for testing truth."</li><li>Idiomatic: "Actions are the ultimate test of truth."</li></ul><blockquote><p>“不管黑猫白猫，能捉到老鼠就是好猫。”</p></blockquote><ul><li>Literal: "No matter whether it's a black cat or a white cat, as longas it catches mice, it's a good cat."</li><li>Idiomatic: "If it gets the job done, it's good enough."</li></ul><h2 id="knowing-who-you-are-doing-your-own-thing">Knowing Who You Are&amp; Doing Your Own Thing</h2><blockquote><p>“认清自己几斤几两。” “撒泡尿照照自己。”</p></blockquote><ul><li>Literal: "Recognize how many pounds and ounces you weigh." / "Take apiss and look at yourself in it."</li><li>Idiomatic: "Who do you think you are?"</li></ul><blockquote><p>“你们没有资格说，你们从实力地位出发同……谈话。”</p></blockquote><ul><li>"You do not have the qualification to say that you want to speak to... from a position of strength."</li></ul><blockquote><p>“我蛮夷也，不与中国之号谥。”</p></blockquote><ul><li>Literal: "I'm a barbarian; I do not accept the designations of theCentral Kingdom."</li><li>Idiomatic: "I'm a barbarian. I don't play by your rules."</li></ul><blockquote><p>“入关之后自有大儒为我辩经。”</p></blockquote><ul><li>Literal: "After entering the pass, there will naturally be greatscholars to argue scriptures on my behalf."</li><li>Idiomatic: "Let the philosophers debate after I've made mymove."</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linguistics and Literature</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Manipulating PDFs from the Unix Command Line</title>
    <link href="/2025/08/27/Manipulating-PDFs-from-the-Unix-Command-Line/"/>
    <url>/2025/08/27/Manipulating-PDFs-from-the-Unix-Command-Line/</url>
    
    <content type="html"><![CDATA[<p>The <a href="https://poppler.freedesktop.org/">Poppler utilities</a>provide many Unix command-line tools for manipulating PDFs. Installvia:</p><ul><li><code>sudo apt-get install poppler-utils</code> (Ubuntu)</li><li><code>sudo apk add poppler-utils</code> (Alpine)</li><li><code>brew install poppler</code> (macOS)</li></ul><h2 id="extract-text-from-a-pdf">Extract Text from a PDF</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pdftotext input.pdf output.txt<br></code></pre></td></tr></table></figure><h2 id="merge-pdfs-together">Merge PDFs Together</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pdfunite file1.pdf file2.pdf merged.pdf<br></code></pre></td></tr></table></figure><h2 id="split-extract-pages-from-a-pdf">Split (Extract) Pages from aPDF</h2><p>This will split each page of <code>input.pdf</code> to<code>output_1.pdf</code>, <code>output_2.pdf</code>, etc.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pdfseparate input.pdf output_%d.pdf<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Science, Multimedia, and Process Automation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Compiling C++ Code in a Conda Environment Using Conda-managed Headers and Libraries</title>
    <link href="/2025/08/24/Compiling-C-Code-in-a-Conda-Environment-Using-Conda-managed-Headers-and-Libraries/"/>
    <url>/2025/08/24/Compiling-C-Code-in-a-Conda-Environment-Using-Conda-managed-Headers-and-Libraries/</url>
    
    <content type="html"><![CDATA[<h2 id="prerequisites">Prerequisites</h2><h3 id="common-build-variables">Common Build Variables</h3><h4 id="directly-used-by-gccclang">Directly Used by<code>gcc</code>/<code>clang</code></h4><p>These environment variables are <strong>automatically used by<code>gcc</code>/<code>clang</code> themselves</strong>.</p><ul><li><code>CPATH</code><ul><li>Colon-separated list of directories to search for headers beforebuilt-in include paths.</li><li>Like passing multiple <code>-I</code> options.</li></ul></li><li><code>LIBRARY_PATH</code><ul><li>Colon-separated list of directories to search for libraries(<code>.so</code>/<code>.a</code>) at <strong>link time</strong>.</li><li>Like passing multiple <code>-L</code> options.</li><li><strong>Doesn't affect how the executable finds shared librarieswhen running.</strong></li></ul></li></ul><h4 id="for-build-systems-make-cmake-etc.">For Build Systems(<code>make</code>, <code>cmake</code>, etc.)</h4><p>These environment variables are not used by compilers<strong>unless</strong> your build tool (<code>make</code>,<code>cmake</code>, etc.) or script expands them.</p><ul><li><code>CC</code> / <code>CXX</code>:<ul><li>Which C/C++ compiler to use.</li></ul></li><li><code>CFLAGS</code> / <code>CXXFLAGS</code>:<ul><li>Extra flags for compiling C or C++ respectively, e.g.,<code>-O2 -g -Wall</code>.</li></ul></li><li><code>LDFLAGS</code>:<ul><li>Extra flags when linking, such as <code>-L/path/to/lib</code>,<code>-lfoo</code>, <code>-Wl,-rpath,/my/libs</code>.</li></ul></li></ul><blockquote><p>🚫 <strong>Never stuff include/library/link flags inside<code>$CXX</code> or <code>$CC</code>. Always set them as separatevariables, or pass them directly on the command line to thecompiler.</strong></p></blockquote><h3 id="c-libraries-in-conda-environments">C++ Libraries in CondaEnvironments</h3><p>When you install a C++ library from <code>conda-forge</code>, it'splaced inside your current environment, not in a system-widedirectory.</p><ul><li>Headers: <code>$CONDA_PREFIX/include</code></li><li>Libraries: <code>$CONDA_PREFIX/lib</code></li></ul><blockquote><p>Exception: The <strong>C runtime</strong> (<code>libc.so</code>,<code>libm.so</code>, etc.) always comes from the system, not Conda.</p></blockquote><h2 id="example">Example</h2><h3 id="create-a-conda-environment-for-c-compilation">Create a CondaEnvironment for C++ Compilation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n clangxx-env -y<br>conda activate clangxx-env<br>conda install -c conda-forge clang clangxx libcxx libcxxabi libcxx-devel -y<br></code></pre></td></tr></table></figure><ul><li><code>libcxx</code>, <code>libcxxabi</code>,<code>libcxx-devel</code>: LLVM's C++ standard library and headers.</li></ul><h3 id="tell-the-compiler-where-to-look-for-headers-and-libraries">Tellthe Compiler Where to Look for Headers and Libraries</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CPATH=<span class="hljs-string">&quot;<span class="hljs-variable">$CONDA_PREFIX</span>/include&quot;</span><br><span class="hljs-built_in">export</span> LIBRARY_PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$CONDA_PREFIX</span>/lib&quot;</span><br></code></pre></td></tr></table></figure><p>This automatically adds Conda's include and lib directories to<code>clang</code>'s search paths.</p><h3 id="set-common-build-variables-for-build-systems">Set Common BuildVariables for Build Systems</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CC=<span class="hljs-string">&quot;clang&quot;</span><br><span class="hljs-built_in">export</span> CXX=<span class="hljs-string">&quot;clang++ -stdlib=libc++&quot;</span><br><span class="hljs-built_in">export</span> LDFLAGS=<span class="hljs-string">&quot;-Wl,-rpath,<span class="hljs-variable">$LIBRARY_PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>LDFLAGS</code> sets an <code>rpath</code> such that thegenerated executable or shared library will hard-code<code>LIBRARY_PATH</code> as a shared library search path.</li></ul><h3 id="compile-a-program">Compile a Program</h3><p>Let's say you have <code>hello_world.cpp</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$CXX</span> hello_world.cpp -o hello_world <span class="hljs-variable">$LDFLAGS</span><br></code></pre></td></tr></table></figure><h3 id="check-your-binary">Check Your Binary</h3><p>You can check what dynamic libraries your binary depends on using<code>ldd hello_world</code>:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ ldd hello_world<br>    linux-vdso.so.<span class="hljs-number">1</span> (<span class="hljs-number">0</span>x00007ffd05ead000)<br>    libc++.so.<span class="hljs-number">1</span> =&gt; <span class="hljs-regexp">/home/y</span>ouruser<span class="hljs-regexp">/miniconda3/</span>envs<span class="hljs-regexp">/clangxx-env/</span>lib/libc++.so.<span class="hljs-number">1</span> (<span class="hljs-number">0</span>x000071f5b0e86000)<br>    libc++abi.so.<span class="hljs-number">1</span> =&gt; <span class="hljs-regexp">/home/y</span>ouruser<span class="hljs-regexp">/miniconda3/</span>envs<span class="hljs-regexp">/clangxx-env/</span>lib/libc++abi.so.<span class="hljs-number">1</span> (<span class="hljs-number">0</span>x000071f5b0e48000)<br>    libm.so.<span class="hljs-number">6</span> =&gt; <span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libm.so.<span class="hljs-number">6</span> (<span class="hljs-number">0</span>x000071f5b0d44000)<br>    libc.so.<span class="hljs-number">6</span> =&gt; <span class="hljs-regexp">/lib/</span>x86_64-linux-gnu/libc.so.<span class="hljs-number">6</span> (<span class="hljs-number">0</span>x000071f5b0a00000)<br>    ...<br></code></pre></td></tr></table></figure><p><strong>Good sign:</strong> For anything above <code>libc</code>, itshould point inside your Conda environment (e.g.,<code>libc++.so.1</code>), not the system.</p>]]></content>
    
    
    <categories>
      
      <category>Environments</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Manipulating Videos Using `ffmpeg`</title>
    <link href="/2025/08/23/Manipulating-Videos-Using-ffmpeg/"/>
    <url>/2025/08/23/Manipulating-Videos-Using-ffmpeg/</url>
    
    <content type="html"><![CDATA[<h2 id="extract-a-portion-of-the-video">Extract a Portion of theVideo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -ss <span class="hljs-string">&quot;<span class="hljs-variable">$start_time_in_seconds</span>&quot;</span> -i <span class="hljs-string">&quot;<span class="hljs-variable">$input</span>&quot;</span> -to <span class="hljs-string">&quot;<span class="hljs-variable">$end_time_in_seconds</span>&quot;</span> -c copy <span class="hljs-string">&quot;<span class="hljs-variable">$output</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="reduce-a-videos-resolution-by-half">Reduce a Video's Resolutionby Half</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffmpeg -i <span class="hljs-string">&quot;<span class="hljs-variable">$input</span>&quot;</span> -vf <span class="hljs-string">&quot;scale=iw/2:ih/2&quot;</span> -c:a copy <span class="hljs-string">&quot;<span class="hljs-variable">$output</span>&quot;</span><br></code></pre></td></tr></table></figure><ul><li>Use the <code>scale</code> filter with expressions to halve thewidth and height:<ul><li><code>iw</code> = input width, <code>ih</code> = input height.</li></ul></li><li><code>-c:a copy</code> copies the audio stream withoutre-encoding.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Data Science, Multimedia, and Process Automation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简易食谱</title>
    <link href="/2025/08/22/%E7%AE%80%E6%98%93%E9%A3%9F%E8%B0%B1/"/>
    <url>/2025/08/22/%E7%AE%80%E6%98%93%E9%A3%9F%E8%B0%B1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>切忌用电饭煲在没有饭的情况下焖菜或炖菜，电饭煲盖会有大量难以清洗的残留物。</p><p>禁止像用水炖菜一样用牛奶炖菜，会导致牛奶中的蛋白凝结，显得比较恶心。</p></blockquote><h2 id="轻食">轻食</h2><ul><li><a href="/static/images/玉米鸡蛋火龙果.jpg">玉米鸡蛋火龙果</a></li><li><ahref="/static/videos/微波炉土豆鸡蛋西兰花圣女果虾仁沙拉.mp4">微波炉土豆鸡蛋西兰花圣女果虾仁沙拉</a></li></ul><h2 id="饮料">饮料</h2><ul><li><a href="/static/videos/微波炉焦糖奶茶.mp4">微波炉焦糖奶茶</a></li><li>🇨🇺 Cuba libre (<code>kuβa ˈliβɾe</code>)<ul><li>120 ml cola</li><li>50 ml white rum</li><li>10 ml Fresh lime juice</li></ul></li><li>🇨🇺 Mojito (<code>moˈxito</code>)<ul><li>45 ml white rum</li><li>20 ml fresh lime juice</li><li>6 sprigs of mint</li><li>2 teaspoons white cane sugar (or 20 ml of sugar syrup)</li><li>Soda water</li></ul></li><li>🇵🇷 Piña colada (<code>ˈpiɲa koˈlaða</code>)<ul><li>50 ml white rum</li><li>30 ml coconut cream</li><li>50 ml fresh pineapple juice</li></ul></li></ul><h2 id="主食">主食</h2><h3 id="杂粮">杂粮</h3><ul><li><a href="/static/videos/微波炉土豆泥.mp4">微波炉土豆泥</a></li><li><ahref="/static/videos/微波炉南瓜、红薯、玉米、土豆、山药.mp4">微波炉南瓜、红薯、玉米、土豆、山药</a></li><li><a href="/static/videos/微波炉蒸蜜薯.mp4">微波炉蒸蜜薯</a></li><li><ahref="/static/videos/微波炉酸辣土豆丝.mp4">微波炉酸辣土豆丝</a></li></ul><h3 id="粥品">粥品</h3><ul><li><a href="/static/videos/皮蛋瘦肉粥.mp4">皮蛋瘦肉粥</a></li></ul><h3 id="面点">面点</h3><ul><li><ahref="/static/videos/绞肉机和面蒸馒头.mp4">绞肉机和面蒸馒头</a></li><li><a href="/static/videos/电饭煲恰巴塔.mp4">电饭煲恰巴塔</a></li><li><a href="/static/videos/电饭煲馅饼.mp4">电饭煲馅饼</a></li><li><a href="/static/videos/肉馅饼.mp4">肉馅饼</a></li></ul><h2 id="素菜">素菜</h2><h3 id="绿叶蔬菜">绿叶蔬菜</h3><ul><li><ahref="/static/videos/微波炉蒜蓉空心菜.mp4">微波炉蒜蓉空心菜</a></li><li><ahref="/static/videos/微波炉火腿肠娃娃菜.mp4">微波炉火腿肠娃娃菜</a></li><li><a href="/static/videos/微波炉手撕包菜.mp4">微波炉手撕包菜</a></li></ul><h3 id="其他蔬菜">其他蔬菜</h3><ul><li><a href="/static/videos/微波炉花菜.mp4">微波炉花菜</a></li><li><ahref="/static/videos/微波炉青椒擂皮蛋.mp4">微波炉青椒擂皮蛋</a></li><li><ahref="/static/videos/微波炉香菇烧青椒.mp4">微波炉香菇烧青椒</a></li></ul><h3 id="混合蔬菜">混合蔬菜</h3><ul><li><ahref="/static/videos/微波炉茄辣西（1）.mp4">微波炉茄辣西（1）</a></li><li><ahref="/static/videos/微波炉茄辣西（2）.mp4">微波炉茄辣西（2）</a></li><li><ahref="/static/videos/电饭煲地三鲜（1）.mp4">电饭煲地三鲜（1）</a></li><li><ahref="/static/videos/电饭煲地三鲜（2）.mp4">电饭煲地三鲜（2）</a></li><li><ahref="/static/videos/电饭煲炖土豆、胡萝卜、洋葱、玉米、香菇、青红椒.mp4">电饭煲炖土豆、胡萝卜、洋葱、玉米、香菇、青红椒</a></li><li><ahref="/static/videos/微波炉懒人地三鲜.mp4">微波炉懒人地三鲜</a></li></ul><h2 id="荤菜">荤菜</h2><h3 id="肉类">肉类</h3><ul><li><a href="/static/videos/微波炉盐焗鸡.mp4">微波炉盐焗鸡</a></li><li><a href="/static/videos/微波炉黄焖鸡.mp4">微波炉黄焖鸡</a></li><li><a href="/static/videos/电饭煲黄焖鸡.mp4">电饭煲黄焖鸡</a></li><li><ahref="/static/videos/电饭煲水蒸蛋、丝瓜蒸鸡腿.mp4">电饭煲水蒸蛋、丝瓜蒸鸡腿</a></li><li><a href="/static/videos/电饭煲蜜汁叉烧.mp4">电饭煲蜜汁叉烧</a></li><li><ahref="/static/videos/微波炉鸡蛋肉饼汤.mp4">微波炉鸡蛋肉饼汤</a></li><li><ahref="/static/videos/电饭煲土豆番茄焖牛肉.mp4">电饭煲土豆番茄焖牛肉</a></li><li><ahref="/static/videos/电饭煲番茄炖牛腩.mp4">电饭煲番茄炖牛腩</a></li><li><a href="/static/videos/菠萝牛肉粒.mp4">菠萝牛肉粒</a></li><li><a href="/static/videos/电饭煲蚂蚁上树.mp4">电饭煲蚂蚁上树</a></li><li><ahref="/static/videos/电饭煲西红柿炖牛腩.mp4">电饭煲西红柿炖牛腩</a></li><li><a href="/static/videos/微波炉红烧鸡腿.mp4">微波炉红烧鸡腿</a></li><li><a href="/static/videos/微波炉鸡块.mp4">微波炉鸡块</a></li><li><a href="/static/videos/微波炉洋葱牛肉.mp4">微波炉洋葱牛肉</a></li></ul><h3 id="海鲜类">海鲜类</h3><ul><li><a href="/static/videos/微波炉清蒸鱼.mp4">微波炉清蒸鱼</a></li><li><a href="/static/videos/微波炉白灼虾.mp4">微波炉白灼虾</a></li><li><a href="/static/videos/电饭煲肉蟹煲.mp4">电饭煲肉蟹煲</a></li><li><ahref="/static/videos/微波炉鱼片、金针菇.mp4">微波炉鱼片、金针菇</a></li></ul><h2 id="饭菜一锅出">饭菜一锅出</h2><h3 id="米饭类">米饭类</h3><ul><li><ahref="/static/videos/电饭煲一颗番茄焖饭.mp4">电饭煲一颗番茄焖饭</a></li><li><ahref="/static/videos/电饭煲土豆胡萝卜洋葱玉米香菇青椒鸡腿焖饭.mp4">电饭煲土豆胡萝卜洋葱玉米香菇青椒鸡腿焖饭</a></li><li><a href="/static/videos/电饭煲火锅焖饭.mp4">电饭煲火锅焖饭</a></li><li><ahref="/static/videos/电饭煲豆角土豆焖饭.mp4">电饭煲豆角土豆焖饭</a></li><li><a href="/static/videos/电饭煲豆角焖饭.mp4">电饭煲豆角焖饭</a></li><li><a href="/static/videos/电饭煲煲仔饭.mp4">电饭煲煲仔饭</a></li><li><ahref="/static/videos/电饭煲土豆、茄子、番茄、豆角焖饭.mp4">电饭煲土豆、茄子、番茄、豆角焖饭</a></li><li><a href="/static/videos/番茄鸡蛋火腿饭.mp4">番茄鸡蛋火腿饭</a></li><li><ahref="/static/videos/番茄、鸡蛋、火腿、熟米.mp4">番茄、鸡蛋、火腿、熟米</a></li></ul><h3 id="面条类">面条类</h3><ul><li><ahref="/static/videos/微波炉豆角五花肉焖面.mp4">微波炉豆角五花肉焖面</a></li><li><a href="/static/videos/电饭煲豆角焖面.mp4">电饭煲豆角焖面</a></li></ul><h3 id="其他面食类">其他面食类</h3><ul><li><ahref="/static/videos/电饭煲洋葱、蘑菇、香肠、番茄、虾仁、芝士意大利面.mp4">电饭煲洋葱、蘑菇、香肠、番茄、虾仁、芝士意大利面</a></li><li><ahref="/static/videos/电饭煲西红柿土豆泥火鸡面.mp4">电饭煲西红柿土豆泥火鸡面</a></li></ul><h2 id="食材准备">食材准备</h2><ul><li><ahref="/static/videos/微波炉豆豉、蒜末、小米辣酱.mp4">微波炉豆豉、蒜末、小米辣酱</a></li><li><a href="/static/videos/微波炉葱油.mp4">微波炉葱油</a></li><li><a href="/static/videos/微波炉熬猪油.mp4">微波炉熬猪油</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Lifestyle</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>High-Frequency Git Operations for Everyday Development</title>
    <link href="/2025/08/21/High-Frequency-Git-Operations-for-Everyday-Development/"/>
    <url>/2025/08/21/High-Frequency-Git-Operations-for-Everyday-Development/</url>
    
    <content type="html"><![CDATA[<p>Whether you're joining a new project, dealing with ignored files, orwanting to clean up your commit history, you'll often need to execute aset of Git commands. Here are some of the most frequent Git operationsyou may need in day-to-day development.</p><h2 id="connect-your-local-folder-to-a-github-repository">Connect YourLocal Folder to a GitHub Repository</h2><h3 id="scenario">Scenario</h3><p>You have an existing local folder with files and want to connect itto an already existing GitHub repository.</p><h3 id="steps">Steps</h3><p>Initialize Git in your folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><p>Add your GitHub repository (replace URL with your repo):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://github.com/username/repo.git<br></code></pre></td></tr></table></figure><p>Fetch remote history:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br></code></pre></td></tr></table></figure><p>Merge remote and local files, allowing unrelated histories<em>(change <code>main</code> to your repo's default branch ifnecessary)</em>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main --allow-unrelated-histories<br></code></pre></td></tr></table></figure><p>If you see an error like:</p><blockquote><p>The following untracked working tree files would be overwritten bymerge...</p></blockquote><p>We recommend:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. Move local conflicting files to a temporary directory</span><br><span class="hljs-comment"># For example, back them up to a non-conflicting `backup` folder in the current directory</span><br><span class="hljs-built_in">mkdir</span> backup<br><span class="hljs-built_in">mv</span> conflicting-file-1 conflicting-file-2 backup/<br><br><span class="hljs-comment"># 2. Try pulling the remote repository content again</span><br>git pull origin main --allow-unrelated-histories<br><br><span class="hljs-comment"># 3. Manually merge the backed up files into the pulled files</span><br></code></pre></td></tr></table></figure><p>Commit after resolving all conflicts:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;Merge local files with remote repository&quot;</span><br></code></pre></td></tr></table></figure><p>Push to the remote repository (if needed):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --set-upstream origin main<br></code></pre></td></tr></table></figure><p><strong>The <code>--set-upstream origin main</code> option is onlyneeded for the first push; you don't need it afterward.</strong></p><h2 id="list-what-files-git-add-.-would-stage">List What Files<code>git add .</code> Would Stage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status --short<br></code></pre></td></tr></table></figure><p>Example Output:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">M file1.txt       <span class="hljs-meta"># modified file</span><br>?? <span class="hljs-keyword">new</span><span class="hljs-type">file</span>.txt     <span class="hljs-meta"># untracked file</span><br></code></pre></td></tr></table></figure><p>Breakdown:</p><ul><li><code>M</code> = Modified (but not staged)</li><li><code>??</code> = Untracked (new files)</li></ul><h2 id="remove-previously-committed-files-now-in-.gitignore">RemovePreviously Committed Files Now in <code>.gitignore</code></h2><h3 id="scenario-1">Scenario</h3><p>You added rules to <code>.gitignore</code> but some files werealready committed.</p><h3 id="steps-1">Steps</h3><p>Stage removal of all currently tracked files (but not deletelocally):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> -r --cached .<br></code></pre></td></tr></table></figure><p>Add everything back to the repo ("add" skips <code>gitignore</code>dfiles):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><p>Commit the change:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Remove ignored files from the repository&quot;</span><br></code></pre></td></tr></table></figure><p>At this point, the files are only removed from the repository<strong>from this commit onward (they'll still exist in oldercommits/history)</strong>. If you want them <strong>removed fromprevious commits as well</strong>, consider <strong>squashing multiplecommits into a single commit</strong>, as explained below.</p><h2 id="squash-multiple-commits-into-a-single-commit">Squash MultipleCommits into a Single Commit</h2><h3 id="scenario-2">Scenario</h3><p>You have made several small commits <em>(some of which may be faultyor embarassing)</em> and want to clean up history by squashing them intoone.</p><h3 id="steps-2">Steps</h3><p>Review commit history:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>Decide how many previous commits you want to squash.</p><p>Start an interactive rebase, e.g. with the last 3 commits:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~3<br></code></pre></td></tr></table></figure><p>In the opened editor:</p><ul><li>Leave <code>pick</code> for the first commit.</li><li>For the others, change <code>pick</code> to <code>squash</code> (orjust <code>s</code>).</li><li>Save and close.</li></ul><p>You will then enter a second editor session. Edit the combined commitmessage. Save and close.</p><p>Force-push the branch to rewrite history on GitHub:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --force<br></code></pre></td></tr></table></figure><h3 id="note">Note</h3><ul><li>Use squashing carefully if collaborating, as force push overwriteshistory.</li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Eating in the Americas - Down-to-earth Foodstuffs</title>
    <link href="/2025/08/21/Eating-in-the-Americas-Down-to-earth-Foodstuffs/"/>
    <url>/2025/08/21/Eating-in-the-Americas-Down-to-earth-Foodstuffs/</url>
    
    <content type="html"><![CDATA[<p>吃在美洲——接地气儿的食材</p><p>Eating in the Americas - Down-to-earth Foodstuffs</p><p>这些植物和动物<strong>在美洲有原生族群</strong>：</p><p>These plants and animals have <strong>populations native to theAmericas</strong>:</p><h2 id="植物-plants">植物 Plants</h2><ul><li>天门冬目 Asparagales<ul><li>天门冬科 Asparagaceae<ul><li><strong>龙舌兰属 Agave</strong></li></ul></li><li>兰科 Orchidaceae<ul><li><strong>香荚兰属 Vanilla (香草)</strong></li></ul></li></ul></li><li>菊目 Asterales<ul><li>菊科 Asteraceae<ul><li>向日葵属 Helianthus<ul><li><strong>向日葵 H. annuus (Sunflower)</strong></li></ul></li><li><strong>松果菊属 Echinacea (紫锥花 / 紫锥菊;Echinacea)</strong></li></ul></li></ul></li><li>十字花目 Brassicales<ul><li>番木瓜科 Caricaceae<ul><li>番木瓜属 Carica<ul><li><strong>番木瓜 C. papaya (Papaya)</strong></li></ul></li></ul></li></ul></li><li>石竹目 Caryophyllales<ul><li><strong>苋科 Amaranthaceae (苋菜 / 藜麦; Amaranth /Quinoa)</strong></li><li><strong>仙人掌科 Cactaceae (仙人掌 / 火龙果 / 梨果仙人掌; Cactus /Pitaya / Strawberry Pear / Dragon Fruit / Prickly Pear)</strong></li></ul></li><li>葫芦目 Cucurbitales<ul><li>葫芦科 Cucurbitaceae<ul><li><strong>南瓜属 Cucurbita (南瓜 / 西葫芦; Squash / Pumpkin /Zucchini)</strong></li><li>葫芦属 Lagenaria<ul><li><strong>葫芦 L. siceraria (Gourd)</strong></li></ul></li></ul></li></ul></li><li>杜鹃花目 Ericales<ul><li>柿树科 Ebenaceae<ul><li><strong>柿属 Diospyros (柿子 / 君迁子; Persimmon /Date-plum)</strong></li></ul></li><li>杜鹃花科 Ericaceae<ul><li><strong>越橘屬 Vaccinium (蓝莓 / 笃斯越橘 / 蔓越莓; Blueberry /Cranberry)</strong></li></ul></li></ul></li><li>豆目 Fabales<ul><li>豆科 Fabaceae<ul><li>落花生属 Arachis<ul><li><strong>花生 A. hypogaea (Peanut)</strong></li></ul></li><li>豆薯属 Pachyrhizus<ul><li><strong>凉薯 P. erosus (Jícama)</strong></li></ul></li><li>菜豆属 Phaseolus<ul><li><strong>菜豆 P. vulgaris (芸豆 / 架豆 / 刀豆 / 肾豆 / 四季豆 / 豆角;Bean)</strong></li></ul></li></ul></li></ul></li><li>壳斗目 Fagales<ul><li>桦木科 Betulaceae<ul><li><strong>榛属 Corylus (Hazelnut)</strong></li></ul></li><li>壳斗科 Fagaceae<ul><li><strong>栗属 Castanea (Chestnut)</strong></li></ul></li></ul></li><li>胡桃目 Juglandales<ul><li>胡桃科 Juglandaceae<ul><li>山核桃属 Carya<ul><li><strong>长山核桃 C. illinoinensis (碧根果 / 胡桃;Pecan)</strong></li></ul></li><li><strong>胡桃属 Juglans (核桃; Walnut)</strong></li></ul></li></ul></li><li>唇形目 Lamiales<ul><li>唇形科 Lamiaceae<ul><li><strong>鼠尾草属 Salvia (Chia / Sage; 奇亚籽)</strong></li></ul></li></ul></li><li>樟目 Laurales<ul><li>樟科 Lauraceae<ul><li>鳄梨属 Persea<ul><li><strong>鳄梨 P. americana (牛油果; Avocado)</strong></li></ul></li></ul></li></ul></li><li>金虎尾目 Malpighiales<ul><li>大戟科 Euphorbiaceae<ul><li>木薯属 Manihot<ul><li><strong>木薯 M. esculenta (Cassava / Tapioca)</strong></li></ul></li></ul></li><li>西番莲科 Passifloraceae<ul><li>西番莲属 Passiflora<ul><li><strong>西番莲 P. edulis (百香果 / 鸡蛋果; PassionFruit)</strong></li></ul></li></ul></li></ul></li><li>锦葵目 Malvales<ul><li>锦葵科 Malvaceae<ul><li><strong>棉花属 Gossypium (Cotton)</strong></li><li>可可属 Theobroma<ul><li><strong>可可 T. cacao (Cacao / Cocoa)</strong></li></ul></li></ul></li></ul></li><li>桃金娘目 Myrtales<ul><li>桃金娘科 Myrtaceae<ul><li>番石榴属 Psidium<ul><li><strong>番石榴 P. guajava (Guava)</strong></li></ul></li></ul></li></ul></li><li>禾本目 Poales<ul><li><strong>竹亚科 Bambusoideae (Bamboo / Giant Cane / RiverCane)</strong></li><li>凤梨科 Bromeliaceae<ul><li>凤梨属 Ananas<ul><li><strong>凤梨 A. comosus (菠萝; Ananas / Pineapple)</strong></li></ul></li></ul></li><li>禾本科 Poaceae<ul><li><strong>稻属 Oryza (大米; Rice)</strong></li><li><strong>稷属 Panicum (黍 / 粟 / 糜子 / 黍稷 / 糜黍 / 稷 / 黄米 /稷米 / 粢米; Millet / Panicgrass)</strong></li><li>玉米属 Zea<ul><li><strong>玉米/玉蜀黍 Z. mays (Maize / Corn)</strong></li></ul></li><li>菰属 Zizania<ul><li><strong>菰 Z. latifolia (菰米 / 茭白; Wild Rice)</strong></li></ul></li></ul></li></ul></li><li>山龙眼目 Proteales<ul><li>莲科 Nelumbonaceae<ul><li><strong>莲属 Nelumbo (Lotus)</strong></li></ul></li></ul></li><li>蔷薇目 Rosales<ul><li>桑科 Moraceae<ul><li><strong>桑属 Morus (Mulberry)</strong></li></ul></li><li>蔷薇科 Rosaceae<ul><li><strong>山楂属 Crataegus (Hawthorn / Mayhaw /May-tree)</strong></li><li><strong>草莓属 Fragaria (Strawberry)</strong></li><li><strong>李属 Prunus (Plum / Plune)</strong></li><li><strong>悬钩子属 Rubus (树莓 / 覆盆子 / 黑莓; Raspberry /Blackberry)</strong></li></ul></li></ul></li><li>无患子目 Sapindales<ul><li>漆树科 Anacardiaceae<ul><li><strong>腰果属 Anacardium (Cashew)</strong></li></ul></li><li>芸香科 Rutaceae<ul><li><strong>花椒属 Zanthoxylum (Prickly Ash)</strong></li></ul></li><li>无患子科 Sapindaceae<ul><li><strong>枫属 Acer (枫树 / 槭树; Maple)</strong></li></ul></li></ul></li><li>茄目 Solanales<ul><li>旋花科 Convolvulaceae<ul><li>番薯属 Ipomoea<ul><li><strong>番薯 I. batatas (红薯 / 紫薯 / 白薯; SweetPotato)</strong></li></ul></li><li>烟草属 Nicotiana<ul><li><strong>烟草 N. tabacum (Tobacco)</strong></li></ul></li><li>茄科 Solanaceae<ul><li>茄属 Solanum<ul><li><strong>马铃薯 S. tuberosum (Potato)</strong></li><li><strong>番茄 S. lycopersicum (Tomato)</strong></li></ul></li><li><strong>辣椒属 Capsicum (甜椒 / 辣椒; Bell Pepper / ChiliPepper)</strong></li><li>灯笼果属 Physalis<ul><li><strong>灯笼果 P. peruviana (姑娘果; Cape gooseberry / Goldenberry /Groundcherry)</strong></li></ul></li></ul></li></ul></li></ul></li><li>葡萄目 Vitales<ul><li>葡萄科 Vitaceae<ul><li><strong>葡萄属 Vitis (Grape)</strong></li></ul></li></ul></li></ul><h2 id="动物-animals">动物 Animals</h2><ul><li>日鲈目 Centrarchiformes<ul><li><strong>太阳鱼科 Centrarchidae (中国市面上常见的“鲈鱼”实为该科的Micropterus 黑鲈属; Bass)</strong></li></ul></li><li>鲈形目 Perciformes<ul><li>鲈科 Percidae<ul><li><strong>鲈属 Perca (Perch)</strong></li></ul></li></ul></li><li>鲑形目 Salmoniformes<ul><li>鲑科 Salmonidae<ul><li><strong>麻哈鱼属 Oncorhynchus (大麻哈鱼 / 虹鳟; Chinook Salmon /Chum Salmon / Coho Salmon / Dog Salmon / Pacific Salmon / Pink Salmon /Sockeye Salmon / Rainbow Trout)</strong></li></ul></li></ul></li><li><strong>鲶形目 Siluriformes (鲶鱼 / 塘虱 / 巴沙鱼; Catfish / Basa /Pangasius)</strong></li><li>雁形目 Anseriformes<ul><li><strong>鸭科 Anatidae (鸭 / 鸳鸯 / 凫 / 雁 / 鹅 / 天鹅; Duck / Goose/ Swan)</strong></li></ul></li><li>鸡形目 Galliformes<ul><li>雉科 Phasianidae<ul><li><strong>火鸡属 Meleagris (Turkey)</strong></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Lifestyle</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Setting Up a Headless VNC Server for Remote Desktop Access</title>
    <link href="/2025/08/21/Setting-Up-a-Headless-VNC-Server-for-Remote-Desktop-Access/"/>
    <url>/2025/08/21/Setting-Up-a-Headless-VNC-Server-for-Remote-Desktop-Access/</url>
    
    <content type="html"><![CDATA[<p>While SSH is a staple tool and almost universally understood amongLinux users, setting up <strong>VNC for remote desktop access</strong> -especially headlessly or with virtual framebuffers - remains mysteriousto many, and for good reasons:</p><ul><li>Requires understanding of X11 and graphical sessions (DISPLAYvariables, X servers, etc.)</li><li>Needs both a VNC server and a desktop environment/windowmanager</li><li>Involves properly launching graphical sessions</li></ul><p>However, for many professionals, researchers, and IT administrators,secure remote desktop access is not just a convenience - it's aninelastic requirement. Unlike other features you can work around ordelay, robust GUI access to a remote host is sometimes the only way toget mission-critical work done. For example:</p><ul><li><strong>Work-from-home</strong> mean you need to access graphicalapplications (like IDEs, simulators, and visualization tools) installedon remote lab or office machines.</li><li><strong>Remote servers without physical monitors</strong> demand aheadless-only setup - you can't just "plug in a monitor and keyboard" tostart a desktop session.</li><li><strong>Modern GUI applications</strong> sometimes can't runeffectively via X11 forwarding (like over slow networks) and absolutelyrequire a persistent desktop session.</li></ul><p>In these scenarios, there is <strong>no substitute</strong> - theneed is inelastic. You must have a reliable, secure way to run andmanage desktops remotely. Frustratingly, most available documentation isscattered, outdated, or omits crucial details.</p><p>That's why this guide exists: to provide you with a <strong>direct,practical roadmap for setting up a robust remote desktopworkflow</strong>, no matter where you work.</p><h2 id="the-three-components-of-headless-vnc">The Three Components ofHeadless VNC</h2><p>Three key components work together to present a remote desktop viaVNC:</p><h3 id="xvfb-x-virtual-framebuffer">Xvfb (X Virtual Framebuffer)</h3><p>Xvfb is a "headless" X server that implements the X11 protocol andacts like a display server, but renders everything to memory instead ofa physical monitor.</p><h3 id="x11vnc">x11vnc</h3><p>This utility acts as a bridge, allowing VNC clients to view andinteract with an existing X server session. It:</p><ul><li>Connects to the X server's framebuffer (in this case, Xvfb'sin-memory screen)</li><li>Reads pixels from the X server, and writes mouse/keyboardevents</li><li>Presents those images to a VNC client over the network, and listensfor events</li></ul><h3 id="gui-applications">GUI Applications</h3><p>These render to Xvfb's in-memory screen instead of a physical monitorvia the <code>DISPLAY</code> environment variable.</p><h2 id="step-by-step-setup-guide">Step-by-Step Setup Guide</h2><h3 id="prerequisites-remote-host">Prerequisites (Remote Host)</h3><p>First, install the necessary packages on the <strong>remotehost</strong>:</p><ul><li><code>xvfb</code></li><li><code>x11vnc</code></li><li><code>xterm</code>, <code>icewm</code> (for demonstration purposesin this tutorial)</li></ul><p><strong>We would have to run <code>xvfb</code>, <code>x11vnc</code>,and <code>xterm</code> concurrently.</strong> For this purpose, Irecommend using <code>tmux</code> (or any other comparable tool) tomanage multiple terminal windows and persistent sessions.</p><h3 id="start-the-virtual-display-remote-host">Start the Virtual Display(Remote Host)</h3><p>In your first terminal window on the remote host, start Xvfb:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Xvfb :1 -screen 0 800x600x16<br></code></pre></td></tr></table></figure><p>This creates a virtual X11 display number <code>:1</code> (using TCPport 6001) with resolution <code>800x600</code> and 16-bit colordepth.</p><p><strong>Xvfb has properly started only if the above command neitherlogs output nor exits after being invoked.</strong> If it logs messagesor exits immediately, there's a problem to solve before moving on.Common issues include:</p><ul><li>Port 6001 already in use (try a different display number like<code>:2</code>)</li><li>Permission issues with <code>/tmp/.X11-unix</code> directory. The<code>/tmp/.X11-unix</code> directory must be readable and writable.<strong>In some environments like WSL, this directory might beread-only, which will prevent Xvfb from starting properly.</strong></li></ul><h3 id="launch-the-vnc-server-remote-host">Launch the VNC Server (RemoteHost)</h3><p>In a second terminal window on the remote host, start x11vnc:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">x11vnc -display :1 -rfbport 5901 -localhost -forever<br></code></pre></td></tr></table></figure><p>This command:</p><ul><li>Connects to the virtual X server's framebuffer at display<code>:1</code></li><li>Listens for VNC connections on port 5901</li><li>Restricts connections to localhost only (for security, VNC is notencrypted)<ul><li><strong>Never expose VNC directly to the publicInternet!</strong></li></ul></li><li>With <code>-forever</code>, x11vnc won't exit after the last clientdisconnects</li></ul><p>After running the command:</p><ul><li>It may report <strong>authentication or password-relatederrors</strong> (which is <strong>acceptable</strong>).</li><li>But it should <strong>NOT</strong> exit after running for a while.If it exits after running for a while, there's a problem to solve beforemoving on.</li></ul><h3 id="secure-access-with-ssh-tunneling-local-machine">Secure Accesswith SSH Tunneling (Local Machine)</h3><p>VNC is not encrypted, so we'll use SSH tunneling on your<strong>local machine</strong> for security.</p><p>You can either use basic SSH port forwarding (which may beconfusing), or <ahref="https://github.com/jifengwu2k/port-tunnel-manager">set up the<code>pull_remote_port.sh</code> wrapper</a> on your <strong>localmachine</strong> to pull the remote host's port 5901 to<code>localhost:5901</code>. After <strong>cloning its GitHub repositoryand completing its prerequisites</strong>, run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash pull_remote_port.sh [-p &lt;ssh_port&gt;] -u &lt;remote_user&gt; -h &lt;remote_host&gt; -r 5901 -l 5901<br></code></pre></td></tr></table></figure><p>This makes the remote host's VNC port available on your local machinevia a secure SSH tunnel.</p><h3 id="test-with-a-simple-application-remote-host">Test with a SimpleApplication (Remote Host)</h3><p>In a third terminal window on the <strong>remote host</strong>,launch a test application:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># The `DISPLAY=:1` environment variable must be set</span><br><span class="hljs-comment"># For all GUI apps you wish to appear in the VNC session</span><br><span class="hljs-built_in">export</span> DISPLAY=:1<br>xterm<br></code></pre></td></tr></table></figure><p>Now connect to your VNC server on your <strong>local machine</strong>using a VNC client (like TigerVNC, RealVNC, or Remmina) pointing to<code>localhost:5901</code>. You should see the xterm window.</p><h3 id="using-desktop-environments-remote-host">Using DesktopEnvironments (Remote Host)</h3><p>For a full desktop experience rather than just single applications,you can install a desktop environment.</p><h4 id="lightweight-options">Lightweight Options</h4><ul><li>Openbox</li><li>Fluxbox</li><li>IceWM</li><li>WindowMaker</li></ul><h4 id="full-desktop-environments">Full Desktop Environments</h4><ul><li>GNOME</li><li>KDE Plasma</li><li>MATE</li><li>Cinnamon</li><li>LXDE</li><li>LXQt</li></ul><h4 id="example-installing-and-using-icewm-remote-host">Example:Installing and Using IceWM (Remote Host)</h4><p>In the third terminal window on the <strong>remote host</strong> (theone used to launch <code>xterm</code>), quit <code>xterm</code> andstart an IceWM session:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> DISPLAY=:1<br>icewm-session<br></code></pre></td></tr></table></figure><p>Now your VNC client on your <strong>local machine</strong> will showthe complete IceWM desktop environment.</p><figure><img src="/static/images/IceWM_desktop_environment_in_VNC_client.jpg"alt="IceWM desktop environment in VNC client" /><figcaption aria-hidden="true">IceWM desktop environment in VNCclient</figcaption></figure><h3 id="important-caveat-single-instance-applications">Important Caveat:Single-Instance Applications</h3><p>Many desktop applications are designed to run <strong>only oneinstance per user account</strong>:</p><ul><li>Browsers: Firefox, Chrome/Chromium</li><li>Advanced editors: gedit, kate, geany (configurable),code/VSCode</li><li>File managers: nautilus, pcmanfm (configurable), dolphin</li><li>Document viewers: evince</li><li>Many modern GTK/Qt apps that use D-Bus for activation</li></ul><p><strong>If your remote host has a physical desktop, and such an appis already running on your physical desktop</strong>, new instances willtry to communicate with the existing instance via D-Bus,<strong>creating windows on your physical desktop instead of in yourvirtual framebuffer, even after<code>export DISPLAY=:1</code>.</strong></p><p>Solution:</p><ul><li>Ensure applications aren't already running on your main desktopbefore launching them in your VNC session.</li><li>Or use a different user account for VNC access.</li></ul><h2 id="conclusion">Conclusion</h2><p>Setting up a headless VNC server might seem complex at first, but byunderstanding the three components (Xvfb, x11vnc, and your GUIapplications) and following this recipe, you can create a reliableremote desktop solution. Remember to always use SSH tunneling forsecurity and be mindful of single-instance applications.</p><p>With this setup, you can enjoy full graphical desktop access to yourremote Linux machines, opening up possibilities for remoteadministration, development, and troubleshooting.</p>]]></content>
    
    
    <categories>
      
      <category>Environments</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>How to Make VS Code&#39;s Language Detection Sane (and Deterministic)</title>
    <link href="/2025/08/12/How-to-Make-VS-Code-s-Language-Detection-Sane-and-Deterministic/"/>
    <url>/2025/08/12/How-to-Make-VS-Code-s-Language-Detection-Sane-and-Deterministic/</url>
    
    <content type="html"><![CDATA[<p>Anyone who's used Visual Studio Code long enough has probably runinto some surprisingly silly (and maddening) mistakes from its automaticlanguage detection.</p><p>Things get especially annoying with temporary or scratch files: VSCode tries too hard to be clever and ends up insisting your random notesare "Groovy" or "Shell" scripts. If you're like me, you just want<strong>files with clear, non-ambiguous extensions</strong> mappedcorrectly, and everything else opened as <strong>plain text</strong>.Simpler, saner, less frustrating.</p><h2 id="the-fix-use-explicit-file-associations">The Fix: Use ExplicitFile Associations</h2><p>By explicitly listing out the extension - language bindings in your<code>settings.json</code>, you can make VS Code behave in a much morepredictable way.</p><ul><li>For every common, unambiguous extension (<code>.js</code>,<code>.py</code>, <code>.cpp</code>, etc.), set the language associationdirectly.</li><li>For ambiguous or tricky cases (like <code>.m</code> for bothObjective-C and MATLAB), don't specify anything - you can alwaysoverride them manually.</li><li>For all other files (including all extensionless files and temporaryfiles), <strong>force them to open as plain text</strong>.</li></ul><p>This means no more unwanted language features popping up, and everycommon language just works.</p><h2 id="how-to-set-it-up">How to Set It Up</h2><ol type="1"><li>Open the command palette (<code>Ctrl+Shift+P</code> /<code>Cmd+Shift+P</code>).</li><li>Type and select: <code>Preferences: Open Settings (JSON)</code></li><li>Replace any existing <code>"files.associations"</code> block in yourglobal <code>settings.json</code>:</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Dockerfile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dockerfile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Makefile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;makefile&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.abap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abap&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.bat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bat&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.bib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bibtex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.clj&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cljc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cljs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clojure&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cmd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bat&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.coffee&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;coffeescript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;csharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cshtml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;razor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;css&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cuda-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cuh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cuda-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.cxx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;d&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.dart&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.diff&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;diff&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.erl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erlang&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fsi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.fsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fsharp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;go&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.groovy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;groovy&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.haml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.handlebars&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;handlebars&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hbs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;handlebars&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erlang&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.hs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;haskell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.htm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ini&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ini&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jade&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;julia&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;json&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jsonc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jsonc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;javascriptreact&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;less&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.lua&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lua&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.markdown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;markdown&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.md&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;markdown&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.mli&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ocaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.mm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;objective-cpp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.p6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pascal&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.patch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;diff&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.php5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.phtml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;php&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pl6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;perl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ps1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.psm1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.pug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;python&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.r&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;r&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.raku&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rakumod&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;raku&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ruby&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.rs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rust&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sass&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sass&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scss&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sh&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shellscript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.shader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shaderlab&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.slim&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;slim&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.sql&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sql&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.styl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;stylus&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.svelte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;svelte&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.swift&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;swift&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.tex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tex&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.ts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typescript&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.tsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;typescriptreact&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.txt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;plaintext&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.vb&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vb&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xsl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xsl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.xslt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xsl&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.yaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*.yml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yaml&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;*&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;plaintext&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Notice the last line: <code>"*": "plaintext"</code> - this forcesevery file <strong>not matched above</strong>, including all files withno extension, to open as plain text.</p><h3 id="why-this-is-so-much-better">Why this is so much better</h3><ul><li><strong>No more weird guesses:</strong> Scratch files stay as plaintext.</li><li><strong>You get what you expect:</strong> Every major extension getsits proper language features.</li><li><strong>You can still override manually:</strong> For rare ambiguouscases, you can still set the language from the bottom right and VS Coderemembers per file.</li></ul><h2 id="conclusion">Conclusion</h2><p>VS Code's default language detection tries to be smart, but oftenoutsmarts itself. By making associations deterministic and catching allother files as plain text, you make your workflow saner and morepredictable.</p><p>Try it out and enjoy a quieter, less-annoying VS Code!</p>]]></content>
    
    
    <categories>
      
      <category>Environments</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Using DevTools Console for Web Scraping</title>
    <link href="/2025/08/12/Using-DevTools-Console-for-Web-Scraping/"/>
    <url>/2025/08/12/Using-DevTools-Console-for-Web-Scraping/</url>
    
    <content type="html"><![CDATA[<h2 id="convert-an-html-table-to-a-pandas-compatible-json">Convert anHTML Table to a Pandas-compatible JSON</h2><p>If you want to convert an HTML table to a Pandas-compatible JSON:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&#123;<br>    <span class="hljs-string">&quot;column1&quot;</span>: [value1, value2, <span class="hljs-string">...</span>],<br>    <span class="hljs-string">&quot;column2&quot;</span>: [value1, value2, <span class="hljs-string">...</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>you can do this in a browser using DOM manipulation:</p><ul><li><strong>Extract headers</strong>: Get the header text from the<code>&lt;th&gt;</code> elements.</li><li><strong>Build the output object</strong>: Each header is a keypointing to an array.</li><li><strong>Fill columns</strong>: Loop over the rows, pushing cellvalues to the appropriate key/array.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tableToPandasJson</span>(<span class="hljs-params">table</span>) &#123;<br>  <span class="hljs-comment">// Get the headers from the first row of the table head</span><br>  <span class="hljs-keyword">var</span> thead = table.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;thead&#x27;</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> headerCells = thead.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;th&#x27;</span>);<br>  <span class="hljs-keyword">var</span> headers = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; headerCells.<span class="hljs-property">length</span>; i++) &#123;<br>    headers.<span class="hljs-title function_">push</span>(headerCells[i].<span class="hljs-property">innerText</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// Initialize the result object, one array per header</span><br>  <span class="hljs-keyword">var</span> result = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; headers.<span class="hljs-property">length</span>; j++) &#123;<br>    result[headers[j]] = [];<br>  &#125;<br><br>  <span class="hljs-comment">// Go through each row in tbody</span><br>  <span class="hljs-keyword">var</span> tbody = table.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;tbody&#x27;</span>)[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">var</span> rows = tbody.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;tr&#x27;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> r = <span class="hljs-number">0</span>; r &lt; rows.<span class="hljs-property">length</span>; r++) &#123;<br>    <span class="hljs-keyword">var</span> cells = rows[r].<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;td&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> c = <span class="hljs-number">0</span>; c &lt; headers.<span class="hljs-property">length</span>; c++) &#123;<br>      <span class="hljs-comment">// Always treat as text</span><br>      <span class="hljs-keyword">var</span> cellText = cells[c].<span class="hljs-property">innerText</span>;<br>      result[headers[c]].<span class="hljs-title function_">push</span>(cellText);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="example">Example</h3><h4 id="example-html-table">Example HTML table</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myTable&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alice<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="javascript-code">JavaScript code</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> table = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myTable&#x27;</span>);<br><span class="hljs-keyword">var</span> pandasJson = <span class="hljs-title function_">tableToPandasJson</span>(table);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(pandasJson));<br><span class="hljs-comment">// Output: &#123;&quot;Name&quot;:[&quot;Alice&quot;,&quot;Bob&quot;],&quot;Age&quot;:[&quot;25&quot;,&quot;30&quot;]&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Science, Multimedia, and Process Automation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Generating Google Calendar Event URLs</title>
    <link href="/2025/08/12/Generating-Google-Calendar-Event-URLs/"/>
    <url>/2025/08/12/Generating-Google-Calendar-Event-URLs/</url>
    
    <content type="html"><![CDATA[<p>You can generate your own Google Calendar event URLs following thisgeneral structure:</p><h2 id="google-calendar-event-url-format">Google Calendar Event URLFormat</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">https:<span class="hljs-comment">//calendar.google.com/calendar/render?action=TEMPLATE&amp;</span><br>  text=EVENT_TITLE<span class="hljs-meta">&amp;</span><br>  dates=START_DATE_TIME/END_DATE_TIME<span class="hljs-meta">&amp;</span><br>  details=EVENT_DESCRIPTION<span class="hljs-meta">&amp;</span><br>  location=EVENT_LOCATION<span class="hljs-meta">&amp;</span><br>  ctz=TIMEZONE<br></code></pre></td></tr></table></figure><h2 id="parameter-breakdown"><strong>Parameter Breakdown</strong></h2><table><thead><tr class="header"><th>Parameter</th><th>Purpose</th><th>Format/Example</th><th>Required?</th></tr></thead><tbody><tr class="odd"><td><code>text</code></td><td>The event title (URL-encoded)</td><td><code>text=Grad%20Connect%202025</code></td><td>Yes</td></tr><tr class="even"><td><code>dates</code></td><td>Start/end date and time, in <code>YYYYMMDDTHHMMSS</code></td><td><code>dates=20250821T100000/20250821T130000</code> (<code>T</code>for time)</td><td>Yes</td></tr><tr class="odd"><td><code>details</code></td><td>Event description (URL-encoded)</td><td><code>details=Description%20here...</code></td><td>No</td></tr><tr class="even"><td><code>location</code></td><td>Event location (URL-encoded)</td><td><code>location=Ramin%20Room%2C%20Bartels%20Hall...</code></td><td>No</td></tr><tr class="odd"><td><code>ctz</code></td><td>IANA timezone name (URL-encoded)</td><td><code>ctz=America/New_York</code></td><td>No</td></tr></tbody></table><h2 id="create-your-own">Create Your Own</h2><p>To generate these URLs yourself, you can use the following Pythonfunction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Optional</span><br><br><span class="hljs-keyword">if</span> sys.version_info &lt; (<span class="hljs-number">3</span>,):<br>    <span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> quote<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_google_calendar_event_url</span>(<span class="hljs-params"></span><br><span class="hljs-params">    title,  <span class="hljs-comment"># type: str</span></span><br><span class="hljs-params">    start_datetime,  <span class="hljs-comment"># type: datetime.datetime</span></span><br><span class="hljs-params">    end_datetime,  <span class="hljs-comment"># type: datetime.datetime</span></span><br><span class="hljs-params">    description=<span class="hljs-literal">None</span>,  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params">    location=<span class="hljs-literal">None</span>,  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params">    iana_timezone_name=<span class="hljs-literal">None</span>  <span class="hljs-comment"># type: Optional[str]</span></span><br><span class="hljs-params"></span>):<br>    base_url = <span class="hljs-string">&quot;https://calendar.google.com/calendar/render&quot;</span><br><br>    query_string_fragments = [<br>        <span class="hljs-string">&#x27;action=TEMPLATE&#x27;</span>,<br>        <span class="hljs-string">&#x27;text=%s&#x27;</span> % quote(title),<br>        <span class="hljs-string">&#x27;dates=%s/%s&#x27;</span> % (start_datetime.strftime(<span class="hljs-string">&#x27;%Y%m%dT%H%M%S&#x27;</span>), end_datetime.strftime(<span class="hljs-string">&#x27;%Y%m%dT%H%M%S&#x27;</span>))<br>    ]<br><br>    <span class="hljs-keyword">if</span> description <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;details=%s&#x27;</span> % quote(description))<br>    <br>    <span class="hljs-keyword">if</span> location <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;location=%s&#x27;</span> % quote(location))<br>    <br>    <span class="hljs-keyword">if</span> iana_timezone_name <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        query_string_fragments.append(<span class="hljs-string">&#x27;ctz=%s&#x27;</span> % quote(iana_timezone_name))<br>    <br>    query_string = <span class="hljs-string">&#x27;&amp;&#x27;</span>.join(query_string_fragments)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;%s?%s&#x27;</span> % (base_url, query_string)<br></code></pre></td></tr></table></figure><h3 id="example">Example</h3><p>Suppose you want an event: - Title: <strong>Sample Event</strong> -Date/Time: <strong>June 10, 2024, 2pm to 3:30pm</strong> - Description:<strong>Don't miss this important meeting!</strong> - Location:<strong>123 Main St, New York, NY</strong> - Time zone:<strong>America/New_York</strong></p><p>Here's how you'd create the URL:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> zoneinfo <span class="hljs-keyword">import</span> ZoneInfo<br><br><br>generate_google_calendar_event_url(<br>    title=<span class="hljs-string">&#x27;Sample Event&#x27;</span>,<br>    start_datetime=datetime.datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">00</span>),<br>    end_datetime=datetime.datetime(<span class="hljs-number">2024</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>),<br>    description=<span class="hljs-string">&quot;Don&#x27;t miss this important meeting!&quot;</span>,<br>    location=<span class="hljs-string">&#x27;123 Main St, New York, NY&#x27;</span>,<br>    iana_timezone_name=<span class="hljs-string">&#x27;America/New_York&#x27;</span><br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Science, Multimedia, and Process Automation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Manipulating `DataFrame`s Using `pandas`</title>
    <link href="/2025/08/12/Manipulating-DataFrame-s-Using-pandas/"/>
    <url>/2025/08/12/Manipulating-DataFrame-s-Using-pandas/</url>
    
    <content type="html"><![CDATA[<h2id="one-dataframe-has-the-columns-a-b-and-another-has-the-columns-a-c.-how-to-merge-into-one-dataframe-with-columns-a-b-and-c">One<code>DataFrame</code> has the columns <code>A</code>, <code>B</code>and another has the columns <code>A</code>, <code>C</code>. How to mergeinto one <code>DataFrame</code> with columns <code>A</code>,<code>B</code>, and <code>C</code>?</h2><p>You can achieve this using <code>pd.merge()</code> in<code>pandas</code> with the <code>how='outer'</code> argument. Thiswill merge on the common column <code>A</code> and include all rows fromboth DataFrames, filling in missing values (as <code>NaN</code>) wherethe data does not exist.</p><p>Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># Example data</span><br>df1 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>]<br>&#125;)<br><br>df2 = pd.DataFrame(&#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>    <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>]<br>&#125;)<br><br><span class="hljs-comment"># Merge on column &#x27;A&#x27;</span><br>merged = pd.merge(df1, df2, on=<span class="hljs-string">&#x27;A&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(merged)<br></code></pre></td></tr></table></figure><p>Result:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tp">   A    B    C<br><span class="hljs-number">0</span>  <span class="hljs-number">1</span>    <span class="hljs-keyword">X</span>  NaN<br><span class="hljs-number">1</span>  <span class="hljs-number">2</span>    <span class="hljs-keyword">Y</span>    <span class="hljs-keyword">P</span><br><span class="hljs-number">2</span>  <span class="hljs-number">3</span>    <span class="hljs-keyword">Z</span>    Q<br><span class="hljs-number">3</span>  <span class="hljs-number">4</span>  NaN    <span class="hljs-keyword">R</span><br></code></pre></td></tr></table></figure><h2 id="iterate-over-rows-and-access-columns-in-a-dataframe">Iterateover rows and access columns in a <code>DataFrame</code></h2><p>If the column names are valid Python identifiers, using<code>itertuples()</code> to yield <code>namedtuple</code>s isfastest:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> df.itertuples():<br>    <span class="hljs-built_in">print</span>(row.Index, row.A, row.B)   <span class="hljs-comment"># Access columns with dot notation</span><br></code></pre></td></tr></table></figure><p>If not all column names are valid Python identifiers (e.g., somecolumn names contain spaces), use <code>iterrows()</code> to yield anindex and a <code>Series</code> for each row:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> df.iterrows():<br>    <span class="hljs-built_in">print</span>(index, row[<span class="hljs-string">&#x27;A&#x27;</span>], row[<span class="hljs-string">&#x27;B&#x27;</span>])   <span class="hljs-comment"># Access columns via indexing</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Science, Multimedia, and Process Automation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Powering `clangd`-based C++ IDEs with `compile_commands.json`</title>
    <link href="/2025/08/11/Powering-clangd-based-C-IDEs-with-compile-commands-json/"/>
    <url>/2025/08/11/Powering-clangd-based-C-IDEs-with-compile-commands-json/</url>
    
    <content type="html"><![CDATA[<h2 id="what-is-compile_commands.json">What is<code>compile_commands.json?</code></h2><p><code>clangd</code>, the C++ language server that powers IDE featuresin VS Code, CLion, etc. such as <strong>code navigation, linting anderror detection, and refactoring</strong>, requires<code>compile_commands.json</code>, a JSON file that records exactly howeach source file in your project should be compiled. The example shows asimple structure:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;directory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/path/to/project&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang++ -std=c++11 -g -Og main.cpp -o main&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;main.cpp&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>Each entry contains:</p><ul><li><code>directory</code>: The absolute path of where the compilationoccurs</li><li><code>command</code>: The full compilation command (Shell featuressuch as variable and command substitution are NOT supported)</li><li><code>file</code>: The relative path of the source file beingcompiled</li></ul><h2 id="generating-compile_commands.json">Generatingcompile_commands.json</h2><p>You can create one manually as shown in the following Shellscript:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># The absolute path of the project directory (where the compilation occurs)</span><br>DIRECTORY=<span class="hljs-string">&quot;<span class="hljs-subst">$(realpath .)</span>&quot;</span><br><br><span class="hljs-comment"># The relative path of the source file being compiled</span><br>FILE=<span class="hljs-string">&#x27;main.cpp&#x27;</span><br><br><span class="hljs-comment"># The full compilation command (precompute variable and command substitutions)</span><br>COMMAND=<span class="hljs-string">&quot;clang++ -std=c++11 -g -Og -fprofile-instr-generate -fcoverage-mapping main.cpp -o main <span class="hljs-subst">$(python3-config --includes)</span> <span class="hljs-subst">$(python3-config --ldflags)</span>&quot;</span><br><br><span class="hljs-comment"># Generate `compile_commands.json` under the project directory</span><br><span class="hljs-built_in">cat</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$DIRECTORY</span>/compile_commands.json&quot;</span> &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">[</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    &quot;directory&quot;: &quot;$DIRECTORY&quot;,</span><br><span class="hljs-string">    &quot;command&quot;: &quot;$COMMAND&quot;,</span><br><span class="hljs-string">    &quot;file&quot;: &quot;$FILE&quot;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>This approach works well for small projects. For larger ones,consider using CMake or <code>bear</code> (for make-based projects).</p>]]></content>
    
    
    <categories>
      
      <category>Environments</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>英语名词新译</title>
    <link href="/2025/07/30/%E8%8B%B1%E8%AF%AD%E5%90%8D%E8%AF%8D%E6%96%B0%E8%AF%91/"/>
    <url>/2025/07/30/%E8%8B%B1%E8%AF%AD%E5%90%8D%E8%AF%8D%E6%96%B0%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>“哎妈呀，这不就是咱们屯子里的那个……吗！”</strong></p></blockquote><h2 id="专有名词">专有名词</h2><ul><li>Berkeley 桦林<ul><li>古英语的 <code>*beorc*</code> 意为桦树，<code>*leah*</code>意为林地、空地</li></ul></li><li>Carmichael 米哈伊尔堡<ul><li>苏格兰盖尔语的 <code>caer</code> 意为“要塞”或“堡垒”</li></ul></li><li>Cornell 角斗士<ul><li>古凯尔特语的 <code>corn</code> 意为“角”或“突出物”，<code>wall</code> 意为“统治者”或“勇士”</li></ul></li><li>Dunbar 山头堡<ul><li>苏格兰盖尔语的 <code>dùn</code> 意为“堡垒”，<code>barr</code>意为“顶部”或“山”</li></ul></li><li>Hudson River 双流江<ul><li>在欧洲人到来之前，莱纳佩人将这条河称为<strong>Muhheakantuck</strong></li><li>这个名字的含义是 <strong>“两向流动的河”</strong>。</li><li>由于大西洋潮汐的影响，河水在入海口附近会随着潮涨潮落而改变流向，这对原住民的航行和生活至关重要。</li></ul></li><li>Manhattan 山洲<ul><li>莱纳佩人（Lenape，也称为德拉瓦人，Delaware）的语言。<ul><li><strong>Manah-</strong> ：意为“山”、“岛”、“或“山丘”。</li><li><strong>-ata</strong> 或 <strong>-hatin</strong> ：意为“的”。</li></ul></li></ul></li><li>Mississippi 大江<ul><li>源自奥吉布瓦语（Ojibwe）<ul><li><strong>Misi</strong> （或<strong>michi</strong>）：意为“大的”、“伟大的”。</li><li><strong>ziibi</strong>：意为“河”。</li></ul></li></ul></li><li>St. Lawrence River 通衢江<ul><li><strong>Kaniatarowanenneh</strong></li><li>源自莫霍克语（Mohawk）</li><li><strong>直译</strong>：<strong>“大水道”</strong> 或<strong>“大独木舟之路”</strong><ul><li><code>Kaniá</code>- 指的是“船”或“独木舟”。</li><li><code>-taro</code>- 意为“湖”或“广阔的水体”。</li><li><code>-wanenneh</code> 意为“大的”或“伟大的”。</li></ul></li></ul></li><li>Wegman 路人<ul><li>Middle High German word <em>weg</em> ("way" or "road") combined with<em>mann</em> ("man")</li></ul></li></ul><h2 id="政治名词">政治名词</h2><ul><li>county 县<ul><li>美国无封建传统，不得将 county 译为“郡”。</li><li>英国的“郡”英语为 shire。因此，可以将 New Hampshire翻译为“新汉普郡”。</li></ul></li><li>borough 镇（“武汉三镇”的“镇”）<ul><li>从词源上，borough 意为“a fortifiedtown”，因此翻译为“镇”而不是“区”。</li></ul></li><li>district 区</li><li>capitol 国会山</li><li>sheriff 治安官</li></ul><h2id="英国市制单位起源于农业生产生活实践">英国市制单位（起源于农业生产生活实践）</h2><h3 id="长度">长度</h3><ul><li>inch 英寸</li><li>foot 英尺</li><li>yard 英步</li><li>mile 英里</li></ul><blockquote><p>中国古代的长度单位主要包括以人体测量为基础的寸、尺、咫、丈、寻、仞，以及更小的单位如分、厘、毫、秒、忽。此外，还有用于较长距离的步、里、舍等单位。</p><p>寸：《说文解字》定义为十分之一尺，以手掌后退一寸的动脉位置为“寸口”而命名，并以“手”字为部首。</p><p>尺：最初指代人的身体长度，通常为十寸，与人体的一臂之长相关。</p><p>咫：特指妇女手伸展后拇指和中指之间的距离，比尺稍短，后用来与“尺”连用，表示距离很近。</p><p>丈：等于十尺，是一个较大的长度单位。</p><p>寻：与仞相当，大约为八尺。</p><p>仞：指人伸开双臂的长度。</p><p>步：在古代常用于测量地面距离。</p><p>里：一个源于周代的长度单位，用于测定距离。</p></blockquote><h3 id="面积">面积</h3><ul><li>acre 英亩</li></ul><h3 id="重量体积容积">重量/体积/容积</h3><ul><li>ounce 英两</li><li>pound 英斤</li><li>pint 英合</li><li>quart 英升</li><li>gallon 英斗</li><li>bushel 英斛</li></ul><blockquote><p>古代的重量计量单位中，1钧= 30斤、1斤= 16两、1两=24铢、1铢= 10圭。在古代，除了用钧、圭、铢、斤、两代表重量外，较重、较多量的物的多少更多的是采用容积来代表。</p><p>从宋朝开始，我国古代的计量单位固定位石、斛、斗、升、合。它们之间的换算都是1石= 2斛、1斛 = 5斗、1斗 = 10升、1升 =10合。不过各时期所代表的实际的量不同。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linguistics and Literature</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Metaclass Fundamentals</title>
    <link href="/2025/07/25/Metaclass-Fundamentals/"/>
    <url>/2025/07/25/Metaclass-Fundamentals/</url>
    
    <content type="html"><![CDATA[<p>Metaclasses are one of Python's most powerful yet least understoodfeatures. They enable patterns that would be difficult or impossiblewith regular class definitions. In this post, we'll explore metaclassfundamentals through simple examples.</p><h2 id="what-are-metaclasses">What are Metaclasses?</h2><ul><li>A <strong>class C's metaclass</strong> is basically<code>type(C)</code>. <strong>If you define<code>class Class(metaclass=ClassMeta)</code> in Python, then<code>type(Class) is ClassMeta</code>.</strong></li><li>If we don't explicitly set a metaclass for a class, then itsmetaclass is <code>type</code> by default. <strong>Thus,<code>ClassMeta</code> should inherit from<code>type</code>.</strong></li><li>Just like given <code>o = Class(...)</code>, and that<code>Class</code> defines a method <code>def f(self, ...)</code>,<code>o.f(...)</code> would result in calling<code>Class.f(o, ...)</code>, <strong>if <code>ClassMeta</code> definesa method <code>def g(self, ...)</code>, <code>Class.g(...)</code> wouldresult in calling <code>ClassMeta.g(...)</code></strong>.</li></ul><p>We'll present a concrete example below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">type</span>.__call__(self, *args, **kwargs)  <br>        <span class="hljs-keyword">return</span> instance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>(<span class="hljs-built_in">object</span>, metaclass=ClassMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> instance<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">object</span>.__init__(self)<br></code></pre></td></tr></table></figure><p>What happens when we run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c = Class(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, message=<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>Class(0, 1, 2, message='Hello World')</code> is syntactic sugarfor <code>Class.__call__(0, 1, 2, message='Hello World')</code>.</p><p>If we haven't set a metaclass for <code>Class</code>, then this inturn invokes<code>type.__call__(Class, 0, 1, 2, message='Hello World')</code>.</p><p>However, we have set <code>Class</code>'s metaclass to<code>ClassMeta</code>, whose <code>ClassMeta.__call__</code> overrides<code>type.__call__</code>. Thus,<code>Class.__call__(0, 1, 2, message='Hello World')</code> would invoke<strong><code>ClassMeta.__call__(Class, 0, 1, 2, message='Hello World')</code></strong>instead.</p><p>With a few <code>print</code> statements added, we can see thefunction calls:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassMeta</span>.</span><span class="hljs-module"><span class="hljs-identifier">__call__</span>(</span></span>self, *args, **kwargs), self = &lt;<span class="hljs-keyword">class</span> &#x27;__main__.Class&#x27;&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">type</span>.<span class="hljs-constructor">__call__(<span class="hljs-params">self</span>, <span class="hljs-operator">*</span><span class="hljs-params">args</span>, <span class="hljs-operator">**</span><span class="hljs-params">kwargs</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__new__</span>(</span></span>cls, *args, **kwargs), cls = &lt;<span class="hljs-keyword">class</span> &#x27;__main__.Class&#x27;&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__new__(<span class="hljs-params">cls</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__new__</span>(</span></span>cls, *args, **kwargs), after calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__new__(<span class="hljs-params">cls</span>)</span>, instance: &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>(</span></span>self, *args, **kwargs), self = &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;, args = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), kwargs = &#123;&#x27;message&#x27;: &#x27;Hello World&#x27;&#125;, calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">self</span>)</span>...<br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span><span class="hljs-module"><span class="hljs-identifier">__init__</span>(</span></span>self, *args, **kwargs), after calling <span class="hljs-keyword">object</span>.<span class="hljs-constructor">__init__(<span class="hljs-params">self</span>)</span><br><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassMeta</span>.</span><span class="hljs-module"><span class="hljs-identifier">__call__</span>(</span></span>self, *args, **kwargs), after calling <span class="hljs-keyword">type</span>.<span class="hljs-constructor">__call__(<span class="hljs-params">self</span>, <span class="hljs-operator">*</span><span class="hljs-params">args</span>, <span class="hljs-operator">**</span><span class="hljs-params">kwargs</span>)</span>, instance: &lt;__main__.Class <span class="hljs-keyword">object</span> at <span class="hljs-number">0x7ea1253346e0</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="metaclass-inheritance">Metaclass Inheritance</h2><p>Metaclasses are "contagious" - when you inherit from a class with ametaclass, the child class gets the same metaclass:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">type</span>.__call__(self, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> instance<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>(<span class="hljs-built_in">object</span>, metaclass=ParentMeta):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = <span class="hljs-built_in">object</span>.__new__(cls)<br>        <span class="hljs-keyword">return</span> instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">object</span>.__init__(self)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span>(<span class="hljs-title class_ inherited__">Parent</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        instance = Parent.__new__(cls, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        Parent.__init__(self, *args, **kwargs)<br></code></pre></td></tr></table></figure><p>In this case,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c = Child(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, message=<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br></code></pre></td></tr></table></figure><p>would still result in invoking<strong><code>ParentMeta.__call__(Child, 0, 1, 2, message='Hello World')</code></strong>.</p><h2 id="practical-application-1-singleton-pattern">Practical Application1: Singleton Pattern</h2><p>Metaclasses provide an elegant way to implement the Singletonpattern:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    _instances = &#123;&#125;<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cls._instances:<br>            cls._instances[cls] = <span class="hljs-built_in">super</span>().__call__(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls._instances[cls]<br><br><span class="hljs-comment"># SingletonBase(...) gets rerouted to SingletonMeta(SingletonBase, ...)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonBase</span>(metaclass=SingletonMeta):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># SingletonChild(...) also gets rerouted to SingletonMeta(SingletonChild, ...)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonChild</span>(<span class="hljs-title class_ inherited__">SingletonBase</span>):<br>    <span class="hljs-keyword">pass</span><br><br>a = SingletonBase()<br>b = SingletonBase()<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)  <span class="hljs-comment"># True</span><br><br>x = SingletonChild()<br>y = SingletonChild()<br><span class="hljs-built_in">print</span>(x <span class="hljs-keyword">is</span> y)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="practical-application-2-template-metaprogramming">PracticalApplication 2: Template Metaprogramming</h2><p>We can simulate C++-style templates using metaclasses:</p><p>In C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">templace &lt;V VALUE = <span class="hljs-keyword">default</span>&gt; <span class="hljs-keyword">class</span> C &#123;<br>    <span class="hljs-comment">// Use `VALUE` here</span><br>&#125;;<br><br>C&lt;v&gt; *c = <span class="hljs-keyword">new</span> <span class="hljs-built_in">C</span>&lt;v&gt;(...);<br></code></pre></td></tr></table></figure><p>In Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassMeta</span>(<span class="hljs-title class_ inherited__">type</span>):<br>    _values_to_instantiations = &#123;&#125;<br>    value = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-keyword">if</span> value <span class="hljs-keyword">in</span> self._values_to_instantiations:<br>            instantiation = self._values_to_instantiations[value]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Dynamically create `self[value]` containing the class variable VALUE as a subclass of `self`</span><br>            instantiation = <span class="hljs-built_in">type</span>(<br>                <span class="hljs-string">&#x27;%s[%s]&#x27;</span> % (self.__name__, value),<br>                (self,),<br>                &#123; <span class="hljs-string">&#x27;VALUE&#x27;</span>: value &#125;<br>            )<br>            self._values_to_instantiations[value] = instantiation<br><br>        <span class="hljs-keyword">return</span> instantiation<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>(<span class="hljs-built_in">object</span>, metaclass=ClassMeta):<br>    <span class="hljs-comment"># Use `self.VALUE` or `cls.VALUE` here</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>Then, after we run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Dynamically create `Class[True]`</span><br>class_true = Class[<span class="hljs-literal">True</span>]<br><span class="hljs-comment"># Create an instance of `Class[True]`</span><br>c1 = class_true()<br><span class="hljs-comment"># Dynamically create `Class[False]`</span><br>class_false = Class[<span class="hljs-literal">False</span>]<br><span class="hljs-comment"># Create an instance of `Class[False]`</span><br>c2 = class_false()<br></code></pre></td></tr></table></figure><p>we can get something like:</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c1</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">&lt;__main__.Class[<span class="hljs-literal">True</span>] at <span class="hljs-number">0x796bbb89d3a0</span>&gt;</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">c2</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">&lt;__main__.Class[<span class="hljs-literal">False</span>] at <span class="hljs-number">0x796bbc53fb60</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Software Design</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Creating Custom Data Structures from Abstract Containers in `collections.abc`</title>
    <link href="/2025/07/24/Creating-Custom-Data-Structures-from-Abstract-Containers-in-collections-abc/"/>
    <url>/2025/07/24/Creating-Custom-Data-Structures-from-Abstract-Containers-in-collections-abc/</url>
    
    <content type="html"><![CDATA[<h1id="creating-custom-data-structures-from-abstract-containers-in-collections.abc">CreatingCustom Data Structures from Abstract Containers in<code>collections.abc</code></h1><p>Python's <code>collections.abc</code> module provides a set ofabstract base classes (ABCs) that define the interfaces for variouscontainer types. These ABCs serve as excellent starting points when youneed to create custom data structures that behave like built-incontainers. In this post, we'll explore the hierarchy of these abstractcontainers and explain why inheriting from them is beneficial.</p><h2 id="the-hierarchy-of-abstract-containers">The Hierarchy of AbstractContainers</h2><p>The abstract container classes in <code>collections.abc</code> form alogical inheritance hierarchy that mirrors how we think about containerrelationships:</p><ul><li><strong>Container</strong> (requires <code>__contains__</code>)<ul><li>Defines the <code>in</code> operator behavior</li></ul></li><li><strong>Iterable</strong> (requires <code>__iter__</code>)<ul><li>Adds iteration capability</li></ul></li><li><strong>Sized</strong> (requires <code>__len__</code>)<ul><li>Adds length measurement capability</li></ul></li><li><strong>Collection</strong> (combines <code>Container</code>,<code>Iterable</code>, and <code>Sized</code>)<ul><li>A complete basic collection</li></ul></li></ul><p>From these fundamental abstract container classes, more specializedcontainers branch out:</p><ul><li><strong>Sequence</strong> (combines <code>Reversible</code> and<code>Collection</code>, and also requires <code>__getitem__</code>)<ul><li>Represents immutable sequences (like tuple)</li><li>Provides <code>index()</code> and <code>count()</code><strong>automatically</strong></li></ul></li><li><strong>Mapping</strong> (inherits from <code>Collection</code>, andalso requires <code>__getitem__</code>)<ul><li>Represents read-only dictionaries</li><li>Provides <code>get()</code>, <code>items()</code>,<code>keys()</code>, <code>values()</code><strong>automatically</strong></li></ul></li><li><strong>Set</strong> (inherits from <code>Collection</code>,requires no more methods)<ul><li>Represents immutable sets</li><li>Provides <code>isdisjoint()</code> and support for<code>&amp;</code>, <code>|</code>, <code>-</code>, <code>^</code>,<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,<code>&gt;=</code>, <code>==</code> operations<strong>automatically</strong></li></ul></li></ul><p>The inheritance hierarchy of all abstract container classes is asfollows:</p><pre><code class=" mermaid">classDiagram    Awaitable &lt;|-- Coroutine    Iterable &lt;|-- Reversible    Iterable &lt;|-- Iterator    Iterator &lt;|-- Generator    Sized &lt;|-- MappingView    Iterable &lt;|-- Collection    Sized &lt;|-- Collection    Container &lt;|-- Collection    Collection &lt;|-- ValuesView    MappingView &lt;|-- ValuesView    Collection &lt;|-- Mapping    Collection &lt;|-- Sequence    Reversible &lt;|-- Sequence    Sequence &lt;|-- ByteString    Sequence &lt;|-- MutableSequence    Collection &lt;|-- Set    Set &lt;|-- ItemsView    MappingView &lt;|-- ItemsView    Set &lt;|-- MutableSet    Mapping &lt;|-- MutableMapping    AsyncIterable &lt;|-- AsyncIterator    AsyncIterator &lt;|-- AsyncGenerator</code></pre><p>To get a list of all abstract methods you must implement wheninheriting an abstract container class, you can use the followingfunction:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> abc<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all_abstract_methods</span>(<span class="hljs-params">abstract_base_class</span>):<br>    <span class="hljs-comment"># type: (<span class="hljs-built_in">type</span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">str</span>]</span><br>    all_abstract_methods = <span class="hljs-built_in">set</span>()<br><br>    <span class="hljs-keyword">for</span> mro_entry <span class="hljs-keyword">in</span> abstract_base_class.__mro__:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(mro_entry, abc.ABCMeta) <span class="hljs-keyword">or</span> <span class="hljs-built_in">hasattr</span>(mro_entry, <span class="hljs-string">&#x27;__abstractmethods__&#x27;</span>):<br>            <span class="hljs-keyword">for</span> abstract_method <span class="hljs-keyword">in</span> mro_entry.__abstractmethods__:<br>                all_abstract_methods.add(abstract_method)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(all_abstract_methods)<br></code></pre></td></tr></table></figure><h2 id="why-inherit-from-abstract-containers">Why Inherit from AbstractContainers?</h2><p>When you create a custom data structure by inheriting from theseabstract container classes, you get several benefits:</p><ul><li><strong>Interface Clarity</strong>: The abstract container classesclearly document what abstract methods your class needs to implement tobe a proper container (see <code>get_all_abstract_methods</code>above).</li><li><strong>Type Checking Compatibility</strong>: Your custom class willbe recognized as the proper type by <code>isinstance()</code> and<code>issubclass()</code> checks, as well as by third-partytype-checking tools such as <code>mypy</code>.</li><li><strong>Automatic Method Implementation</strong>: The abstractcontainer classes provide many methods automatically once you implementthe required abstract methods (see the examples of<code>Sequence</code>, <code>Mapping</code>, and <code>Set</code>above).</li><li><strong>Consistent Behavior</strong>: Your custom container willbehave like Python developers expect it to.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Software Design</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python Packaging: Managing Package Files, Compiling Extension Modules When Building a Wheel, and Uploading to PyPI</title>
    <link href="/2025/07/11/Python-Packaging-Managing-Package-Files-Compiling-Extension-Modules-When-Building-a-Wheel-and-Uploading-to-PyPI/"/>
    <url>/2025/07/11/Python-Packaging-Managing-Package-Files-Compiling-Extension-Modules-When-Building-a-Wheel-and-Uploading-to-PyPI/</url>
    
    <content type="html"><![CDATA[<h1 id="managing-package-files">Managing Package Files</h1><p>When creating a Python package, the location of files depends on yourproject structure.</p><h2 id="basic-pyproject.toml-configuration">Basic<code>pyproject.toml</code> Configuration</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build-system]</span><br><span class="hljs-attr">requires</span> = [<span class="hljs-string">&quot;setuptools&quot;</span>]<br><span class="hljs-attr">build-backend</span> = <span class="hljs-string">&quot;setuptools.build_meta&quot;</span><br><br><span class="hljs-section">[project]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;your-package&quot;</span>  <span class="hljs-comment"># PyPI name (can contain hyphens)</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">description</span> = <span class="hljs-string">&quot;A description of your-package&quot;</span><br><span class="hljs-attr">readme</span> = <span class="hljs-string">&quot;README.md&quot;</span><br><span class="hljs-attr">requires-python</span> = <span class="hljs-string">&quot;&gt;=2&quot;</span><br><span class="hljs-attr">license</span> = <span class="hljs-string">&quot;MIT&quot;</span><br><span class="hljs-attr">authors</span> = [<br>  &#123; name=<span class="hljs-string">&quot;Jane Doe&quot;</span>, email=<span class="hljs-string">&quot;jane.doe@example.com&quot;</span> &#125;<br>]<br><span class="hljs-attr">classifiers</span> = [<br>    <span class="hljs-string">&quot;Programming Language :: Python :: 2&quot;</span>,<br>    <span class="hljs-string">&quot;Programming Language :: Python :: 3&quot;</span>,<br>    <span class="hljs-string">&quot;Operating System :: OS Independent&quot;</span><br>]<br><span class="hljs-attr">dependencies</span> = [<br>  <span class="hljs-string">&quot;numpy&quot;</span><br>]<br><br><span class="hljs-section">[project.urls]</span><br><span class="hljs-attr">&quot;Homepage&quot;</span> = <span class="hljs-string">&quot;https://github.com/janedoe/my-package&quot;</span><br><span class="hljs-attr">&quot;Bug Tracker&quot;</span> = <span class="hljs-string">&quot;https://github.com/janedoe/my-package/issues&quot;</span><br></code></pre></td></tr></table></figure><h2 id="single-python-file-or-extension-module-as-module">Single PythonFile (or Extension Module) as Module</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">your-package/<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pyproject.toml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">your_package.py # or `your_package.cpython-312-x86_64-linux-gnu.so`, etc.</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tests/</span><br></code></pre></td></tr></table></figure><p>This single-file module will be copied into the site-packagesdirectory during installation.</p><blockquote><p>⚠️ This layout makes it difficult to include non-.py or non-extensiondata files (e.g., .json, .html). If you need to include such resources,use the folder-as-module approach described below.</p></blockquote><h2 id="folder-as-module">Folder as Module</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">your-package/<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pyproject.toml</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">your_package/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">module1.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">module2.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">subpackage1/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">module_a.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">subpackage2/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">module_b.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">utils/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">__init__.py</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">helpers.py</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">data/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">config.json</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">schema.sql</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">templates/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">default.html</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">README.md</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">tests/</span><br></code></pre></td></tr></table></figure><p>Each subfolder intended as a submodule must include an<code>__init__.py</code> file (even if empty).</p><p>Configure pyproject.toml:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-comment"># Importable package name (no hyphens allowed)</span><br><span class="hljs-attr">packages</span> = [<span class="hljs-string">&quot;your_package&quot;</span>]<br><span class="hljs-attr">package-dir</span> = &#123;<span class="hljs-string">&quot;your_package&quot;</span> = <span class="hljs-string">&quot;your_package&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>To include non-.py or non-extension data files (e.g., configs,templates):</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-attr">include-package-data</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-section">[tool.setuptools.package-data]</span><br><span class="hljs-attr">your_package</span> = [<br>    <span class="hljs-string">&quot;data/*.json&quot;</span>,<br>    <span class="hljs-string">&quot;templates/*.html&quot;</span>,<br>    <span class="hljs-string">&quot;static/**/*&quot;</span>,  <span class="hljs-comment"># Recursively include all files under `static`</span><br>]<br></code></pre></td></tr></table></figure><h1 id="compiling-extension-modules-when-building-a-wheel">CompilingExtension Modules When Building a Wheel</h1><p>To compile extension modules when building a wheel, implement acustom setuptools <code>build_ext</code> command.</p><h2 id="project-structure">Project Structure</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">your-package/<br><span class="hljs-bullet">  -</span> pyproject.toml<br><span class="hljs-bullet">  -</span> your<span class="hljs-emphasis">_package/</span><br><span class="hljs-emphasis">    - <span class="hljs-strong">__init__</span>.py</span><br><span class="hljs-emphasis">    - _</span>build<span class="hljs-emphasis">_ext_</span>command.py # Custom <span class="hljs-code">`build_ext`</span> command<br></code></pre></td></tr></table></figure><h2id="custom-build_ext-command-your_package_build_ext_command.py">Custom<code>build_ext</code> Command(<code>your_package/_build_ext_command.py</code>)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> setuptools.command.build_ext <span class="hljs-keyword">import</span> build_ext<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_compiler</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        subprocess.check_call([<span class="hljs-string">&quot;c++&quot;</span>, <span class="hljs-string">&quot;-v&quot;</span>], stdout=subprocess.DEVNULL)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuildExtCommand</span>(<span class="hljs-title class_ inherited__">build_ext</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_compiler():<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;c++ compiler not found!&quot;</span>)<br>        subprocess.check_call([<span class="hljs-string">&quot;c++&quot;</span>, <span class="hljs-string">&quot;mymodule.cpp&quot;</span>, <span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;mymodule.so&quot;</span>])<br>        <span class="hljs-built_in">super</span>().run()  <span class="hljs-comment"># Continue default build_ext flow (no-op)</span><br></code></pre></td></tr></table></figure><h2 id="pyproject.toml-configuration"><code>pyproject.toml</code>Configuration</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[tool.setuptools]</span><br><span class="hljs-comment"># Declare the package as non-ZIP-safe to ensure files are extracted during installation</span><br><span class="hljs-comment"># Required for custom build logic to execute properly</span><br><span class="hljs-attr">zip-safe</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment"># Bind the custom command to the `build_ext` phase</span><br><span class="hljs-attr">cmdclass</span> = &#123; <span class="hljs-string">&quot;build_ext&quot;</span> = <span class="hljs-string">&quot;your_package._build_ext_command.BuildExtCommand&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>If <code>BuildExtCommand</code> requires third-party libraries (e.g.,<code>pybind11</code>), declare them under<code>[build-system]</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build-system]</span><br><span class="hljs-attr">requires</span> = [<br>    <span class="hljs-string">&quot;setuptools&gt;=42&quot;</span>,<br>    <span class="hljs-string">&quot;wheel&quot;</span>,<br>    <span class="hljs-string">&quot;pybind11&gt;=2.6&quot;</span>,<br>    <span class="hljs-string">&quot;numpy&gt;=1.21&quot;</span>,<br>    <span class="hljs-string">&quot;requests&gt;=2.25&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><h1 id="uploading-to-pypi">Uploading to PyPI</h1><h2 id="install-required-tools">Install Required Tools</h2><p>First, install <code>build</code> and <code>twine</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install build twine<br></code></pre></td></tr></table></figure><h2 id="build-the-package">Build the Package</h2><p>Run the following command in your project's root directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m build<br></code></pre></td></tr></table></figure><p>This generates <code>.tar.gz</code> and <code>.whl</code> files inthe <code>dist/</code> folder.</p><h2 id="upload-to-pypi">Upload to PyPI</h2><p>Use <code>twine</code> to upload your package. Navigate to the<code>dist/</code> directory and run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">twine upload dist/*<br></code></pre></td></tr></table></figure><p>You'll be prompted for your PyPI API token. Refer to the <ahref="https://packaging.python.org/latest/guides/publishing-packages/">officialPyPI documentation</a> for details.</p><h2 id="verify-publication">Verify Publication</h2><p>After uploading, check PyPI to see if your package is listed: <ahref="https://pypi.org/">https://pypi.org/</a></p><p>Search for your package name-it may take a few minutes to appear.</p>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Managing Development Environments with Conda</title>
    <link href="/2025/07/10/Managing-Development-Environments-with-Conda/"/>
    <url>/2025/07/10/Managing-Development-Environments-with-Conda/</url>
    
    <content type="html"><![CDATA[<p>When juggling multiple data science or machine learning projects,maintaining isolated, reproducible environments is crucial.<strong>conda</strong> has emerged as the <em>de facto standard</em> inPython for managing such environments. But <em>why</em> should you useconda over alternatives like <code>venv</code>, <code>poetry</code>,<code>pipenv</code>, system package managers like <code>apt</code>, orcontainer tools like Docker? Let's find out - and get you set up!</p><h2 id="why-conda">Why Conda?</h2><p>Conda offers several key advantages:</p><ul><li>Beyond Python Packages: Unlike <code>venv</code>,<code>pipenv</code>, or <code>poetry</code>, conda handles both Pythonpackages <em>and</em> complex system-level dependencies, such as CUDAtoolkits for GPU acceleration, C/C++ compiler toolchains, and othercommand-line utilities.</li><li>No Admin Required: With system-wide package managers like<code>apt</code>, you'll often need root privileges to install software.In comparison, Conda lets you install everything in user-space.</li><li>Better than Docker for Rapid Iteration: While Docker excels atpackaging for production, it often means verbose Dockerfiles, long buildtimes, and a less pleasant development experience. Conda offers alightweight, rapid way to set up and switch between environments on yourlocal machine.</li></ul><h2 id="installing-conda-miniconda">Installing Conda (Miniconda)</h2><p>The preferred way to get started is with Miniconda, a minimal condainstaller. Here's a step-by-step guide:</p><p>Create an Installation Directory:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/miniconda3<br></code></pre></td></tr></table></figure><p>Download the Miniconda Installer:</p><ul><li>Linux x86_64:<code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh</code></li><li>Linux aarch64:<code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O ~/miniconda3/miniconda.sh</code></li><li>Linux s390x:<code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-s390x.sh -O ~/miniconda3/miniconda.sh</code></li><li>Linux ppc64le:<code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-ppc64le.sh -O ~/miniconda3/miniconda.sh</code></li><li>Linux x86:<code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86.sh -O ~/miniconda3/miniconda.sh</code></li><li>Linux armv7l:<code>wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-armv7l.sh -O ~/miniconda3/miniconda.sh</code></li><li>macOS arm64:<code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o ~/miniconda3/miniconda.sh</code></li><li>macOS x86_64:<code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o ~/miniconda3/miniconda.sh</code></li><li>macOS x86:<code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86.sh -o ~/miniconda3/miniconda.sh</code></li></ul><p>Run the Installer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 &amp;&amp; \<br>    <span class="hljs-built_in">rm</span> ~/miniconda3/miniconda.sh &amp;&amp; \<br>    <span class="hljs-built_in">source</span> ~/miniconda3/bin/activate &amp;&amp; \<br>    conda init --all<br></code></pre></td></tr></table></figure><p>What does this do?</p><ul><li><code>-b</code>: Run in batch (no interactive prompts)</li><li><code>-u</code>: Unpack the installer</li><li><code>-p ~/miniconda3</code>: Install into this directory</li><li><code>&amp;&amp; rm ...</code>: Clean up the installer file</li><li><code>&amp;&amp; source ~/miniconda3/bin/activate</code>: Activateconda</li><li><code>&amp;&amp; conda init --all</code>: Set up conda for yourshell (e.g., bash/zsh/fish)</li></ul><h2 id="managing-conda-environments">Managing Conda Environments</h2><p>List all environments:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><p>Remove an environment:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> remove --name ENV_NAME<br></code></pre></td></tr></table></figure><p>Replace <code>ENV_NAME</code> with the actual name (e.g.,<code>myenv</code>). This will delete the environment and all itsfiles.</p>]]></content>
    
    
    <categories>
      
      <category>Environments</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用汉语拼音解读国际音标，快速读出任何语言的发音</title>
    <link href="/2025/06/30/%E7%94%A8%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E8%A7%A3%E8%AF%BB%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87%EF%BC%8C%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%87%BA%E4%BB%BB%E4%BD%95%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%91%E9%9F%B3/"/>
    <url>/2025/06/30/%E7%94%A8%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E8%A7%A3%E8%AF%BB%E5%9B%BD%E9%99%85%E9%9F%B3%E6%A0%87%EF%BC%8C%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%87%BA%E4%BB%BB%E4%BD%95%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%91%E9%9F%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>语言是用来交流的，不是用来炫耀、排斥、孤立的。</strong></p></blockquote><p>你是否遇到过这种情况？</p><ul><li>在土耳其旅游，想对店员说一句“Teşekkürederim”，但看着字母完全不会读？</li><li>在冰岛听到地名“Eyjafjallajökull”，直接放弃尝试？</li><li>想学几句格鲁吉亚语、阿拉伯语，但连音标都看不懂？</li></ul><p>我们大多数人只学过<strong>汉语拼音和英语</strong>，但国际音标（IPA）里很多符号看起来像天书。其实，它们大多能用拼音的发音“近似替代”——<strong>不追求100%准确，但能让你开口，对方听得懂！</strong></p><h2 id="辅音">辅音</h2><ul><li><code>ʔ</code> - 汉语拼音a</li><li><code>ʕ</code> - 汉语拼音à，加强喉咙发声出气，降低音调<ul><li>阿拉伯语<code>ع</code></li><li>希伯来语<code>ע</code></li></ul></li><li><code>p</code><ul><li>突厥语、日耳曼语系（英语、德语等）：汉语拼音p（清辅音/送气音）</li><li>罗曼语系（法语、西班牙语等）：汉语拼音b（浊辅音/不送气音）</li></ul></li><li><code>ɸ</code> - 汉语拼音f</li><li><code>ɲ</code> - 汉语拼音ni<ul><li>西班牙语<code>ñ</code></li></ul></li><li><code>t</code><ul><li>突厥语、日耳曼语系（英语、德语等）：汉语拼音t（清辅音/送气音）</li><li>罗曼语系（法语、西班牙语等）：汉语拼音d（浊辅音/不送气音）</li></ul></li><li><code>ɳ</code> - 汉语拼音na</li><li><code>ɾ</code> - 急促的汉语拼音l，快速往后收舌头<ul><li>日语罗马音<code>r</code></li><li>韩语<code>ㄹ</code>（常音译为"r"或"l"）</li><li>突厥语<code>r</code></li><li>西班牙语<code>r</code></li></ul></li><li><code>ɫ</code> - 汉语拼音ou</li><li><code>q</code>, <code>ɢ</code> - 汉语拼音ga<ul><li>突厥语<code>q</code></li><li>阿拉伯语<code>ق</code>（常音译为"q"）</li><li>希伯来语<code>ק</code></li></ul></li><li><code>k</code><ul><li>突厥语、日耳曼语系（英语、德语等）：汉语拼音k（清辅音/送气音）</li><li>罗曼语系（法语、西班牙语等）：汉语拼音g（浊辅音/不送气音）</li></ul></li><li><code>ħ</code> - 汉语拼音ha，加强喉咙发声出气，舌头往后卷，提高音调<ul><li>阿拉伯语<code>ح</code></li><li>希伯来语<code>ח</code>（发音之一）</li></ul></li><li><code>x</code>, <code>χ</code> -汉语拼音he，加强喉咙发声出气，降低音调<ul><li>突厥语<code>x</code></li><li>阿拉伯语<code>خ</code>（常音译为"kh"）</li><li>希伯来语<code>ח</code>（发音之一，常音译为"ch"）</li><li>希伯来语<code>כ</code>（发音之一）</li><li>俄语<code>х</code></li><li>西班牙语<code>j</code></li><li>西班牙语<code>x</code>（发音之一）</li><li>德语<code>ch</code>（发音之一）</li></ul></li><li><code>ɣ</code>, <code>ʁ</code> -汉语拼音e，加强喉咙发声出气，降低音调<ul><li>突厥语<code>ğ</code></li><li>阿拉伯语<code>غ</code>（常音译为"gh"）</li><li>法语<code>r</code></li><li>德语<code>r</code></li></ul></li><li><code>dʒ</code>, <code>dʑ</code>, <code>tɕ</code> - 汉语拼音j</li><li><code>ɕ</code>, <code>ç</code>, <code>ɬ</code> - 汉语拼音x<ul><li>德语<code>ch</code>（发音之一）</li></ul></li><li><code>ʈʂ</code>, <code>ɖʐ</code> - 汉语拼音zh</li><li><code>ʃ</code>, <code>ʂ</code> - 汉语拼音sh</li><li><code>ʒ</code>, <code>ʐ</code> - 汉语拼音r</li><li><code>r</code> -颤音，发不出来用上面的<code>ɾ</code>、<code>ɣ</code>、<code>ʁ</code>完美替换。</li><li><code>dz</code> - 汉语拼音z</li><li><code>ts</code> - 汉语拼音c</li><li><code>ʝ</code>, <code>ʎ</code>, <code>ʑ</code> - 汉语拼音yà<ul><li>西班牙语<code>ll</code></li></ul></li><li><code>β</code> - 汉语拼音v<ul><li>西班牙语<code>b</code>（发音之一）</li><li>西班牙语<code>v</code>（发音之一）</li></ul></li><li><code>ʋ</code> - 介于汉语拼音v和w之间</li></ul><h2 id="元音">元音</h2><ul><li><code>ɑ</code> - 汉语拼音a</li><li><code>ʌ</code>, <code>ɒ</code> - 汉语拼音à</li><li><code>ɪ</code>, <code>ɛ</code> - 汉语拼音ài</li><li><code>æ</code> - 美式英语apple的a</li><li><code>o</code>, <code>ɞ</code> - 汉语拼音ou</li><li><code>ɔ</code> - 汉语拼音ò</li><li><code>ʏ</code>, <code>ø</code>, <code>œ</code> -介于汉语拼音o和ü之间，圆口<ul><li>突厥语<code>ö</code></li><li>德语<code>ö</code>（常音译为"oe"）</li></ul></li><li><code>ə</code>, <code>ʊ</code>, <code>ɤ</code> - 汉语拼音e</li><li><code>ɨ</code>, <code>ʉ</code>, <code>ɯ</code> -介于汉语拼音e和ü之间，扁口<ul><li>日语<code>う/ウ</code>（常音译为"u"）</li><li>突厥语<code>ı</code></li></ul></li><li><code>i</code> - 汉语拼音i</li><li><code>u</code> - 汉语拼音u</li><li><code>y</code> - 汉语拼音ü</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linguistics and Literature</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Lessons learned from Master&#39;s thesis</title>
    <link href="/2024/08/23/Lessons-learned-from-master-s-thesis/"/>
    <url>/2024/08/23/Lessons-learned-from-master-s-thesis/</url>
    
    <content type="html"><![CDATA[<ul><li>Firmly define the research topic.</li><li>Do literature research based on keywords, never limit the scope ofjournals and conferences, and continue literature research even afterstarting the project.</li><li>Collect baselines and benchmarks as soon as possible; make sure thebaselines and benchmarks are downloaded and can be run.</li><li>Focus on the NOVELTY of the core aspects; don't be perfect, anddon't support all cases or possibilities.</li><li>Find a few small examples that prove the power of your novelty, andemphasize it in both the paper and the presentation.</li><li>Avoid designing overly complex rule-based systems.</li><li>With GenAI, aim to get a prototype and an illustrative presentationout as soon as possible. This will allow you to collect feedback early,empowering you to make necessary adjustments and improvements.</li><li>Use functional programming architecture that is easy to test.Conduct thorough unit testing, document the coverage, and leave tracesof development step by step. This will provide a solid foundation andinstill confidence in the robustness of your research.</li><li>Insert breakpoints where you're unsure how to code. Figure out whatto do when encountering them, and refine the unit tests in theprocess.</li><li>Don't be perfect; start writing your thesis when you're almostdone.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Talking back and confidence</title>
    <link href="/2024/07/07/Talking-back-and-confidence/"/>
    <url>/2024/07/07/Talking-back-and-confidence/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>一个人在听到建议的时候喜欢顶嘴，有叛逆心理，某种意义上是想要证明自己，挽回一些自尊与自信，但又暂时没有强大的以自身实力为基础的自信。面对这种情形，我们虽然会不太舒服，但最好不要顶回去，或者是尝试说服对方，这些只会让对方感到更不愉快，进而也让自己感到更不愉快，既不治标也不治本。更好的做法是去承受，去服输，去退一步，不争了，而是借对方的某个观点转移话题——给对方认可、自信与陪伴，和对方一起去进步，去提升，去做需要做的事情。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>A person who likes to talk back when they hear a suggestion has arebellious mentality and, in a sense, wants to prove themselves toregain some self-esteem and self-confidence, but for the time being,does not have a robust and deep-rooted self-confidence based on theirstrength. Although we will be uncomfortable in this situation, it isbest not to talk back or try to persuade the other party. These willonly make the other party feel more unpleasant and, in turn, makethemselves feel more unpleasant - solving neither the symptoms nor theroot cause of the problem. The better thing to do is to suffer, to givein, to step back, not to argue, but to take advantage of one of theother person's points to change the subject - to give the other personrecognition, self-confidence, and companionship, and together with theother person to progress, to improve, to do what needs to be done.</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Some thoughts about chatting</title>
    <link href="/2024/07/05/Some-thoughts-about-chatting/"/>
    <url>/2024/07/05/Some-thoughts-about-chatting/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>关于聊天的一点思考：</p><ul><li>开始之前预定一个时间，设置一个时间上的边界感；时间上没有边界感容易让我们没话找话，寻找一些无聊的话题，让对方失去兴趣，甚至不断地因此而擦出矛盾来。</li><li>对方做得不对，我们要简明扼要地点出来，点到为止，然后换下一个话题；切忌在这种情况下，主动地理论、解释，尝试说服对方。</li></ul><hr /><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Some thoughts about chatting:</p><ul><li>Before starting, arrange a time and set a sense of time boundaries.Lacking such a sense makes us constantly look for boring topics when wehave nothing to say, which may lead to the other party losing interestand result in conflicts.</li><li>If the other party is not doing right, we have to point it outsuccinctly, avoid being overly verbose, and then promptly change to thenext topic; do not take the initiative to theorize, explain, and try topersuade the other party in this situation.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pay attention to the other person&#39;s easily overlooked emotional state when chatting online</title>
    <link href="/2024/07/02/Pay-Attention-to-the-Other-Person-s-Easily-Overlooked-Emotional-State-When-Chatting-Online/"/>
    <url>/2024/07/02/Pay-Attention-to-the-Other-Person-s-Easily-Overlooked-Emotional-State-When-Chatting-Online/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>线上聊天一定要关注对方容易被忽视的情绪状态。</p><p>与线下聊天相比，线上聊天少了很多关键的nonverbalcontext，其中就包括对方的情绪状态。线上聊天还是在和人说话，而不是在和人工智能说话，人的情绪状态会对聊天的走向产生极大的影响。但不是所有的人都擅于、习惯于或想要表达情绪。在这种情况下，我们极易在线上聊天的过程中，因为对方在某种我们尚不清楚的情绪的影响下，不按我们的预期聊天，而让我们做出很多误解误判。为了避免由此产生的一些不愉快的情形，我们可以：</p><ul><li>在聊天一开始的时候就去了解对方的情绪状态，如可以直接在寒暄的过程中问。</li><li>在聊天进行的过程中时刻去关注对方的情绪状态。包括时不时主动问问对方感觉如何（哪怕对方没有任何反馈或暗示），绝不能自己一个人旁若无人滔滔不绝地讲。同时也要清楚地意识到，对方的任何表达都有可能是心境的投射。我们要从中捕获尽可能多的信息来。</li></ul><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Pay attention to the other person's easily overlooked emotional statewhen chatting online.</p><p>Compared to offline chatting, online chatting has a much lesscritical nonverbal context, including the other person's emotionalstate. Online chatting is still talking to a human being, not an AI, anda person's emotional state can have a huge impact on the direction ofthe chat. But not all people are good at, used to, or want to expressemotions. In this case, it is very easy for us to make a lot ofmisunderstandings and misjudgments during an online chat because theother person, under the influence of some emotion we are not yet awareof, does not chat as we expect. These misunderstandings cansignificantly alter the course of the conversation, leading to potentialconflicts or misinterpretations. In order to avoid some unpleasantsituations arising from this, we can:</p><ul><li>At the beginning of the chat, it's crucial to understand the otherparty's emotional state. This can be achieved by asking directly duringthe initial small talk.</li><li>When chatting, always consider the other party's emotional state.This includes taking the initiative to ask the other person from time totime how they are feeling (even if the other person does not have anyfeedback or hints) and never speaking on your own like there is no oneelse. It's also important to realize that any expression of the otherperson may be a projection of their state of mind. We need to capture asmuch information from it as possible.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Show, not tell</title>
    <link href="/2024/06/20/Show-not-tell/"/>
    <url>/2024/06/20/Show-not-tell/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>导师在告诉我如何回答reviewers comments的时候曾经说过：“show, nottell”。意思是面对他们希望我们加baseline和metric的comments，在点到我们要加上他们之后，最好展现一些初步结果（比如说在部分数据集上评测那些baseline和metric），而不是一味地说服对方我们之后一定能加上去。</p><p>感觉这种思想用在日常生活中的说服上也是很值得借鉴的：在点出一件事之后，如果对方认可了，更好的做法是以身作则去示范他或者是展现自己怎么想，而不是一味地去说服对方应该怎么怎么做。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>My mentor once said "show, not tell" when he told me how to answerreviewers comments. The idea is that when faced with comments that theywant us to add baselines and metrics to, it is better to show somepreliminary results (e.g., evaluating those baselines and metrics on apart of the dataset) after pointing out that we want to add them to,instead of just convincing the other party that we will definitely beable to add them afterward.</p><p>I feel that this idea is also useful for persuasion in daily life:after pointing out something, if the other person approves of it, it'sbetter to set an example by demonstrating what he thinks or showing whathe thinks, rather than just trying to convince the other person of whathe should do.</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Our minds are, indeed, the minds of engineers</title>
    <link href="/2024/06/19/Our-minds-are-indeed-the-minds-of-engineers/"/>
    <url>/2024/06/19/Our-minds-are-indeed-the-minds-of-engineers/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>我们的思维，的确是工程师的思维。这体现在我们日常生活的方方面面：不论是开车，还是做菜，还是写代码，还是制定计划，我们总是会非常关注计划，关注流程，关注优化，关注总结，关注反馈；而我们的头脑没有那么敏捷，不擅长理论创新——我们是罗马人，而非希腊人。</p><p>我们不应该误入理论创新的歧途。是的，我们确实对理论很感兴趣，但是那种兴趣不是形而上的对理论本身的兴趣，而是对理论有何价值以及如何落地的兴趣。</p><p>当下的热点是什么？我们应该如何结合某个具体的工业背景，有效而创造性地运用那些理论解决现实问题。这应该是我们的主业。而去研究理论，并思考如何创造性地使用它们，是我们的副业与兴趣爱好。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>Our minds are, indeed, the minds of engineers. This is reflected inevery aspect of our daily lives: whether we are driving, cooking,writing code, or making plans, we will always pay great attention to theplan, to the process, to the optimization, to the summary, and to thefeedback; and our minds are not as agile and not as good at theoreticalinnovation - we are Romans, not Greeks!</p><p>We shouldn't get sidetracked into theoretical innovation. Yes, we dohave an interest in theory, but that interest is not metaphysicalinterest in the theory itself, it is interest in what the theory isworth and how it can be implemented.</p><p>What are the hot topics of the moment? How should we effectively andcreatively apply those theories to solve real-world problems in aspecific industrial context. That should be our main business. Studyingtheories and thinking about how to use them creatively is our sideproject and hobby.</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Financial strategies during master&#39;s and PhD degrees (tentative)</title>
    <link href="/2024/06/16/Financial-strategies-during-master-s-and-PhD-degrees-tentative/"/>
    <url>/2024/06/16/Financial-strategies-during-master-s-and-PhD-degrees-tentative/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><ul><li>记录每月工资，跟踪每月固定必需开销（房租、订阅服务等），分配每月可变必需开销（食品百货等）、可变可选开销（衣物、旅行等）与储蓄。<ul><li>储蓄包括银行的储蓄账户和各种理财产品。<ul><li>对我们而言，各种理财产品的职责首先是对抗通货膨胀的<strong>储蓄账户</strong>，而非盈利的手段——我们是斗不过高频交易算法的。不得花过多的时间经历关注理财产品的价格变化，严格禁止各种赌博心理。</li></ul></li></ul></li><li>充分利用各种税收和学费资助的“免费”服务：<ul><li>规划好行程，充分利用公共交通，少打车。</li><li>充分利用学校提供的医疗保险；</li><li>通过学校订购的在线课程，不断提升与科研需求相辅相成的实用技能，如网页前端开发、数据科学等，并获取相应证书，既提升我们欠缺的implementation能力，又方便找实习与工作等。</li></ul></li><li>做好灵活的食品百货采货计划。<ul><li>关注超市传单；</li><li>书包中常备购物袋；</li><li>适量减少红肉采货量，适量增加鱼、蛋白粉、谷物、水果、蛋、奶采货量。</li></ul></li></ul><hr /><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><ul><li>Record monthly paychecks, track monthly fixed essential expenses(rent, subscription services, etc.), and allocate monthly variableessential expenses (food, groceries, etc.) and variable optionalexpenses (clothing, travel, etc.) with savings.</li><li>Savings include savings accounts in banks and various financialproducts.</li><li>For us, the duty of various financial products is, first andforemost, an inflation-fighting <strong>savings account</strong>, not ameans of profit - we can't beat high-frequency trading algorithms. Wemust not spend excessive time paying attention to price changes infinancial products and strictly prohibit all kinds of gamblingmentality.</li><li>Take advantage of tax and tuition assistance "freebies":</li><li>Plan trips well, use public transportation, and take fewercabs.</li><li>Take advantage of the school's health insurance;</li><li>Through online courses purchased by the school, improve practicalskills that complement research needs, such as web front-enddevelopment, data science, etc., and obtain the appropriate certificatesto improve our lack of implementation skills and facilitate the searchfor internships and jobs.</li><li>Make a flexible food and grocery procurement plan.</li><li>Pay attention to supermarket flyers;</li><li>Always carry a shopping bag in your bag;</li><li>Reduce the amount of red meat and increase the amount of fish,protein powder, cereals, fruits, eggs, and milk.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>On doing things with others</title>
    <link href="/2024/05/30/On-Doing-Things-with-Others/"/>
    <url>/2024/05/30/On-Doing-Things-with-Others/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><p>和别人一起做事的时候，如果遇到了某件说好了要做的事别人不愿意开始做，我们不应该面露难色，变得焦虑、愤怒；我们更好的做法应该是给对方一个善意的提醒，然后重新规划时间——这时候规划的时间必须具体，不能是大而化之的“之后”“再过几天”等。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><p>When doing things with others, if we encounter a certain thing thatwe said we would do that others are not willing to start doing, weshould not look embarrassed, become anxious and angry; our betterapproach should be to give each other a kind reminder, and thenre-planning time - this time the planning time must be specific, not abig and generalized "afterward," "a few more days," etc.</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Some thoughts on maintaining fitness habits and improving physical fitness in the future</title>
    <link href="/2024/02/29/Some-thoughts-on-maintaining-fitness-habits-and-improving-physical-fitness-in-the-future/"/>
    <url>/2024/02/29/Some-thoughts-on-maintaining-fitness-habits-and-improving-physical-fitness-in-the-future/</url>
    
    <content type="html"><![CDATA[<h1 id="original-chinese">Original (Chinese)</h1><h2id="关于今后健身习惯的保持与身体素质的提升的若干思考">关于今后健身习惯的保持与身体素质的提升的若干思考</h2><p>在今后漫长的人生之路上，我们要让健身成为一种像散步、跑步、爬山一样深入我们日常生活并且随时都有心情做的消遣活动。</p><p>结合我们初高中时期跑步、跳绳、坐位体前屈通过强制性的体育课逐渐成为我们习惯去做并能在不断进步中获得成就感的活动这样一段经历，<strong>我们也可以充分利用我们在UBC的最后一学期，每一次去学校学习时，在离开之前尽可能去一趟健身房——且不论时间长短，但还是尽可能去一趟</strong>。近日的实践证明，在脑力劳动之后，这样的“体力劳动”在有效缓解我们精神上的疲惫感的同时，又有助于提升我们的身体素质，可谓一举两得。</p><p>与之相伴的另一个问题是如何在坚持健身的同时在力量上取得突破。如果有人陪伴我们锻炼，那么这将不是一个难题。但当我们一个人锻炼的时候，我们又将怎么做呢？我们或许也可以从初高中时期独自练习跑步、跳绳、坐位体前屈的经历中获得灵感。</p><p>首先，我们必须有耐心。进步必定是一个漫长的过程，这个过程急不得。</p><p>其次，我们可以做到以巩固为主，提升为辅——在一段较长的时间段内，尽可能做到不倒退，稳扎稳打，保持并巩固当前来之不易的训练成果。为此，我们需要记录我们做各项锻炼是我们能接受的最大强度，从而做到每次锻炼时心中有数。</p><p>最后，还要时不时像扰动一样尝试突破自己能接受的最大强度。每一次的突破，哪怕只能做一两下，都将成为我们下一阶段巩固的目标。</p><h1 id="translation-deepl.com">Translation (DeepL.com)</h1><h2id="some-thoughts-on-maintaining-fitness-habits-and-improving-physical-fitness-in-the-future">Somethoughts on maintaining fitness habits and improving physical fitness inthe future</h2><p>In the long road of life ahead, we want to make fitness a pastimethat is as deep into our daily lives as walking, running, and hiking andthat we are always in the mood to do.</p><p>Combined with our experiences in junior and senior high school, whererunning, jumping rope, and seated forward bends became habitual throughmandatory gym classes, and we gained a sense of accomplishment throughcontinuous improvement,<strong>we can also make the most of our lastsemester at UBC, and make it a point to go to the gym every time we goto school before we leave - regardless of the length of time</strong>.Recently, it has been proven that this kind of "physical labor"effectively relieves our mental fatigue and improves our physicalfitness after mental work, so it is a double win.</p><p>Another issue with this is how to make a breakthrough in strengthwhile staying fit. If we have someone to accompany us in our workouts,then this will not be a problem. But what will we do when we work outalone? We might also draw inspiration from our middle and high schoolyears when we practiced running, jumping rope, and seated forward bendsalone.</p><p>First, we must be patient. Progress is bound to be a long processthat cannot be rushed.</p><p>Secondly, we can do this by consolidating and improving - as much aspossible over a longer period- without regressing, building steadily,maintaining and consolidating our current hard-won training gains. To dothis, we need to keep track of the maximum intensity we are comfortablewith each workout so that we can be mindful of what we do each time wework out.</p><p>Finally, from time to time, we must also try to break through themaximum intensity that we can accept, just like a perturbation. Eachbreakthrough, even if we can only do one or two reps, will be our goalfor the next consolidation phase.</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Asynchronous Functional Reactive Programming for GUIs (The Elm Paper)</title>
    <link href="/2024/01/24/Paper-Reading-Asynchronous-Functional-Reactive-Programming-for-GUIs/"/>
    <url>/2024/01/24/Paper-Reading-Asynchronous-Functional-Reactive-Programming-for-GUIs/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for the PL Reading Group. The originalpaper can be found <ahref="https://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf">here</a>.</p><h1 id="introduction">Introduction</h1><ul><li>Functional reactive programming (FRP) integrates pure functionalprogramming with time-varying values (signals), useful for GUIs.</li><li>FRP allows modeling of complex, time-dependent relationships in adeclarative style.</li><li>Previous FRP languages faced inefficiencies, including unnecessaryrecomputation and global delays.</li><li>Most FRP languages treat signals as continuously changing, leadingto excessive sampling and recomputation.</li><li>Elm, an FRP language, treats all signals as discrete, reducingunnecessary recomputation by detecting unchanged signals.</li><li>In Elm, signals change only with discrete events (like user inputs),necessitating program recomputation.</li><li>Traditional FRP systems process events synchronously, causing delaysif event processing is time-consuming.</li><li>Synchronous processing in GUIs can lead to unresponsiveness duringlong computations.</li><li>Elm introduces an abstraction for specifying asynchronouscomputations within FRP.</li><li>This feature in Elm allows concurrent execution of long-runningcomputations and other events, maintaining GUI responsiveness.</li><li>Elm's approach to asynchronous computation in FRP is novel and isformalized in its language semantics.</li><li>Elm restricts signal use for efficient implementation, similar toprevious efficient FRP systems.</li></ul><h1 id="core-language">Core Language</h1><ul><li>The core language of Elm, termed "FElm" (Featherweight Elm), isintroduced, outlining Elm's key abstractions.</li><li>FElm is a simply-typed functional language with a set of reactiveprimitives.</li><li>It differentiates between simple types (like unit and int, andfunctions from simple types to simple types) and signal types (like<code>Signal[T]</code> and functions producing signal types).</li><li>Signals are conceptualized as streams of values, and input signalsare required to have a default value.</li><li>Signal transformations and combinations are achieved using<code>lift_n</code> primitives, which apply functions to the currentvalues of signals.</li><li>The <code>foldp</code> primitive performs computations on bothcurrent and previous signal values, acting like a fold operation on asignal.</li><li>An example of <code>foldp</code> is counting key presses using asignal that indicates the latest key pressed.</li><li>FElm's type system prohibits signals of signals to avoid potentialcomputational inefficiencies and inconsistencies.</li><li>FElm programs evaluate in two stages: functional constructs arefirst evaluated, resulting in an intermediate term showing signalconnections; then signals are evaluated in a push-based manner as newinput values arrive.</li><li>Signal terms are represented as directed acyclic graphs, where nodesrepresent source nodes, <code>liftn</code> terms, and <code>foldp</code>terms.</li><li>An event occurs when a source node produces a new value, with aglobal event dispatcher ensuring total order and non-simultaneity ofevents.</li><li>Whenever an event occurs, all source nodes are notified by theglobal event dispatcher: the one source node relevant to the eventproduces the new value, and all other source nodes generate a specialvalue noChange v, where v is the current (unchanged) value of thesignal.</li><li>Nodes perform computations on signal values, with synchronousconceptual computation but pipelined execution for efficiency.</li><li>The <code>async</code> primitive allows for specifying asynchronouscomputations, enabling separation of long-running computations andmaintaining GUI responsiveness. An <code>async</code> node creates a newsource node. When an <code>async</code> node produces a value, it istreated like an event from the external environment associated from thatnew source node.</li><li><code>async</code> effectively divides the synchronous graph into aprimary subgraph and multiple secondary subgraphs, maintaining eventorder within each subgraph but not globally, enhancing responsivenesswithout strict global event ordering.</li></ul><h1 id="building-guis-with-elm">Building GUIs with Elm</h1><ul><li>Elm encourages separation between reactive code and GUI layout code,using a purely functional and declarative approach for graphicallayout.</li><li>Elm supports various base values, including strings, numbers, time,tuples, and graphical values like Elements and Forms.</li><li>Libraries in Elm offer data structures like options, lists, sets,and dictionaries.</li><li>Elm provides input support from devices like mouse, keyboard, touch,and also handles window attributes and network communication viaHTTP.</li><li>It supports JSON, Markdown for text creation, let-polymorphism,recursive simple types, type inference, extensible records, and a modulesystem.</li><li>Elm has two major graphical primitives: elements and forms.<ul><li>Elements are rectangles that can contain text, images, orvideos.</li><li>Forms allow for non-rectangular shapes and text, including arbitrary2D shapes with texture and color enhancements.</li></ul></li><li>Reactive GUIs in Elm interact with user input and environmentalevents using primitive signals.</li><li>Elm's signal identifiers include Mouse.position, Mouse.clicks,Window.dimensions, Time.every, Time.fps, Touch.touches, Touch.taps,Keyboard.keysDown, Keyboard.arrows, and Keyboard.shift.</li><li>Input components like text boxes, buttons, and sliders arerepresented as pairs of signals: an element for the graphical componentand a value for the input.</li><li>The <code>Input.text</code> function in Elm allows for the creationof text input components, returning a pair of signals for the graphicalinput field and the current user input.</li></ul><h1 id="other-links">Other Links</h1><ul><li><ahref="https://package.elm-lang.org/packages/evancz/automaton/latest/Automaton">Understandingthe Automaton</a></li><li>Time-Travel Debugging (when Elm was still based on FRP)<ul><li><ahref="https://web.archive.org/web/20160206080252/http://elm-lang.org/blog/interactive-programming">InteractiveProgramming</a></li><li><ahref="https://web.archive.org/web/20160503091931/http://debug.elm-lang.org/">Elm’sTime Traveling Debugger</a></li><li>https://web.archive.org/web/20160504183927/http://elm-lang.org/</li><li><a href="https://www.youtube.com/watch?v=lK0vph1zR8s">Bret Victorstyle reactive debugging ‒ Laszlo Pandy</a></li><li><a href="https://www.youtube.com/watch?v=PUv66718DII">Bret Victor -Inventing on Principle</a></li></ul></li><li><ahref="https://www.youtube.com/live/vHI7XlgmYCg?si=wWyHsFa6P6FHOZbw&amp;t=2324">Reasonfor a farewell to FRP: learning curve as Elm went mainstream</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>PL Reading Group</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Functional Array Programming</title>
    <link href="/2024/01/04/Functional-Array-Programming/"/>
    <url>/2024/01/04/Functional-Array-Programming/</url>
    
    <content type="html"><![CDATA[<h1id="functional-programming-in-r-focus-on-usability-contains-detailed-description-of-removing-for-loops">FunctionalProgramming in R (focus on <em>usability</em>, contains detaileddescription of <em>removing for loops</em>)</h1><ul><li>http://modern-rstats.eu/functional-programming.html</li><li>https://appsilon.com/functional-programming-in-r-part-1/</li><li>http://adv-r.had.co.nz/Functional-programming.html</li><li>https://www.stat.umn.edu/geyer/8054/notes/functional.html</li><li>https://www.reddit.com/r/Rlanguage/comments/vxsf4p/is_r_a_functional_programming_language/</li></ul><h1id="functional-programming-in-python-focus-on-usability-contains-detailed-description-of-removing-for-loops-broadcasting-persistent-ndarrays-jax-and-representing-multimodal-data-using-records-and-trees">FunctionalProgramming in Python (focus on <em>usability</em>, contains detaileddescription of <em>removing for loops</em>, <em>broadcasting</em>,<em>persistent ndarrays (JAX)</em> and <em>representing multimodal datausing records and trees</em>)</h1><ul><li>https://realpython.com/numpy-array-programming/</li><li>https://jax.readthedocs.io/en/latest/jax-101/07-state.html</li><li>https://data-apis.org/</li><li>https://github.com/docarray/docarray</li><li>https://jax.readthedocs.io/en/latest/pytrees.html</li></ul><h1id="scientific-computing-in-ocaml-focus-on-ocaml-comprehensive-not-necessarily-pure">ScientificComputing in OCaml (focus on <em>OCaml</em>, comprehensive, notnecessarily pure)</h1><ul><li>https://link.springer.com/book/10.1007/978-3-030-97645-3</li></ul><h1id="functional-array-programming-per-se-focus-on-theory---rank-polymorphism-and-performance">FunctionalArray Programming Per Se (focus on <em>theory</em> - <em>rankpolymorphism</em> and <em>performance</em>)</h1><ul><li>https://github.com/f5devcentral/shapeRank</li><li>https://prl.khoury.northeastern.edu/blog/2017/05/04/rank-polymorphism/</li><li>https://futhark-lang.org/publications.html</li></ul><h1 id="related-topics">Related Topics</h1><h2 id="arrays-vs.-linked-lists-in-functional-programming">Arrays vs.Linked Lists in Functional Programming</h2><ul><li>https://www.reddit.com/r/haskell/comments/hvxqzz/is_it_unfunctional_to_use_direct_access_arrays/</li></ul><h2 id="data-access-patterns">Data Access Patterns</h2><ul><li>http://www.nic.uoregon.edu/~khuck/ts/acumem-report/manual_html/ch05s02.html</li></ul>]]></content>
    
    
    <categories>
      
      <category>Software Design</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Strategies, Tactics, and Mindset Learned from &quot;The Ph.D. Grind&quot;</title>
    <link href="/2023/12/31/Strategies-Tactics-and-Mindset-Learned-from-The-Ph-D-Grind/"/>
    <url>/2023/12/31/Strategies-Tactics-and-Mindset-Learned-from-The-Ph-D-Grind/</url>
    
    <content type="html"><![CDATA[<p>Note: This is a Paper Reading for Philip Guo's famous book "The Ph.D.Grind: A Ph.D. Student Memoir."</p><hr /><h1 id="main-strategies">Main Strategies</h1><ul><li>Be careful when choosing advisors and collaborators.</li><li>Consider the background and incentives of the advisors andcollaborators, as evidenced by recent papers, grant applications, andfuture aspirations.</li><li>Think about what you want to do, what that work is like, and howthat aligns with mutual interests.</li><li>A match in research philosophy does not imply feeling comfortableworking together.</li><li>Be extremely careful working with people with a grind mindset.</li></ul><blockquote><p>I found a master's thesis advisor, and like any ambitious student, Ibegan proposing my own partially developed research project ideas tohim. <strong>My advisor patiently entertained my ideas but ultimatelyconvinced me to focus on more conventional research topics that alignedwith both his academic interests and, more importantly, the conditionsof his grant funding. Since my master's program tuition was partiallycovered by a research grant my advisor had obtained from the U.S.government, I was obligated to work on projects within the scope of thatgrant.</strong> Therefore, I followed his recommendations and dedicatedtwo and a half years to developing prototype tools for analyzing theruntime behavior of computer programs written in the C and C++languages.</p></blockquote><blockquote><p>When I arrived on campus, Dawson was a recently-tenured professor whohad been at Stanford for the past eight years; professors usually earntenure (a lifetime employment guarantee) if they have published enoughnotable papers in their first seven years on the job. Dawson's mainresearch interest was in building innovative tools that couldautomatically find bugs (errors in software code) in complex pieces ofreal-world software. Over the past decade, Dawson and his students builtseveral tools that were able to find far more bugs than any of theircompetitors. Their research techniques were so effective that theycreated a successful startup company to sell software bug-findingservices based on those techniques. <strong>Although I somewhat likedDawson's projects, what appealed more to me was that his researchphilosophy matched my own: He was an ardent pragmatist who cared moreabout achieving compelling results than demonstrating theoretical"interestingness" for the sake of appearing scholarly.</strong></p><p>During my first meeting with Dawson, he seemed <strong>vaguelyinterested</strong> in my broader goals of making computer usage andprogramming more productive. <strong>However, he made it very clear thathe wanted to recruit new students to work on an automatic bug-findingtool called Klee that his grant money was currently funding.</strong>(The tool has had several names, but I will call it "Klee" forsimplicity.) From talking with other professors and senior Ph.D.students in my department, I realized it was the norm for new studentsto join an existing grant-funded research project rather than to trycreating their own original project right away. I convinced myself thatautomatically finding software bugs was an indirect way to makeprogrammers more productive, so I decided to join the Klee project.</p></blockquote><blockquote><p>Even though none of my particular ideas managed to persuade Scott, hewas still interested in collaborating with me to develop a projectaligned with my broader interests. <strong>During that period, Scottheld the position of an assistant professor, aiming to secure tenure atStanford, and had been there for just three years. Consequently, he waseager to publish more papers as part of his tenure quest.</strong> As Iwas funded by a fellowship, Scott didn't need to allocate funds from hisgrants to support me, which made the collaboration appealing to himwithout any significant downsides.</p></blockquote><blockquote><p>In hindsight, I can now see why this project was likely to facechallenges due to <strong>misaligned incentives</strong>, but at thetime, I lacked the wisdom to anticipate such issues. I had decided tobecome a Klee assistant for Cristi and Dawson because I wanted to joinan experienced older Ph.D. student and a professor who had a trackrecord of publishing papers in their specific subfield. This approachhad worked exceptionally well the previous year when I collaborated withJoel, an older Ph.D. student, and Scott, a professor, on their HCIproject, which resulted in a top-tier, award-nominated paper.</p><p>So, what was different in this case? <strong>In short, neither Cristinor Dawson had a strong urge to publish. They had already authoredseveral Klee papers together, and a cross-checking paper co-authoredwith me would have been a "nice-to-have" but not an obligatory follow-uppublication. Cristi was in the final year of his Ph.D. and didn'trequire further papers to graduate, while Dawson had already securedtenure and wasn't in a hurry to publish more. In contrast, Joel was amid-stage Ph.D. student eager to publish the first paper of hisdissertation, and Scott was an assistant professor who needed to publishprolifically to earn tenure.</strong> These two contrasting experiencestaught me the crucial importance of thoroughly understanding themotivations and incentives of potential collaborators before embarkingon a project with them.</p></blockquote><blockquote><p><strong>I believe that Dawson expected Peter and me to achievepublishable results at a faster pace, which may have led him to perceiveus as either incompetent or not fully committed to our work. It's aharsh reality that, as a professor at a top-tier university, Dawson'sstudents are likely less accomplished than he was during his own Ph.D.years.</strong> The explanation is quite straightforward: Only about 1out of every 75 Ph.D. students from a top-tier university typicallypossesses the qualities necessary to become a professor at aninstitution like Stanford (or perhaps 1 out of every 200 Ph.D. studentsfrom an average university). Predictably, neither Peter nor I met thoseexceptional standards. If Dawson had partnered with a younger version ofhimself, progress may have been different.</p></blockquote><blockquote><p>Two years after Peter and I departed from the Klee project, Dawsoneventually found a new Ph.D. student who could successfully bring hisKlee-UC vision to fruition. In 2011, Dawson and his new studentpublished a significant paper that incorporated both Klee-UC andcross-checking ideas. Ultimately, it took three attempts involving fourdifferent Ph.D. students over five years before Dawson's originalKlee-UC concept materialized into a published paper. Of those fourstudents, only one persevered— I left the Klee project, and two othersdecided to exit the Ph.D. program altogether. From an individualstudent's standpoint, the chances of success appeared rather low.</p><p>From a professor's perspective, however, Klee-UC represented aresounding success. Since Dawson held tenure, his job was never at risk.<strong>In fact, one of the purposes of tenure is to enable professorsto take risks by pursuing more ambitious project ideas. However, thedownside of this privilege is that professors often assign students towork on these risky projects, which may have lower success rates.Students often find it challenging to decline such assignments,especially if they are financially supported by their advisors'grants.</strong> Fortunately, as I was funded by fellowships, it wasconsiderably easier for me to discontinue my involvement in the Kleeproject.</p></blockquote><blockquote><p><strong>Tom's extensive experience in publishing and reviewingnumerous empirical software measurement papers made him an invaluable"insider" who understood what types of results and paper writing werewell-received by reviewers in that specific subfield. When it came timeto submit our paper at the end of that summer, Tom skillfully positionedour contributions within the context of related work, presentedcompelling arguments for the novelty and significance of our findings,and meticulously polished our paper.</strong> Three months later, I wasthrilled to receive the news that our paper, which focused on studyingthe causes of bug fixes, had been accepted at a top-tier conference.This was particularly impressive given that only 14 percent of allpapers submitted that year were accepted.</p><p>However, Tom's dedication didn't stop there. <strong>As a newly-hiredresearcher at MSR, he was motivated to build his reputation bypublishing additional papers. In the following years, we leveraged theresults from my summer 2009 internship to write two more top-tierconference papers.</strong> One of these papers explored bug reportreassignments, while the other delved into bug report reopenings andeven earned a Best Paper Award.</p></blockquote><blockquote><p>During my first month in the new phase of my academic journey, Iprimarily spent my time reconnecting with old college friends, as myalma mater, MIT, was conveniently located near Harvard. Additionally, Ihad several meetings with Margo to explore potential research ideas.Margo was open to the idea of me pursuing my own project under her loosesupervision, granting me a considerable degree of intellectual freedom.<strong>However, I approached my brainstorming process pragmaticallybecause I aimed to generate a project that would genuinely excite herand secure her strong support for its inclusion in my dissertation. Toachieve this, I delved into her recent papers and grant applications togain insight into her research philosophy.</strong> I tailored my ideasto align with her preferences, recognizing the importance of harmonizingwith the subjective inclinations of senior collaborators, as well as theexpectations of paper reviewers, even within fields that are consideredtechnically objective.</p><p>At that time, reading a grant proposal was an entirely novelexperience for me, and it appeared foreign and unfamiliar. However, withtime and practice, I have since become accustomed to writing grants, andit has become a routine part of my academic life.</p></blockquote><hr /><ul><li>Apply to fellowships before starting the Ph.D. for better academicfreedom and advisor-advisee relationship.</li></ul><blockquote><p>I was also fortunate to receive two prestigious fellowships,<strong>the NSF and NDSEG graduate research fellowships</strong>. Thesefellowships were granted to only about five percent of all applicants.<strong>They covered the full expenses for five out of the six years ofmy Ph.D. studies and relieved me from the obligations of working onspecific grant-funded projects. This was a significant advantage overstudents who had to work on such projects throughout their collegeyears.</strong></p></blockquote><blockquote><p><strong>Applying to Ph.D. programs and fellowships during my master'syear</strong> gave me a huge advantage over students who applied duringsenior year of college, since I had an extra year of researchexperience.</p></blockquote><blockquote><p>In other fields, such as the humanities and social sciences, studentstypically do not receive direct funding from their advisors.<strong>This distinction significantly changes the dynamics of theadvisor-advisee relationship, turning the Ph.D. experience into more ofa solitary journey and less of an employer-employeearrangement.</strong></p></blockquote><blockquote><p>However, I soon came to the realization that I wasn't obligated toremain tethered to Klee in any way, given that my funding came from theNDSEG fellowship rather than Dawson's grants. In contrast, all ofDawson's other students had no option but to persist with their work onKlee, as they were supported by his Klee-related grants. Therefore, Iretained Dawson as my advisor but departed from the Klee project,embarking on the journey to create my own research project entirely fromscratch.</p></blockquote><blockquote><p>From a professor's perspective, however, Klee-UC represented aresounding success. Since Dawson held tenure, his job was never at risk.<strong>In fact, one of the purposes of tenure is to enable professorsto take risks by pursuing more ambitious project ideas. However, thedownside of this privilege is that professors often assign students towork on these risky projects, which may have lower success rates.Students often find it challenging to decline such assignments,especially if they are financially supported by their advisors'grants.</strong> Fortunately, as I was funded by fellowships, it wasconsiderably easier for me to discontinue my involvement in the Kleeproject.</p></blockquote><hr /><ul><li>Question each step in the decision-making process.</li><li>Have an outline or draft of the research paper, especially theevaluation section, before starting a research project.</li><li>This brings the obvious benefit of making researchcontributions.</li><li>It also forces everyone not to push you around, helping you to jumpout of the "pecking order" slowly and surely.</li></ul><blockquote><p>Dawson believed that Klee could uncover new bugs that no automatedtool or human being had previously discovered within the code ofthousands of Linux device drivers. <strong>I recall thinking that whilefinding new Linux device driver bugs could be interesting to present ina paper, it wasn't entirely clear to me how these results constituted asubstantial research contribution.</strong> To my understanding, my rolewas to use Klee to uncover new bugs, essentially applying existingresearch, rather than significantly enhancing Klee in an innovativemanner. <strong>Moreover, I couldn't envision how my project wouldseamlessly integrate with the projects of the other five students for acoherent paper submission in March.</strong> Nevertheless, I had faithin Dawson's high-level paper writing strategy. <strong>Since I hadrecently joined the project, I didn't want to immediately question thesedecisions typically made by professors. I was assigned a specific task,and I was determined to carry it out to the best of myabilities.</strong></p></blockquote><blockquote><p>My rational understanding acknowledged that experimental research inscience and engineering fields often demands an extensive amount ofunglamorous and labor-intensive work to produce tangible results. Ph.D.students, particularly those in their first and second years, aretypically the ones tasked with undertaking the most tedious tasks—thisis essentially what we are compensated for. In a typical research group,the professor and senior Ph.D. students formulate the high-level projectplans and then delegate the responsibility of making all the intricatedetails function in practice to the junior students. First- andsecond-year students usually have minimal influence on the overalldirection of the group's project. <strong>Although I fully embraced myposition as the lowest-ranking member of the team, my emotional statestill suffered significantly during those initial months because thework was exceptionally challenging and lacked immediaterewards.</strong></p></blockquote><blockquote><p>I met with Dawson to express my frustration regarding theoverwhelming task I was currently tackling. It felt ludicrous to spendseveral days configuring Klee for each new device driver. Not only wasit physically exhausting, but it also didn't seem like genuine research.What could we possibly write in our paper? That I had devoted nearly1,000 hours to manual labor in getting Klee to function with devicedrivers without gaining any meaningful insights? It didn't feel like avaluable research contribution; it seemed rather futile<strong>Additionally, panic set in as there were only five weeks leftuntil the paper submission deadline, and Dawson had yet to discuss ourgroup's paper writing strategy.</strong> Typically, writing arespectable paper submission takes a minimum of four weeks, especiallywhen coordinating efforts among six students involved in theproject.</p></blockquote><blockquote><p>However, a significant problem arose. <strong>When we finallyachieved those favorable results, there were only three days left untilthe paper submission deadline, and not a single word of the paper hadbeen written yet.</strong> In such a short timeframe, it was physicallyimpossible to write, edit, and refine a paper submission that had anychance of being accepted at a top-tier computer science conference.Nevertheless, we decided to give it our best shot.</p><p>During the final 72 hours leading up to the deadline, Dawson and fiveof us students (one had dropped out of the project by this point)practically lived in the office, pulling two consecutive all-nighters towrap up the experiments and draft the paper. Deep down, all of usstudents realized that there was virtually no chance that this paperwould be accepted, but we followed Dawson's lead and pressed on.</p><p><strong>The result was a submission that can only be described as adisorganized mess – it contained numerous typos, nonsensical sentencefragments, graphics lacking explanations, and lacked concludingparagraphs.</strong> It was a dismal sight. At that moment, I couldn'tfathom how I would ever complete a Ph.D. if it meant working in such achaotic and haphazard manner. As anticipated, three months later, thereviews for our paper were overwhelmingly negative, filled with harshcomments like, "The program committee believes that this paper is fartoo sloppily prepared to warrant acceptance; please refrain fromsubmitting papers that are clearly unready for review."</p></blockquote><blockquote><p>My friend Greg, who was one of Rob's Ph.D. students, emphasized thesignificance of the third point: <strong>thinking about experiments whensuggesting research project ideas</strong>. <strong>Professors are oftendriven by the desire to have their names associated with publishedpapers, and in the field of computer science, conference paperstypically require robust experiments to secure acceptance forpublication.</strong> Therefore, it's essential to consider experimentdesign right from the outset when formulating project proposals.</p></blockquote><hr /><ul><li>Target fellow researchers with similar incentives when conductingHCI studies in academia.</li><li>Without exceptionally strong resources, find a novel, meaningfulniche for research instead of an overcrowded and highly competitivedomain.</li><li>Do not attempt to do in academia what should be done inindustry.</li></ul><blockquote><p>In hindsight, I'm not astonished that my efforts to shadowprofessionals in their workplaces were unsuccessful. I had nothing tocontribute to these seasoned programmers; my presence would have likelydisrupted their workday. <strong>Fortunately, a few years later, I hadthe opportunity to observe a different group of programmers—fellowgraduate students engaged in programming for scientific research. Theywere open to my occasional inquiries and more than willing to discusstheir working environments.</strong> These interviews would ultimatelyserve as a direct source of inspiration for my dissertation work.</p></blockquote><blockquote><p>Dawson and I encountered significant challenges in getting ourresearch results published. Over the course of a year, we submitted twopapers that were both rejected. It would take another full year beforeour work was finally published as a shorter-length paper in asecond-tier conference, which held minimal prestige and did not count asa contribution to my dissertation. However, by that point, I had alreadymoved on to other projects.</p><p>The primary reason behind our struggles with publication was that wewere not considered "insiders" in the empirical software measurementsubfield (sometimes referred to as empirical software engineering), towhich our project belonged. When Dawson and I embarked on this work,numerous research teams from various universities and corporate researchlabs were already engaged in similar endeavors. <strong>We were clearlyoutmatched by the competition, which included professors and researchscientists specializing in empirical software measurement, guidingarmies of Ph.D. students through the extensive data analysis. Theseindividuals were eager to publish a multitude of papers, especiallyyoung professors aspiring to attain tenure. They possessed expertise instatistical methodologies, framing related work, and crafting persuasivenarratives needed to secure acceptance for such papers. Mostsignificantly, they frequently served on program committees and acted asexternal reviewers for relevant conferences, which provided them within-depth knowledge of the requisites for producing publishable papers inthis subfield.</strong></p></blockquote><blockquote><p>One significant advantage of being an intern at MSR was access to awealth of internal data sets containing information about Microsoft'ssoftware bugs and personnel files. These confidential data sets wouldhave been inaccessible to me as an external researcher. <strong>Therichness of these Microsoft data sets provided MSR researchers like Tomwith a distinct advantage, making it easier to obtain groundbreaking andpublishable results compared to competitors who lacked access to suchdata.</strong></p><p>In contrast, when I worked with Dawson, the Linux data sets I hadaccess to were smaller and of lower quality. Open-source softwareprojects typically do not maintain records as meticulously as one of theworld's largest software companies. <strong>This limitation is somethingthat all university researchers face unless they establish partnershipswith companies that can provide them with access to relevantdata.</strong></p></blockquote><blockquote><p>Upon returning to Stanford in the fall of 2009, inspired by myprevious HCI work with Scott and Joel during my second year, I embarkedon a project to interview colleagues who used Python for data analysisin their research. <strong>The objective was to identify theprogramming-related inefficiencies they faced and explore how IncPycould address and eliminate these inefficiencies.</strong> I alsoleveraged my connections to give presentations about IncPy, even thoughit was still a half-baked idea at that stage, at various lab groupmeetings. These early efforts helped generate fresh ideas and refine theproject's "marketing pitch." I'm deeply thankful for the friends whosupported me in kickstarting my project when I had little more than afew rudimentary PowerPoint slides.</p><p>As I continued my interviews and refined my design plans, I grewincreasingly optimistic. I discovered that researchers in variouscomputation-based fields, including machine learning, pharmacology,bioengineering, bioinformatics, neuroscience, and ocean engineering, allfaced similar challenges in their data analysis workflows, making thempotential beneficiaries of IncPy. <strong>After a few weeks ofinterviews and subsequent adjustments to my project's direction, I feltconfident that I could convincingly pitch the idea in a future papersubmission. The core argument I aimed to convey was that manycomputational researchers across diverse fields grappled with commoninefficiencies in their daily programming tasks, and IncPy presented anovel, fully automated solution to these inefficiencies that had notbeen previously implemented. This initial pitch would ultimately becomethe central theme of my entire dissertation.</strong></p></blockquote><hr /><ul><li>Climb the shoulders of giants as much as possible and pick thelow-hanging fruit from there before you become a giant.</li></ul><blockquote><p>Following the creation of Klee and related projects between 2005 and2008, a new subfield emerged. <strong>This development led to numerousassistant professors and young research scientists eagerly producing aplethora of papers, each detailing incremental improvements in theirquest to secure tenure or job promotions.</strong> It was akin to anacademic gold rush, spurred by the early insights of Cristi, Dawson, anda select few pioneers. Since Dawson already possessed tenure and hadgained fame for his contributions, he was above the fray and lacked thedesire to publish solely for the purpose of bolstering his academicresume.</p><p><strong>In practice, Ph.D. students collaborating with these youngresearchers found it comparatively easier to publish their work andcomplete their graduate programs, while Dawson's students facedconsiderably more challenges.</strong> Over the three years since Ideparted from the Klee project, research groups worldwide havecollectively published hundreds of papers grounded in Klee-likeconcepts. Remarkably, fifteen of these papers detailed enhancements toKlee itself, as our laboratory released it as open-source software toencourage further research. <strong>In the meantime, five of Dawson'sPh.D. students have made serious efforts to work on Klee; however, onlyone has managed to publish a single paper on Klee-UC.</strong></p></blockquote><hr /><ul><li>Actively expand your network and seek collaborationopportunities.</li></ul><blockquote><p>Just before commencing my second year of the Ph.D. program inSeptember 2007, I took a one-week vacation to Boston to visit friendsfrom college. While in the area, I reached out to a few MIT professors Iknew from my undergraduate years, seeking their guidance. During ourmeetings, they all conveyed a similar message: <strong>Take theinitiative to engage with professors, explore research topics of mutualinterest, and above all, avoid isolation.</strong> This straightforwardadvice, consistently applied over the next five years, ultimately pavedthe way for a successful completion of my Ph.D. journey.</p><p>I wasted no time in taking this advice to heart while still inBoston. I sent a cold email to an MIT computer science professor namedRob, politely requesting a meeting with him. In this initial email, Ibriefly introduced myself as a recent MIT graduate and a currentStanford Ph.D. student with a keen interest in developing tools toenhance the productivity of computer programmers. Given that I knew Robshared an interest in this research area, I hoped my email would piquehis interest rather than end up in his spam folder. Fortunately, Robgenerously agreed to meet with me for an hour in his office, duringwhich I presented a few project proposals and sought his feedback. Heappeared to find merit in my ideas, which bolstered my confidence thatthey held promise in the eyes of a professor working in this researchdomain. Regrettably, I couldn't collaborate with Rob as I was no longeran MIT student. <strong>Nonetheless, at the conclusion of our meeting,Rob suggested that I approach a Stanford computer science professornamed Scott to see if I could garner his interest in myideas.</strong></p></blockquote><blockquote><p>The lasting impact of an MSR (Microsoft Research) internship oftenextends beyond research achievements to the friendships forged duringthe experience. <strong>During that particular summer, I had theprivilege of forming connections with some of the brightest and mostinspiring young computer science researchers of my generation.</strong>For example, one of my three office mates was on the verge of beginningher Ph.D. journey at MIT and had already published more top-tier papersduring her undergraduate research than most Ph.D. students could everaspire to. Another office mate was a UC Berkeley Ph.D. student whodedicated his nights and weekends to a separate research project withcollaborators from across the country, all while diligently working onhis internship project during workdays. These peers are likely to evolveinto award-winning professors, research leaders, and high-techentrepreneurs, and I am genuinely humbled to have had the opportunity toshare a summer with them.</p></blockquote><hr /><ul><li>This is how we can evaluate productivity claims.</li></ul><blockquote><p>From the very beginning of my IncPy project, I recognized thechallenge of presenting a compelling evaluation. <strong>The corepremise, that IncPy could enhance the productivity of computationalresearchers, was inherently subjective. To address this, after studyingsimilar papers, I developed a two-pronged evaluationapproach</strong>:</p><p><strong>Case Studies: I planned to gather a variety of Pythonprograms from computational researchers and simulate the productivitygains they might have achieved using IncPy instead of standardPython.</strong></p><p>Deployment: The goal was to encourage researchers to incorporateIncPy into their regular work, allowing them to <strong>directlyexperience and report on its impact on their productivity</strong>.</p></blockquote><blockquote><p>In pursuit of this, <strong>I adopted the roles of both salesman andbeggar, persistently seeking Python programs from colleagues for my casestudies and encouraging them to use IncPy in their research.</strong>Despite mostly receiving negative responses, I continued asking forreferrals and volunteered to speak at various lab meetings to generateinterest in IncPy. After months of effort, I managed to acquire Pythonprograms from researchers across various fields, sufficient for startingmy case studies.</p></blockquote><blockquote><p>As I concluded my fourth Ph.D. year in September 2010, I submitted myIncPy paper to a top-tier conference. The paper included <strong>casestudies and a few deployment anecdotes</strong>. Aware of the lowacceptance rate and the unconventional nature of IncPy within academicfields, I was prepared for potential rejection but still aimed high,knowing the value of a top-tier publication for my graduationprospects.</p></blockquote><hr /><ul><li>The runtime is a vital (yet often overlooked) aspect to consider inprogramming language research.</li></ul><blockquote><p>On July 29, 2010, a year after the initial concept of IncPy was born,I was struck by another idea, this time addressing a common issue incomputational research. <strong>I noticed that researchers often writetheir computer programs in an ad-hoc, somewhat careless manner, leadingto frequent crashes for trivial reasons. These crashes not only preventthe production of any results but also cause considerablefrustration.</strong></p><p><strong>My realization was that by modifying the runtime environmentof the Python programming language, specifically the interpreter, Icould address this issue.</strong> The idea was to adapt the Pythoninterpreter in a way that would allow these less rigorously writtenprograms to still run and produce partial results, rather than failingcompletely and producing none. I decided to name this modified versionof the Python interpreter "SlopPy," a playful blend of 'Sloppy' and'Python', emphasizing its tolerance for less meticulous codingpractices. This concept aimed to make the process of data analysis moreforgiving and efficient for researchers who may not always adhere tostringent coding standards.</p></blockquote><hr /><ul><li>Focus on acknowledging shortcomings and deriving their insights ifexperimental evaluation results are suboptimal.</li></ul><blockquote><p>While I was interning at Google during the summer of 2011, I receivedthe joyful news that our ProWrangler paper had been accepted withoutstanding reviews. The main factor contributing to our success wasJeff's exceptional work in crafting both the introduction of our paperand the interpretation of our evaluation results. <strong>Initially, ouruser testing had not demonstrated the productivity improvements we hadhoped for, which made me concerned that our paper might face rejection.However, Jeff's skill in technical writing and framing our argumentsskillfully transformed what seemed like impending failure into asurprising victory. The reviewers appreciated our candid acknowledgmentof the shortcomings in our evaluation and the valuable insights weextracted from them.</strong> Undoubtedly, our paper would not havegained acceptance without Jeff's rhetorical expertise. He hadaccumulated substantial experience in this area, having published 19papers during his Ph.D. studies, mostly in top-tier conferences, whichis five to ten times more than what is typically expected from computerscience Ph.D. students. This level of dedication and productivity isoften necessary to secure a faculty position at a prestigious universitylike Stanford.</p></blockquote><hr /><ul><li>In fiercely competitive domains, do not self-consciously try tonetwork and seek opportunities, and never schmooze. Instead, rely onbypasses and side roads. Many things grow in the garden that were neversown there（有心栽花花不开，无心插柳柳成荫）.</li></ul><blockquote><p><strong>When I made the decision to leave academia, one of theimmediate impacts was that I no longer felt the need to engage innetworking activities at the three academic conferences I attended thatsummer. These conferences included talks I gave on IncPy, SlopPy, andCDE. Academic conferences are typically filled with senior Ph.D.students, postdocs, and pre-tenure professors who are activelynetworking to impress their more senior colleagues. For these juniorresearchers, professional networking at conferences is a crucial andtime-consuming task as it greatly influences their budding careers andacademic reputations. However, since I had decided to step away from theacademic world, I found myself enjoying the conferences without theusual nervousness or strategic calculations.</strong></p><p>At one of these conferences, I had a casual conversation with John, aprofessor from the University of Utah who was the keynote speaker. Lateron, he wrote a generous blog post that significantly increased thepopularity of "The Ph.D. Grind" among professors. He also provided mewith practical advice regarding the possibility of returning to academiamyself. <strong>This unexpected turn of events occurred because I was nolonger driven by a desire to stay in academia and simply chatted withpeople I found interesting at the conference without a specificnetworking agenda.</strong> It was a reminder of how unpredictable lifecan be.</p><p>During a break between sessions at another conference, I noticedMargo sitting alone and working on her laptop. I had previously metMargo during my fourth year at a San Jose workshop where I presented myoriginal IncPy paper. Although I had some reservations about approachingher and reintroducing myself, fearing that she might not remember me orthat our conversation might lack substance, my impending departure fromacademia meant I had no real networking agenda to uphold. I decided totake the chance and greeted her. I reminded her of our previousencounter, and she appeared to recall me. We had a brief five-minuteconversation about my new CDE project before I had to rush off to givemy talk. After returning home, I sent her a courteous follow-up emailwith a link to the CDE project webpage, in case her students wereinterested in using it for their research. This was my standard politeapproach when introducing CDE to professional colleagues, and I didn'thave high expectations for follow-up.</p><p>As it turned out, Margo would later play a pivotal role in helping mesecure a professorship. <strong>Ironically, if I had initially desired aprofessorship, I might have been too self-conscious and hesitant toapproach her in the first place, which could have diminished my chancesof eventually obtaining the position. In the end, it was because Ididn't actively seek a professorship at the time that I ultimately endedup getting one.</strong> Life has its own unique way of working thingsout!</p></blockquote><blockquote><p><strong>The culmination of my graduate school journey wouldn't havebeen possible if I hadn't actively seized the opportunities that I wasfortunate enough to receive.</strong> If Robert hadn't informed me aboutthe San Jose workshop two years ago, if I hadn't submitted and presentedmy IncPy paper there, if Margo hadn't taken an interest in my paper andintroduced me to Elaine, if I hadn't maintained contact with Elaine, ifI hadn't spontaneously approached Margo again at last summer'sconference where I presented CDE, if she hadn't sent me a graciousfollow-up email, and if I hadn't taken a risk with my unconventionalcounterproposal to her, then <strong>I would have still been at Stanfordstruggling to find one last project and thesis committeemember</strong>.</p><p><strong>It's important to acknowledge that achieving this outcomerequired me to try many different approaches like this, and most of themdid not yield the desired results.</strong> Success often involvesnumerous attempts and failures before finding the right path.</p></blockquote><h1 id="supportive-tactics">Supportive Tactics</h1><ul><li>Optimize the process of note-taking for research.</li></ul><blockquote><p>My daily routine primarily revolved around the development ofcomputer programs designed to extract, clean, reformat, and analyze datafrom the Linux revision control history and the 2,000 bug reports.<strong>In my pursuit of gaining insights, I independently acquired afoundational understanding of quantitative data analysis, statistics,and data visualization techniques. Throughout my work, I meticulouslyrecorded my experimental progress in a research lab notebook, carefullydocumenting which trials were successful and which werenot.</strong></p><p>Every week or so, I would meet with Dawson to present my findings.<strong>Typically, these meetings involved me presenting him withprintouts of graphs or data tables generated through my analyses,followed by him offering high-level suggestions, such as, "This part ofthe graph appears unusual; can you explain why? Try breaking down thedata in this manner and delve deeper."</strong> It was only years laterthat I discovered this working style was relatively common amongcomputational researchers in various academic disciplines. For mydissertation, I went on to develop tools aimed at streamlining thetypical inefficiencies in this prevalent workflow. However, at thattime, I had no such long-term vision; my primary goal was to makeintriguing discoveries and have them published.</p></blockquote><hr /><ul><li>Raise encountered problems and frustrations, no matter how minor, atmeetings and complain.</li><li>Actively contact people for feedback, motivation, and emotionalsupport.</li></ul><blockquote><p>I found myself navigating unfamiliar territory, making itsignificantly more challenging to seek assistance compared to myundergraduate years when solutions were more straightforward. As thesole person working with Klee on device driver code, my colleaguescouldn't offer much guidance. <strong>While Dawson occasionally providedhigh-level strategic advice, as is customary for tenured professors, hisrole didn't involve being directly involved in the day-to-day challengeswe faced. It fell upon us, the students, to decipher all the intricatedetails necessary to yield results—my task being to uncover new bugs inLinux device drivers that had not been previously identified. Professorsoften reiterate the mantra, "If it's already been done before, then itwouldn't be research!"</strong> For the first time, I truly grasped theessence of those words.</p></blockquote><blockquote><p>For the following ten weeks, I found myself daydreaming about my ownresearch concepts in complete isolation, without engaging in anyconversations with others. Given my negative initial experience workingin a research group over the past few months, I craved solitude to thinkindependently. Dawson was supportive of my absence since he wasn'tfinancially supporting me through his grants.</p><p>I lived in complete seclusion, mentally drained but still attemptingto make gradual progress. Each day, I dedicated myself to readingnumerous computer science research papers and taking notes in the hopeof finding inspiration for my own creative ideas. However, lackingproper guidance or context, I often ended up squandering a lot of timewithout gaining meaningful insights from my readings. I also roamedaimlessly on my bicycle through the neighborhoods around campus, hopingto spark new research ideas to no avail. Most notably, I procrastinatedmore than I ever had in my life up to that point: I watched countless TVshows, took numerous naps, and wasted countless hours online. Unlike myfriends with conventional nine-to-five jobs, there was no supervisormonitoring my daily activities, so I allowed my mind to wander withoutany structure in my life.</p><p>During those ten solitary weeks, I scarcely spoke to anyone, not evenmy friends or family. Complaining seemed futile because it felt likenobody could truly grasp what I was going through at the time. Myfriends who were not pursuing Ph.D. programs believed I was simply "inschool" and taking classes like a typical student. Meanwhile, the fewfriends I had made in my department were grappling with their ownfirst-year Ph.D. struggles, primarily the shock of diving headfirst intocomplex, open-ended research problems without the ability to influencethe overarching direction of their assigned projects. We, as youngcomputer scientists, willingly engaged in tasks that were bothexceptionally challenging and seemingly devoid of purpose, all whileearning a quarter of the salary of our friends in the corporate world.It was so disheartening that it became almost comically tragic.<strong>However, I didn't believe that group complaining would beproductive, so I chose to remain silent. I avoided the Computer ScienceDepartment building, fearing encounters with colleagues who mightinevitably inquire about my work, and I had no respectable response tooffer. Instead, I preferred secluding myself in libraries and coffeeshops.</strong></p></blockquote><blockquote><p>In hindsight, going solo so early in my graduate school journey was aregrettable decision. Contrary to romanticized notions of a solitaryscholar sitting outdoors, sipping a latte, and scribbling on blanknotebook pages, real research is never conducted in isolation. Itnecessitates a solid foundation in intellectual, historical, andsometimes even physical aspects (such as laboratory equipment) todevelop innovative ideas. <strong>A wiser approach during those weekswould have been to communicate with Dawson more frequently and activelyseek collaborations with other professors or senior students. However,at that time, I was so burnt out and frustrated with the traditionalhierarchy of group-based research – which often involved new Ph.D.students performing the most unglamorous tasks – that I retreated andembarked on my own path.</strong></p></blockquote><blockquote><p>By the middle of my third year, many of my fellow students and Ifound ourselves in a state of "limbo." <strong>It became increasinglychallenging to muster the motivation to come into the office day in andday out. We also grappled with feelings of isolation and loneliness, aswe spent our days and nights immersed in tackling obscure, highlyspecialized problems that few people in our immediate surroundingscomprehended or showed interest in.</strong> While our advisors andsenior colleagues occasionally offered high-level guidance, they seldomsat down with us to work through the intricate details of our researchendeavors.</p></blockquote><hr /><ul><li>If there is work-life balance in a job and stress levels are not toohigh, i.e., one is not drained or overburned, would it be a viableopportunity to pursue self-improvement and open doors for futurepursuits?</li></ul><blockquote><p>Of course, it would be foolish to pursue a Ph.D. solely out ofirrational childhood fears. <strong>To get a preview of corporateworking life, I did internships at engineering companies every summerduring college. Since I happened to work in offices where I was the onlyintern, I was given the full responsibilities of a junior engineer,which was a rare privilege. Although I learned a lot of technicalskills, I found the day-to-day work to be mind-numbingly dull.</strong>My coworkers were also unenthusiastic about their jobs, and there werefew appealing prospects for career advancement. Of course, I'm notclaiming that all engineering jobs are mind-numbingly dull; it justhappened that the companies I worked for were not first-rate. Many of mycollege friends who interned at first-rate companies such as Microsofthad great experiences. Ironically, my first full-time job afterfinishing my Ph.D. was at Google. Google loved their experiences andsigned on to work at those companies full-time after graduation.</p></blockquote><hr /><ul><li>Research software tends to be rough prototypes. Keep them simple,stupid.</li></ul><blockquote><p><strong>Similar to other sophisticated software tools, Klee featurednumerous configurable options. However, since it was a researchprototype assembled by students, most of these options lacked cleardocumentation regarding their behaviors.</strong> Consequently, I spenta significant amount of time grappling with misunderstandings about thesubtle interactions between these options as I adjusted them. Myresearch lab notebook became filled with frustrations, including entrieslike: "OH SH*T, I believe my mistake was failing to realize that thereare specific options meant to be passed into Klee (e.g.,-emit-all-errors), and others that should be passed into the targetprogram to set up the model environment (e.g., --sym-args). When theseget confused, bizarre outcomes occur because Klee ends up executing thetarget program with argc and argv values that differ from what you'dexpect."</p></blockquote><blockquote><p>From a research perspective, my goal was achieved: <strong>Isuccessfully developed an initial prototype of CDE and demonstrated itsfunctionality in a practical use case. In many applied engineeringfields, it's widely accepted that research prototypes like CDE primarilyserve to prove the feasibility of innovative concepts. The role of aresearcher involves creating prototypes, conducting experimentalassessments to measure their effectiveness, publishing research papers,and then moving on to the next idea.</strong> It would be unrealisticfor a researcher to expect people to use their prototypes as if theywere fully-fledged products. <strong>Instead, if the ideas arepromising, professional engineers may incorporate them into theircompany's future products.</strong> At best, some other research groupsmight utilize your prototypes as a foundation to develop their ownprototypes and subsequently reference your work in their papers (forexample, more than a dozen university research groups have expanded uponthe Klee tool and published papers detailing their enhancements).However, it is exceedingly rare for individuals outside of the researchcommunity to employ research prototypes in their daily tasks. Inessence, the objective of academic research is to generate validatedideas, not refined products.</p></blockquote><hr /><p>Make full use of workshops to disseminate preliminary results andcollect feedback rapidly, even if it involves spending moneyyourself.</p><blockquote><p>Typically, I wouldn't have paid much attention to such anannouncement for two reasons. Firstly, Robert's research area, dataprovenance, had no direct relevance to IncPy, so his paper submissionsdidn't affect me. Secondly, in our department, workshop papers don'tusually count as substantial contributions toward a dissertation.<strong>Workshops are primarily meant for sharing early-stage ideas andtend to have much higher acceptance rates (60 to 80 percent) compared toconferences (8 to 30 percent). Many professors prefer their students tofocus on publishing in conferences since workshops require them to covertravel, hotel, and registration costs, similar to conferences, butwithout the same level of prestige.</strong> Consequently, top-tiercomputer science professors often encourage their students to prioritizeconference papers over workshop submissions.</p></blockquote><blockquote><p>While presenting my IncPy workshop paper was beneficial for feedbackand networking, particularly with Margo, it didn't qualify as anofficial publication for my dissertation. I was aware that publishingthis work at a recognized conference in my department was necessary.<strong>The main difference between a workshop and a conference paperlies in the requirement for a conference paper to have a robustexperimental evaluation, demonstrating the effectiveness of the proposedtool or technique.</strong> The evaluation part of a paper can vary,from measuring runtime performance to conducting user behavior studiesin a controlled environment. Given the commonality of similar researchideas, reviewers pay close attention to the implementation andexperimental analysis of these ideas when deciding on the acceptance orrejection of papers.</p></blockquote><h1 id="mindset">Mindset</h1><ul><li>Find a meaning for your research and build a reputation.</li></ul><blockquote><p>After two months of persistent effort, I began to achieve some modestvictories. I managed to get Klee to function well enough to identify myfirst few bugs in the smallest device drivers. <strong>To ascertainwhether these bugs were genuine (as opposed to false positives resultingfrom Klee's limitations), I sent emails outlining each potential bug tothe Linux developers responsible for those drivers. Several drivercreators verified that I had indeed discovered real bugs in their code.These email confirmations brought me great excitement, as theyrepresented my initial glimpses of external validation.</strong></p></blockquote><blockquote><p>The skill of crafting concise and impactful professional emails hasproven to be highly beneficial for my career.</p></blockquote><hr /><ul><li>Do not bootlick the "establishment" or the "mainstream." Be wise andbrave, identify emergent trends, conquer virgin land, and blazeunheard-of new paths.</li></ul><blockquote><p><strong>The second and more significant reason why pursuing a postdocdidn't make sense for me was the nature of the research topics I wastruly passionate about. These topics didn't align well with thelikelihood of winning grant funding because they weren't widely acceptedby the current academic establishment.</strong> Without grants, it wouldbe impossible to fund students to work on these topics, and withoutmotivated students to tackle the challenging manual work involved, itwould be difficult to produce reputable publications. Furthermore,without a substantial number of publications each year, achieving tenurewould be out of reach. Even if I did manage to secure tenure, I wouldstill require new grants to support new students in implementing myideas, perpetuating an ongoing funding cycle. Given my researchinterests, I wasn't emotionally prepared to engage in the uphill battlesnecessary to have my proposals taken seriously by grant fundingagencies. Convincing peer reviewers to accept my papers had already beena challenge, and grant reviewers would likely be even less sympathetic,as they control the distribution of significant financial resources andwould prefer to allocate funding to colleagues conducting moremainstream computer science research.</p><p><strong>When I began my faculty career in 2014, this was my greatestfear. Consequently, I deliberately transitioned to a new research areathat had greater potential for securing funding.</strong></p><p><strong>Out of the 26 Ph.D. graduates in the Stanford ComputerScience Department from my year, I considered myself relatively averagefrom an academic perspective, as most of my papers were second-tier andnot well-received by the academic community. My dissertation workstraddled multiple computer science subfields, including ProgrammingLanguages, Human-Computer Interaction, and Operating Systems, which madeit challenging to gain recognition from top experts in any one specificsubfield.</strong></p><p><strong>Given that my dissertation topic was far from mainstream, anyjunior professor or scientist attempting to build their academic careeraround its concepts would face difficulties gaining the approval ofgrant funding agencies, crucial for launching new projects, and thesupport of senior colleagues, essential for publication and tenure.While I am more than willing to support anyone willing to take on thiscommendable challenge, I wasn't courageous enough to risk my own careeron it.</strong> Instead, I have chosen to pursue an entirely differentprofessional passion, which may become the subject of a future book.</p><p><strong>Interestingly, these ideas eventually became more fundable inthe year after I graduated, thanks to the emergence of the Big Data anddata science movements. However, by that time, I had already shifted myfocus to other interests.</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linear Regression, Ridge Regression, Lasso Regression, and Kernel Ridge Regression</title>
    <link href="/2023/12/24/Linear-Regression-Ridge-Regression-Lasso-Regression-and-Kernel-Ridge-Regression/"/>
    <url>/2023/12/24/Linear-Regression-Ridge-Regression-Lasso-Regression-and-Kernel-Ridge-Regression/</url>
    
    <content type="html"><![CDATA[<h1 id="linear-regression">Linear Regression</h1><figure><imgsrc="https://miro.medium.com/v2/resize:fit:766/0*qq0yaecNRQiugnif.png"alt="Linear Regression" /><figcaption aria-hidden="true">Linear Regression</figcaption></figure><p>Linear regression is a fundamental statistical model used instatistics and supervised machine learning. It establishes a linearrelationship between a scalar <em>response</em> and one or more<em>explanatory variables</em>. The simplicity and well-establishedproperties of linear regression make it a cornerstone algorithm inmachine learning.</p><p>Historically, linear regression was developed by Legendre (1805) andGauss (1809) for astronomical predictions and later popularized in thesocial sciences by Quetelet.</p><p>Linear regression is widely used for two primary purposes:</p><ul><li>For predictive modeling, it fits a model to observed data sets,allowing for future predictions when new explanatory variables areavailable without their corresponding response values.</li><li>For analysis, it helps quantify the relationship between responseand explanatory variables, assessing the strength of this relationshipand identifying variables with no linear relationship or redundantinformation.</li></ul><p>In its most general case, a linear regression model can be written inmatrix notation as</p><p><span class="math display">\[\mathbf{y} = \mathbf{X}\boldsymbol{\beta} + \boldsymbol{\varepsilon}\]</span></p><p>where</p><ul><li><span class="math inline">\(\mathbf{y} = {\begin{bmatrix} y_{1} \\y_{2} \\ \vdots \\ y_{n} \end{bmatrix}}\)</span> is a vector of <spanclass="math inline">\(n\)</span> observed values of the responsevariable.</li><li><span class="math inline">\(\mathbf{X} = {\begin{bmatrix}\mathbf{x}_{1}^{\mathsf{T}} \\ \mathbf{x}_{2}^{\mathsf{T}} \\ \vdots \\\mathbf{x}_{n}^{\mathsf{T}} \end{bmatrix}} = {\begin{bmatrix} 1 &amp;x_{1, 1} &amp; \cdots &amp; x_{1, p} \\ 1 &amp; x_{2, 1} &amp; \cdots&amp; x_{2, p}\\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 1&amp; x_{n, 1} &amp; \cdots &amp; x_{n, p} \end{bmatrix}}\)</span> is amatrix of <span class="math inline">\(n\)</span> observed <spanclass="math inline">\((p + 1)\)</span>-dimensional row-vectors of theexplanatory variables.</li><li><span class="math inline">\(\boldsymbol{\beta} = {\begin{bmatrix}\beta_{0} \\ \beta_{1} \\ \beta_{2} \\ \vdots \\ \beta_{p}\end{bmatrix}}\)</span> is a <span class="math inline">\((p +1)\)</span>-dimensional parameter vector, whose elements, multipliedwith each dimension of the explanatory variables, are known as effectsor regression coefficients.</li><li><spanclass="math inline">\(\boldsymbol{\varepsilon}={\begin{bmatrix}\varepsilon_{1}\\ \varepsilon_{2} \\ \vdots \\ \varepsilon _{n} \end{bmatrix}}\)</span>is a vector of <span class="math inline">\(n\)</span> error terms. Itcaptures all other factors that influence <spanclass="math inline">\(\mathbf{y}\)</span> other than <spanclass="math inline">\(\mathbf{X}\)</span>.</li></ul><p>Note that the first dimension of the explanatory variables is theconstant 1. This is designed such that the corresponding first elementof <span class="math inline">\(\boldsymbol{\beta}\)</span>, <spanclass="math inline">\(\beta_{0}\)</span>, would be the intercept aftermatrix multiplication. Many statistical inference procedures for linearmodels require an intercept to be present, so it is often included evenif theoretical considerations suggest that its value should be zero.</p><p>Fitting a linear model to a given data set usually requiresestimating <span class="math inline">\(\boldsymbol{\beta}\)</span> suchthat <span class="math inline">\(\boldsymbol{\varepsilon} = \mathbf{y} -\mathbf{X} \boldsymbol{\beta}\)</span> is minimized.</p><p>For example, it is common to use the sum of squared errors (known as<strong>ordinary least squares</strong>) <spanclass="math inline">\(\|{\boldsymbol {\varepsilon }}\|_{2}^{2} =\|\mathbf{y} -\mathbf{X}{\boldsymbol{\beta}}\|_{2}^{2}\)</span> as aloss function for minimization. This minimization problem has a uniquesolution, <span class="math inline">\({\hat{\boldsymbol{\beta}}} =(\mathbf{X}^{\operatorname{T}}\mathbf{X})^{-1}\mathbf{X}^{\operatorname{T}} \mathbf{y}\)</span>.</p><p>References:</p><ul><li>https://en.wikipedia.org/wiki/Linear_regression</li><li>https://en.wikipedia.org/wiki/Ordinary_least_squares</li></ul><p>References:</p><ul><li>https://en.wikipedia.org/wiki/Linear_regression</li><li>https://en.wikipedia.org/wiki/Ordinary_least_squares</li></ul><h1 id="ridge-regression">Ridge Regression</h1><p>However, when linear regression models have some multicollinear(highly correlated) dimensions of the explanatory variables, whichcommonly occurs in models with high-dimensional explanatory variables,<span class="math inline">\(\mathbf{X}^{\operatorname{T}}\mathbf{X}\)</span> approaches a singular matrix and calculating <spanclass="math inline">\(\left(\mathbf{X}^{\operatorname{T}} \mathbf{X}\right)^{-1}\)</span> becomes numerically unstable (note how themagnitude of <code>np.linalg.inv(X.T @ X)</code> changes as the columnsof <code>X</code> become more and more correlated below):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> x_21 <span class="hljs-keyword">in</span> [<span class="hljs-number">2.1</span>, <span class="hljs-number">2.01</span>, <span class="hljs-number">2.001</span>, <span class="hljs-number">2.0001</span>, <span class="hljs-number">2.00001</span>]:<br><span class="hljs-meta">... </span>    X = np.array([<br><span class="hljs-meta">... </span>        [<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>],<br><span class="hljs-meta">... </span>        [<span class="hljs-number">1.</span>, x_21]<br><span class="hljs-meta">... </span>    ])<br><span class="hljs-meta">... </span>    <br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;X:&#x27;</span>)<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(X)<br><span class="hljs-meta">... </span>    <br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;X.T @ X:&#x27;</span>)<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(X.T @ X)<br><span class="hljs-meta">... </span>    <br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;np.linalg.inv(X.T @ X):&#x27;</span>)<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(np.linalg.inv(X.T @ X))<br><span class="hljs-meta">... </span><br>X:<br>[[<span class="hljs-number">1.</span>  <span class="hljs-number">2.</span> ]<br> [<span class="hljs-number">1.</span>  <span class="hljs-number">2.1</span>]]<br>X.T @ X:<br>[[<span class="hljs-number">2.</span>   <span class="hljs-number">4.1</span> ]<br> [<span class="hljs-number">4.1</span>  <span class="hljs-number">8.41</span>]]<br>np.linalg.inv(X.T @ X):<br>[[ <span class="hljs-number">841.</span> -<span class="hljs-number">410.</span>]<br> [-<span class="hljs-number">410.</span>  <span class="hljs-number">200.</span>]]<br>X:<br>[[<span class="hljs-number">1.</span>   <span class="hljs-number">2.</span>  ]<br> [<span class="hljs-number">1.</span>   <span class="hljs-number">2.01</span>]]<br>X.T @ X:<br>[[<span class="hljs-number">2.</span>     <span class="hljs-number">4.01</span>  ]<br> [<span class="hljs-number">4.01</span>   <span class="hljs-number">8.0401</span>]]<br>np.linalg.inv(X.T @ X):<br>[[ <span class="hljs-number">80401.00000048</span> -<span class="hljs-number">40100.00000024</span>]<br> [-<span class="hljs-number">40100.00000024</span>  <span class="hljs-number">20000.00000012</span>]]<br>X:<br>[[<span class="hljs-number">1.</span>    <span class="hljs-number">2.</span>   ]<br> [<span class="hljs-number">1.</span>    <span class="hljs-number">2.001</span>]]<br>X.T @ X:<br>[[<span class="hljs-number">2.</span>       <span class="hljs-number">4.001</span>   ]<br> [<span class="hljs-number">4.001</span>    <span class="hljs-number">8.004001</span>]]<br>np.linalg.inv(X.T @ X):<br>[[ <span class="hljs-number">8004000.98507102</span> -<span class="hljs-number">4000999.99253738</span>]<br> [-<span class="hljs-number">4000999.99253738</span>  <span class="hljs-number">1999999.99626962</span>]]<br>X:<br>[[<span class="hljs-number">1.</span>     <span class="hljs-number">2.</span>    ]<br> [<span class="hljs-number">1.</span>     <span class="hljs-number">2.0001</span>]]<br>X.T @ X:<br>[[<span class="hljs-number">2.</span>         <span class="hljs-number">4.0001</span>    ]<br> [<span class="hljs-number">4.0001</span>     <span class="hljs-number">8.00040001</span>]]<br>np.linalg.inv(X.T @ X):<br>[[ <span class="hljs-number">8.00039556e+08</span> -<span class="hljs-number">4.00009777e+08</span>]<br> [-<span class="hljs-number">4.00009777e+08</span>  <span class="hljs-number">1.99999889e+08</span>]]<br>X:<br>[[<span class="hljs-number">1.</span>      <span class="hljs-number">2.</span>     ]<br> [<span class="hljs-number">1.</span>      <span class="hljs-number">2.00001</span>]]<br>X.T @ X:<br>[[<span class="hljs-number">2.</span>      <span class="hljs-number">4.00001</span>]<br> [<span class="hljs-number">4.00001</span> <span class="hljs-number">8.00004</span>]]<br>np.linalg.inv(X.T @ X):<br>[[ <span class="hljs-number">7.99973381e+10</span> -<span class="hljs-number">3.99985690e+10</span>]<br> [-<span class="hljs-number">3.99985690e+10</span>  <span class="hljs-number">1.99992345e+10</span>]]<br></code></pre></td></tr></table></figure><p>This problem can be alleviated by adding positive elements to thediagonals.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span>X = np.array([<br><span class="hljs-meta">... </span>    [<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>],<br><span class="hljs-meta">... </span>    [<span class="hljs-number">1.</span>, <span class="hljs-number">2.00001</span>]<br><span class="hljs-meta">... </span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> _<span class="hljs-keyword">lambda</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">0.001</span>, <span class="hljs-number">0.0001</span>]:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;np.linalg.inv(X.T @ X + <span class="hljs-subst">&#123;_<span class="hljs-keyword">lambda</span>&#125;</span> * np.eye(len(X))):&#x27;</span>)<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(np.linalg.inv(X.T @ X + _<span class="hljs-keyword">lambda</span> * np.eye(<span class="hljs-built_in">len</span>(X))))<br><span class="hljs-meta">... </span><br>np.linalg.inv(X.T @ X + <span class="hljs-number">1</span> * np.eye(<span class="hljs-built_in">len</span>(X))):<br>[[ <span class="hljs-number">0.81818248</span> -<span class="hljs-number">0.36363595</span>]<br> [-<span class="hljs-number">0.36363595</span>  <span class="hljs-number">0.27272628</span>]]<br>np.linalg.inv(X.T @ X + <span class="hljs-number">0.1</span> * np.eye(<span class="hljs-built_in">len</span>(X))):<br>[[ <span class="hljs-number">8.01980982</span> -<span class="hljs-number">3.96039026</span>]<br> [-<span class="hljs-number">3.96039026</span>  <span class="hljs-number">2.07919969</span>]]<br>np.linalg.inv(X.T @ X + <span class="hljs-number">0.01</span> * np.eye(<span class="hljs-built_in">len</span>(X))):<br>[[ <span class="hljs-number">80.02005978</span> -<span class="hljs-number">39.95998014</span>]<br> [-<span class="hljs-number">39.95998014</span>  <span class="hljs-number">20.07983982</span>]]<br>np.linalg.inv(X.T @ X + <span class="hljs-number">0.001</span> * np.eye(<span class="hljs-built_in">len</span>(X))):<br>[[ <span class="hljs-number">800.02078984</span> -<span class="hljs-number">399.95940022</span>]<br> [-<span class="hljs-number">399.95940022</span>  <span class="hljs-number">200.07918976</span>]]<br>np.linalg.inv(X.T @ X + <span class="hljs-number">0.0001</span> * np.eye(<span class="hljs-built_in">len</span>(X))):<br>[[ <span class="hljs-number">8000.02719959</span> -<span class="hljs-number">3999.95360059</span>]<br> [-<span class="hljs-number">3999.95360059</span>  <span class="hljs-number">2000.07179896</span>]]<br></code></pre></td></tr></table></figure><p>By replacing <spanclass="math inline">\((\mathbf{X}^{\operatorname{T}}\mathbf{X})^{-1}\)</span> with <span class="math inline">\((\mathbf{X}^{\mathsf{T}} \mathbf{X} +\lambda \mathbf{I} )^{-1}\)</span> in <spanclass="math inline">\({\hat{\boldsymbol{\beta}}} =(\mathbf{X}^{\operatorname{T}}\mathbf{X})^{-1}\mathbf{X}^{\operatorname{T}} \mathbf{y}\)</span>, wederive the solution to <strong>ridge regression</strong>, <spanclass="math inline">\({\hat {\beta }}_{R}=(\mathbf{X} ^{\mathsf{T}}\mathbf{X} +\lambda \mathbf{I} )^{-1}\mathbf{X}^{\mathsf{T}}\mathbf{y}\)</span>.</p><p>Ridge regression (linear regression with L2 regularization), islinear regression using <spanclass="math inline">\({\mathcal{L}}(\boldsymbol{\beta}, \lambda) =\|\mathbf{y} -\mathbf{X}{\boldsymbol{\beta}}\|_{2}^{2} + \lambda(\|{\boldsymbol{\beta}}\|_{2}^{2} - C)\)</span> as the loss function tominimize.</p><p>This is a Lagrangian function expressing the original ordinary leastsquares loss function <span class="math inline">\(\|{\boldsymbol{\varepsilon }}\|_{2}^{2} = \|\mathbf{y}-\mathbf{X}{\boldsymbol{\beta}}\|_{2}^{2}\)</span> subject to theconstraint <span class="math inline">\(\|{\boldsymbol{\beta}}\|_{2}^{2}\le C\)</span> for some <span class="math inline">\(C &gt;0\)</span>.</p><p>Note that <strong>by calculating <span class="math inline">\({\hat{\beta }}_{R}=(\mathbf{X} ^{\mathsf{T}} \mathbf{X} +\lambda \mathbf{I})^{-1}\mathbf{X} ^{\mathsf{T}}\mathbf{y}\)</span> with a given <spanclass="math inline">\(\lambda\)</span> value, instead of simultaneouslysolving for <span class="math inline">\(\boldsymbol{\beta}\)</span> andlambda through <spanclass="math inline">\(\nabla{\mathcal{L}}(\boldsymbol{\beta}, \lambda) =0\)</span> (the usual practice of using Lagrangian functions forconstrained optimization), we do not necessary obtain a <spanclass="math inline">\(\boldsymbol{\beta}\)</span> that satisfies for agiven value of C. However, increasing the given <spanclass="math inline">\(\lambda\)</span> value monotonically decreases thevalue of <spanclass="math inline">\(\|{\boldsymbol{\beta}}\|_{2}^{2}\)</span>, thusmaking the constraint <spanclass="math inline">\(\|{\boldsymbol{\beta}}\|_{2}^{2} \le C\)</span> besatisfied for smaller values of <spanclass="math inline">\(C\)</span></strong>.</p><figure><img src="https://i.stack.imgur.com/YNwf5.png"alt="Image from https://math.stackexchange.com/questions/1723201/solution-for-arg-min-xt-x-1-xt-a-x-ct-x-quadratic" /><figcaption aria-hidden="true">Image fromhttps://math.stackexchange.com/questions/1723201/solution-for-arg-min-xt-x-1-xt-a-x-ct-x-quadratic</figcaption></figure><p>We can also demonstrate this with an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">beta_squared</span>(<span class="hljs-params">l, X, y</span>):<br><span class="hljs-meta">... </span>    beta = np.linalg.inv(X.T @ X + l * np.eye(<span class="hljs-built_in">len</span>(X))) @ X.T @ y<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> beta.T @ beta<br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>np.random.seed(<span class="hljs-number">0</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>X = np.random.rand(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>y = np.random.rand(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>beta_squared(<span class="hljs-number">0.01</span>, X, y)<br>array([[<span class="hljs-number">1.33717503</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>beta_squared(<span class="hljs-number">0.1</span>, X, y)<br>array([[<span class="hljs-number">0.37141735</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>beta_squared(<span class="hljs-number">1.0</span>, X, y)<br>array([[<span class="hljs-number">0.13504294</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>beta_squared(<span class="hljs-number">10.0</span>, X, y)<br>array([[<span class="hljs-number">0.0062103</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>beta_squared(<span class="hljs-number">100.0</span>, X, y)<br>array([[<span class="hljs-number">7.92298438e-05</span>]])<br></code></pre></td></tr></table></figure><p>Furthermore, as <spanclass="math inline">\(\|{\boldsymbol{\beta}}\|_{2}^{2} = \beta_{0}^{2} +\beta_{1}^{2} + \cdots + \beta_{p}^{2}\)</span>, increasing the given<span class="math inline">\(\lambda\)</span> value helps to constrainthe magnitude of the effects or regression coefficients corresponding todimensions which are redundant in high-dimensional explanatoryvariables.</p><p>This is visualized in the right diagram, where the constraint <spanclass="math inline">\(\|{\boldsymbol{\beta}}\|_{2}^{2} \le C\)</span> inthe Lagrangian function (the green circle) tangentially touches acontour of the original ordinary least squares loss function <spanclass="math inline">\(\|{\boldsymbol {\varepsilon }}\|_{2}^{2} =\|\mathbf{y} -\mathbf{X}{\boldsymbol{\beta}}\|_{2}^{2}\)</span> at apoint where one of the effects (or regression coefficients) is close to0.</p><figure><imgsrc="https://miro.medium.com/v2/resize:fit:720/format:webp/1*Jd03Hyt2bpEv1r7UijLlpg.png"alt="Modified from the plot used in &quot;The Elements of Statistical Learning&quot; by Saptashwa Bhattacharyya" /><figcaption aria-hidden="true">Modified from the plot used in "TheElements of Statistical Learning" by SaptashwaBhattacharyya</figcaption></figure><p>To further strengthen this effect and completely "zero out" certaineffects or regression coefficients, <strong>lasso regression (linearregression with L1 regularization)</strong> can be used in lieu of ridgerecursion.</p><p>In this case, the original ordinary least squares loss function <spanclass="math inline">\(\|{\boldsymbol {\varepsilon }}\|_{2}^{2} =\|\mathbf{y} -\mathbf{X}{\boldsymbol{\beta}}\|_{2}^{2}\)</span> subjectto the constraint <spanclass="math inline">\(\|{\boldsymbol{\beta}}\|_{1} = |\beta_{0}| +|\beta_{1}| + \cdots + |\beta_{p}| \le C\)</span> for some <spanclass="math inline">\(C &gt; 0\)</span>, as depicted in the leftdiagram, where the constraint <spanclass="math inline">\(\|{\boldsymbol{\beta}}\|_{1} \le C\)</span> in theLagrangian function (the cyan square) tangentially touches a contour ofthe original ordinary least squares loss function <spanclass="math inline">\(\|{\boldsymbol {\varepsilon }}\|_{2}^{2} =\|\mathbf{y} -\mathbf{X}{\boldsymbol{\beta}}\|_{2}^{2}\)</span> at apoint where one of the effects (or regression coefficients) is 0.</p><p>However, we cannot derive an analytical solution for <spanclass="math inline">\(\boldsymbol{\beta}\)</span> given the Lagrangianfunction for lasso regression (a.k.a. the loss function to minimize),<span class="math inline">\({\mathcal{L}}(\boldsymbol{\beta}, \lambda) =\|\mathbf{y} -\mathbf{X}{\boldsymbol{\beta}}\|_{2}^{2} + \lambda(\|{\boldsymbol{\beta}}\|_{1} - C)\)</span>. We can only iterativelysolve for <span class="math inline">\(\boldsymbol{\beta}\)</span> inthis case.</p><p>References:</p><ul><li>https://en.wikipedia.org/wiki/Lagrange_multiplier</li><li>https://stats.stackexchange.com/questions/401212/showing-the-equivalence-between-the-l-2-norm-regularized-regression-and</li><li>https://math.stackexchange.com/questions/1723201/solution-for-arg-min-xt-x-1-xt-a-x-ct-x-quadratic</li><li>https://arxiv.org/pdf/1509.09169.pdf</li><li>https://towardsdatascience.com/ridge-and-lasso-regression-a-complete-guide-with-python-scikit-learn-e20e34bcbf0b</li><li>https://en.wikipedia.org/wiki/Ridge_regression</li><li>https://online.stat.psu.edu/stat857/node/155/</li><li>https://allmodelsarewrong.github.io/ridge.html</li></ul><h1 id="kernel-ridge-regression">Kernel Ridge Regression</h1><p>Given the solution to ridge recursion above, <spanclass="math inline">\({\hat {\beta }}_{R}=(\mathbf{X} ^{\mathsf{T}}\mathbf{X} +\lambda \mathbf{I} )^{-1}\mathbf{X}^{\mathsf{T}}\mathbf{y}\)</span>, we can predict the value of theresponse variable <span class="math inline">\(y_{n + 1}(\mathbf{x}_{n +1})\)</span>, given an out-of-dataset vector of explanatory variables<span class="math inline">\(\mathbf{x}_{n + 1} = {\begin{bmatrix} 1 \\x_{n + 1, 1} \\ \vdots \\ x_{n + 1, p} \end{bmatrix}}\)</span>:</p><p><span class="math display">\[y_{n + 1}(\mathbf{x}_{n + 1}) =\mathbf{x}_{n + 1}^{\mathsf{T}} {\hat {\beta }}_{R} = \mathbf{x}_{n +1}^{\mathsf{T}} (\mathbf{X} ^{\mathsf{T}} \mathbf{X} +\lambda \mathbf{I})^{-1}\mathbf{X} ^{\mathsf{T}}\mathbf{y}\]</span></p><p>We can make some changes to <span class="math inline">\(\mathbf{x}_{n+ 1}^{\mathsf{T}} (\mathbf{X} ^{\mathsf{T}} \mathbf{X} +\lambda\mathbf{I} )^{-1}\mathbf{X} ^{\mathsf{T}}\mathbf{y}\)</span>.</p><h2 id="push-through-identity">Push-Through Identity</h2><p>Given two matrices <span class="math inline">\(\mathbf{P},\mathbf{Q}\)</span>, based on <span class="math inline">\(\mathbf{P} (I+ \mathbf{Q} \mathbf{P}) = (I + \mathbf{P} \mathbf{Q})\mathbf{P}\)</span>, we can derive <span class="math inline">\({(I +\mathbf{P} \mathbf{Q})}^{-1} \mathbf{P} = \mathbf{P} {(I + \mathbf{Q}\mathbf{P})}^{-1}\)</span>. This is known as the push-through identity,one of the matrix inversion identities used to derive the Woodburymatrix identity, which allows cheap computation of inverses andsolutions to linear equations.</p><p>References:</p><ul><li>http://www0.cs.ucl.ac.uk/staff/g.ridgway/mil/mil.pdf</li><li>https://en.wikipedia.org/wiki/Woodbury_bmatrix_identity</li></ul><p>Based on the push through identity, <spanclass="math inline">\(\mathbf{x}_{n + 1}^{\mathsf{T}} (\mathbf{X}^{\mathsf{T}} \mathbf{X} + \lambda \mathbf{I} )^{-1}\mathbf{X}^{\mathsf{T}} \mathbf{y} = \mathbf{x}_{n + 1}^{\mathsf{T}}\mathbf{X}^{\mathsf{T}} {(\mathbf{X} \mathbf{X}^{\mathsf{T}} + \lambda\mathbf{I})}^{-1} \mathbf{y}\)</span>.</p><p>As <span class="math inline">\(\mathbf{X} = {\begin{bmatrix}\mathbf{x}_{1}^{\mathsf{T}} \\ \vdots \\ \mathbf{x}_{n}^{\mathsf{T}}\end{bmatrix}}\)</span>, <spanclass="math inline">\(\mathbf{X}^{\mathsf{T}} = {\begin{bmatrix}\mathbf{x}_{1} &amp; \cdots &amp; \mathbf{x}_{n}\end{bmatrix}}\)</span>, we have:</p><ul><li><span class="math inline">\(\mathbf{x}_{n + 1}^{\mathsf{T}}\mathbf{X}^{\mathsf{T}} = {\begin{bmatrix} \mathbf{x}_{n +1}^{\mathsf{T}} \mathbf{x}_{1} &amp; \cdots &amp; \mathbf{x}_{n +1}^{\mathsf{T}} \mathbf{x}_{n} \end{bmatrix}}\)</span></li><li><span class="math inline">\(\mathbf{X} \mathbf{X}^{\mathsf{T}} ={\begin{bmatrix} \mathbf{x}_{1}^{\mathsf{T}} \mathbf{x}_{1} &amp; \cdots&amp; \mathbf{x}_{1}^{\mathsf{T}} \mathbf{x}_{n} \\ \vdots &amp; \ddots&amp; \vdots \\ \mathbf{x}_{n}^{\mathsf{T}} \mathbf{x}_{1} &amp; \cdots&amp; \mathbf{x}_{n}^{\mathsf{T}} \mathbf{x}_{n}\end{bmatrix}}\)</span></li></ul><p>Thus:</p><p><span class="math display">\[y_{n + 1}(\mathbf{x}_{n + 1}) ={\begin{bmatrix} \mathbf{x}_{n + 1}^{\mathsf{T}} \mathbf{x}_{1} &amp;\cdots &amp; \mathbf{x}_{n + 1}^{\mathsf{T}} \mathbf{x}_{n}\end{bmatrix}} {({\begin{bmatrix} \mathbf{x}_{1}^{\mathsf{T}}\mathbf{x}_{1} &amp; \cdots &amp; \mathbf{x}_{1}^{\mathsf{T}}\mathbf{x}_{n} \\ \vdots &amp; \ddots &amp; \vdots \\\mathbf{x}_{n}^{\mathsf{T}} \mathbf{x}_{1} &amp; \cdots &amp;\mathbf{x}_{n}^{\mathsf{T}} \mathbf{x}_{n} \end{bmatrix}} + \lambda\mathbf{I})}^{-1} \mathbf{y}\]</span></p><p>This means that we can calculate <span class="math inline">\(y_{n +1}(\mathbf{x}_{n + 1})\)</span> directly from the dot products among<span class="math inline">\(\mathbf{x}_{1}, \cdots,\mathbf{x}_{n}\)</span> and the dot products between <spanclass="math inline">\(\mathbf{x}_{n + 1}\)</span> and <spanclass="math inline">\(\mathbf{x}_{1}, \cdots, \mathbf{x}_{n}\)</span>,<strong>without having to explicitly know the values of <spanclass="math inline">\(\mathbf{x}_{1}, \cdots, \mathbf{x}_{n}\)</span>and <span class="math inline">\(\mathbf{x}_{n +1}\)</span></strong>.</p><p>Moreover, the dot product between two vectors of explanatoryvariables here can be generalized to <strong>any symmetric similarityfunction between two vectors of explanatory variables known as kernelfunctions</strong>.</p><p>Using <span class="math inline">\(k(\mathbf{x}_{i},\mathbf{x}_{j})\)</span> to denote the similarity between <spanclass="math inline">\(\mathbf{x}_{i}, \mathbf{x}_{j}\)</span> under thekernel function <span class="math inline">\(k\)</span>, let:</p><ul><li><span class="math inline">\(\mathbf{K} = \mathbf{X}\mathbf{X}^{\mathsf{T}} = {\begin{bmatrix} k(\mathbf{x}_{1},\mathbf{x}_{1}) &amp; \cdots &amp; k(\mathbf{x}_{1}, \mathbf{x}_{n}) \\\vdots &amp; \ddots &amp; \vdots \\ k(\mathbf{x}_{n}, \mathbf{x}_{1})&amp; \cdots &amp; k(\mathbf{x}_{n}, \mathbf{x}_{n})\end{bmatrix}}\)</span></li><li><span class="math inline">\(\mathbf{k}(\mathbf{x}_{n + 1}) =\mathbf{x}_{n + 1}^{\mathsf{T}} \mathbf{X}^{\mathsf{T}} ={\begin{bmatrix} k(\mathbf{x}_{n + 1}, \mathbf{x}_{1}) &amp; \cdots&amp; k(\mathbf{x}_{n + 1}, \mathbf{x}_{n}) \end{bmatrix}}\)</span></li></ul><p>We have:</p><p><span class="math display">\[y_{n + 1}(\mathbf{x}_{n + 1}) =\mathbf{k}(\mathbf{x}_{n + 1}) {(\mathbf{K} + \lambda \mathbf{I})}^{-1}\mathbf{y}\]</span></p><p>There are two benefits of kernel ridge regression.</p><ul><li>It allows implicitly performing nonlinear transformations on thevector representations of explanatory variables within similaritycalculation, allowing nonlinearity to be introduced. A prominent exampleis the widespread <ahref="https://en.wikipedia.org/wiki/Radial_basis_function_kernel">radialbasis function kernel</a>, first used in mining engineering("kriging").</li><li>It allows regressions on explanatory variables that do not haveexplicit vector representations but have similarity functions. There are"string kernels," "image kernels," "graph kernels," and so on.</li></ul><figure><imgsrc="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/Motivation-Finding-Gold.png"alt="Kriging (from UBC CPSC 340 slides)" /><figcaption aria-hidden="true">Kriging (from UBC CPSC 340slides)</figcaption></figure><figure><imgsrc="https://desktop.arcgis.com/es/arcmap/latest/extensions/geostatistical-analyst/GUID-49DA5B53-6E2F-4A29-BA01-2BF4F0259594-web.png"alt="Kriging" /><figcaption aria-hidden="true">Kriging</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/Kernel-Trick-for-Non-Vector-Data-1.png"alt="Kernel Trick for Non-Vector Data (from UBC CPSC 340 slides)" /><figcaption aria-hidden="true">Kernel Trick for Non-Vector Data (fromUBC CPSC 340 slides)</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/Kernel-Trick-for-Non-Vector-Data-2.png"alt="Kernel Trick for Non-Vector Data (from UBC CPSC 340 slides)" /><figcaption aria-hidden="true">Kernel Trick for Non-Vector Data (fromUBC CPSC 340 slides)</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Sarah Chasins&#39; Works on PL and HCI</title>
    <link href="/2023/11/05/Sarah-Chasins-Works-on-PL-and-HCI/"/>
    <url>/2023/11/05/Sarah-Chasins-Works-on-PL-and-HCI/</url>
    
    <content type="html"><![CDATA[<h1id="co-designing-for-transparency-lessons-from-building-a-document-organization-tool-in-the-criminal-justice-domain"><ahref="https://dl.acm.org/doi/10.1145/3593013.3594093">Co-Designing forTransparency: Lessons from Building a Document Organization Tool in theCriminal Justice Domain</a></h1><p>Investigative journalists and public defenders are crucial inscrutinizing and litigating significant matters concerning policeviolence and misconduct. However, they often need help navigatingthrough vast, unordered heaps of data, which adds strain to theirresource-constrained teams.</p><p>In partnership with U.S. public defenders and investigativejournalists, we developed an AI-enhanced tool through a joint designeffort to aid in working with such data. This process offered usvaluable insights into the requirements of resource-constrained teamsdealing with large data sets, including how some experts becameself-taught programmers to streamline their workflows.</p><p>We pinpointed three primary data needs throughout our collaborativedesign journey and established five design objectives.</p><h2 id="three-primary-data-needs">Three Primary Data Needs</h2><p>Data Cleaning, particularly the process of de-duplication. Thatinvolves identifying identical (images of pages are pixel-for-pixelcopies of each other) or nearly identical data (images are notpixel-for-pixel identical but capture the same physical document) withina dataset.</p><p>Data Extraction. The professionals also struggled in extractingrelevant information such as names, dates, locations, and case numbersfrom case files due to their disparate formats and layouts,necessitating extensive, hands-on work.</p><p>Data Organization. There was a need to systematically organize PDFdocuments by specific cases, complicated by the fact that cases may bespread across numerous documents and folders, or conversely, severalcases might be compiled into one extensive PDF.</p><h2 id="five-fundamental-design-principles">Five Fundamental DesignPrinciples</h2><p>Human Control and Intervention. The design must prioritize aidingusers over complete automation of the process.</p><p>Non-Interference with Existing Practices. The design should integrateseamlessly with existing workflows and practices.</p><p>Adaptability to Data Diversity.</p><p>High-level Abstractions. General-purpose languages like Python or Rdemand extensive technical expertise. Pre-built software, on the otherhand, offers limited flexibility.</p><p>Cost-Sensitive Solutions.</p><h2 id="results">Results</h2><p>Participants in our sessions became adept in all three programmingparadigms (visual, PBE, and text-based interfaces).</p><ul><li>This contradicts the common misconception that non-technical expertsneed formal coding training to handle text-based programming; if thetools are appropriately supportive, they can.</li><li>Rather than creating new code, participants preferred to modify whatwas already there. Particularly with text-based coding, almost all choseto adapt sample code instead of originating their own, aligning withprevious research on the blank-page syndrome.</li></ul><hr /><h1 id="a-need-finding-study-with-users-of-geospatial-data"><ahref="https://dl.acm.org/doi/abs/10.1145/3544548.3581370">A Need-FindingStudy with Users of Geospatial Data</a></h1><p>Current geospatial analysis and visualization tools presentsignificant learning curves and usability challenges.</p><ul><li>Finding and transforming geospatial data to specific spatiotemporalconstraints.</li><li>Grasping the behavior of geospatial operators.</li><li>Tracking the provenance of geospatial data, including cross-systemprovenance.</li><li>Exploring the cartographic design space.</li></ul><h2 id="grasping-the-behavior-of-geospatial-operators">Grasping thebehavior of geospatial operators</h2><p>Users had to run operators and manually check outputs to understandoperator semantics.</p><p>Live programming, which offers users immediate visual feedback onprogram behavior using concrete inputs, could align with users' existingdebugging patterns of using small collections of geographic features orpixels as test cases to infer operator behavior.</p><h2id="tracking-the-provenance-of-geospatial-data-including-cross-system-provenance">Trackingthe provenance of geospatial data, including cross-systemprovenance</h2><p>The GIS tools used by participants did not track the steps leading tofinal outputs, complicating the replication of previous analyses.</p><p>Modifying maps or adapting them to new datasets often meantlaboriously reverse engineering the initial analysis steps.</p><p>Creating repeatable and communicable geospatial workflows was astruggle for GIS users. Limitations in current history features made itdifficult to recover information on the current analysis state orrevisit past analysis decisions.</p><p>The problem of tracking provenance across different systems was alsoprominent.</p><p>Users often kept informal records of the steps taken in dataacquisition, cleaning, analysis, and visualization, which spannedseveral applications. For instance, one user used macOS Notes to detaila process involving data transfer between Sentinel Hub, QGIS,Illustrator, and Photoshop, documenting everything from selecting aSentinel-2 image to reassembling raster segments in Illustrator. Thiskind of multi-tool orchestration was typical among our subjects, yetnone had automated systems to log data lineage across theseplatforms.</p><h2 id="exploring-the-cartographic-design-space">Exploring thecartographic design space</h2><p>Many participants used direct manipulation tools for geospatial datavisualization, which discarded all geographical metadata, posingchallenges to revising the analysis after starting the visualization.This uncovers a potential for development in tools that (1) unifygeospatial analysis with cartographic design and (2) preserve thegeospatial data aspects of visual elements while supporting directmanipulation.</p><p>Existing research suggests that combining scripting with directmanipulation for visually oriented tasks is feasible. TheSketch-n-sketch application is a testament to the successful merger ofthese methods for SVG graphics.</p><p>Such a combined approach could also remedy the fundamental issueparticipants faced when using direct manipulation tools for cartography:the need to recreate map designs in code after finishing a design.</p><hr /><h1 id="how-statically-typed-functional-programmers-write-code"><ahref="https://dl.acm.org/doi/10.1145/3485532">How Statically-TypedFunctional Programmers Write Code</a></h1><p>A deeper comprehension of the coding methods of statically-typedfunctional programmers could lead to the creation of more practicaltools, more user-friendly programming languages, and better gatewaysinto programming communities.</p><p>These programmers utilize their compilers for more than justproducing an executable; they also use compilers as corrective anddirective aids.</p><ul><li>Compilers as corrective tools. Compiler error messages were usefulnot just to fix their programs but also to correct their mental modelsof the problem domain.</li><li>Compilers as directive tools. Many developers treat compiler errorsas to-do lists, guiding their subsequent coding actions. A typicalprocess includes beginning a program change with a minor alteration andcompiling to receive error-driven sub-tasks - essentially turning errormessages into a step-by-step guide for coding.</li></ul><p>It's not uncommon for programmers to compile their code with theexpectation of errors, using the compiler to validate the direction oftheir development.</p><p>Statically-typed functional programmers often seek feedback fromautomated tools even when their code isn't yet operational, suggestingthat such tools should strive to extract as much information as possiblefrom non-compilable code.</p><p>When comparing pattern matching with combinators, statically-typedfunctional programmers report less cognitive and time pressure with theformer. This could be due to pattern matching's explicit textualrepresentation of tasks, explicit handling of recursion, or consistentinterface across various data structures. Nonetheless, some programmersprefer to rewrite their code using combinators eventually. Ideally, atool would assist in this process, starting with a data type and guidingthe programmer through case completion, subsequently offering a seriesof combinators as a refined alternative.</p><p>It is beneficial to recognize which language constructs allow forlow-workload or opportunistic construction and how these constructs arevalued within the programming community.</p><p>There's a demand for tools that minimize the difficulty of alteringtypes during development. Furthermore, these tools should facilitate thenatural cyclic changes of a developer's focus between modifying typesand modifying expressions, possibly by employing program repairtechniques to predict how changes in one will affect the other.</p><p>Program sketches provide a wealth of information about undefinedfunctions, like inferred types and potential uses. Sincestatically-typed functional programmers regularly employ this method ofdrafting and refining code, there's a clear opportunity for tools thatcould enhance or even automate parts of this practice.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Research Programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Conversation with Prof. Robert Xiao</title>
    <link href="/2023/10/23/Conversation-with-Prof-Robert-Xiao/"/>
    <url>/2023/10/23/Conversation-with-Prof-Robert-Xiao/</url>
    
    <content type="html"><![CDATA[<h1 id="abstract">Abstract</h1><p>The following is a polished version of a conversation with <ahref="https://www.robertxiao.ca/">Prof. Robert Xiao</a> on theconfluence of Programming Languages, Software Engineering, andHuman-Computer Interaction (HCI) for research programming. The mainpoints mentioned by Prof. Robert Xiao are as follows.</p><ul><li>Determining which aspects of research programming are amenable tosystematization is a challenge.</li><li>Advancements in code tracing, like PyTorch 2's bytecode analysis,which, while not addressing verifiability directly, allows for in-depthprogram behavior analysis.</li><li>Understanding the influence of input data on outputs is central tothe challenge of explainable AI (XAI). However, pinpointing specificmodel features or layers leading to an output is perhaps more accessibleand useful for debugging.</li><li>The concept of 'radioactively' tagging data to trace its influencethrough a model is an intriguing one, akin to tracking the uptake of atagged substance in a biological system.</li><li>There are many scenarios with extensive object interactions inprogramming. Game programming provides a more structured context tostudy these complexities, with ample open-source resources for research.The difficulty in game programming arises from the myriad interactionsbetween diverse object systems - like physics, collision, andinteraction logic. Coding these interactions is a lot of work. It wouldbe enlightening to study how game developers handle this complexity andwhether there are ways to simplify it. Game studios, being the behemothsthey are, would undoubtedly embrace methods to alleviate the strenuousnature of their programming efforts.</li></ul><h1 id="polished-transcript">Polished Transcript</h1><p>Robert Xiao: [00:00] Could you share the focus of your research andhow it's pertinent to this project? Also, what do you aim to achievewith it? There seem to be several components you've touched upon, suchas visualization, pipeline development, and programming processes. Theserepresent different approaches you could potentially adopt or considerintegrating into a comprehensive pipeline. I believe the ultimate goalhere is to aid research programmers in accelerating system developmentwhile minimizing errors, correct?</p><p>Jifeng Wu: [00:43] Yes, precisely.</p><p>Robert Xiao: [00:45] Let's delve into your research focus. How doesyour current work align with this?</p><p>Jifeng Wu: [00:52] My ongoing research isn't directly related, asthis is a path I'm contemplating for a future Ph.D. project, which Istill need to commit to. I'm currently working on my master's thesistitled 'Type Inference for Python.' It aims to infer types in Pythoncode, which often lacks annotations. This lack can lead to IDEsproviding less accurate suggestions. With type information, predictionsbecome more reliable, enhancing the coding and code interactionexperience.</p><p>Robert Xiao: [01:54] So, to clarify, your project is about developinga system for automatic type inference that assists IDEs, not justcreating a type annotation database. Existing tools do offer preliminarytype extraction, but I'm interested in the novel contribution yourresearch makes.</p><p>Jifeng Wu: [02:31] Exactly. I'm not just extracting types; I'minferring them in unannotated code bases to enhance IDEfunctionality.</p><p>Robert Xiao: [02:45] Understood. There are incremental typing toolsavailable, but we can explore that later. For now, it's great thatyou're well-versed in Python, especially since it's prevalent in LLMresearch. An interesting aspect of your direction could be mitigatingbugs, which often derail projects. Implementing automated checks couldbe invaluable. However, the challenge lies in determining which aspectsof research programming are amenable to systematization.</p><p>Jifeng Wu: [06:17] My vision is to support researchers engaged indata analysis or custom model design in an environment akin to Jupyternotebooks. And touching on debugging, I see a potential to harnessfunctional programming due to its purity and ease of debugging.</p><p>Robert Xiao: [07:22] The question, however, is the application offunctional programming to research code, which often depends onpre-existing libraries. While functional design has its merits, thepracticality of integrating it into the current ecosystem is worthdiscussing.</p><p>Jifeng Wu: [07:55] I concede the point; many codebases are indeedmessy. I'm contemplating a clean slate design, potentially developing anew language or library to demonstrate the concept.</p><p>Robert Xiao: [08:21] It's noteworthy that there have beenadvancements in code tracing, like PyTorch 2's bytecode analysis, which,while not addressing verifiability directly, allows for in-depth programbehavior analysis.</p><p>Jifeng Wu: [11:09] Certainly. There are facets of current notebooktechnologies that pique my interest, primarily due to their inadequatesupport, with debugging being a prime example. Debugging encompasses twokey aspects: the logic of the program, as previously mentioned, and dataprovenance. Sometimes, despite the sound logic, I need to delve into theorigins of an unexpected output data point by tracing the implicitcalculations that led to it.</p><p>[11:58] This necessity for data provenance tracking is something Ifind critically important in my daily research, and I understand it'sknown as the data provenance problem.</p><p>Robert Xiao: [12:09] Indeed, if you've ever discussed this withMargo, you're likely well-versed in the topic, given her researchfocuses precisely on provenance. Many of her colleagues are exploringthis area, which is complex, particularly in the context of outputs fromextensive machine learning models. While it would be beneficial to tracedata points back to their origins, integrating such a mechanism into amodel is a formidable challenge.</p><p>[12:55] As a developer, I'm keen on understanding the influence ofinput data on outputs, which is central to the challenge of explainableAI (XAI). Resolving this would mark a significant milestone. However,pinpointing specific model features or layers leading to an output isperhaps more accessible and useful for debugging.</p><p>[13:53] For instance, identifying a misconfigured layer responsiblefor input-related issues would be invaluable. Although considering theinterconnected nature of model layers, this remains a complex task.</p><p>[14:57] The concept of 'radioactively' tagging data to trace itsinfluence through a model is an intriguing one, akin to tracking theuptake of a tagged substance in a biological system. Yet, translatingthis to a machine learning environment presents a unique set ofchallenges.</p><p>[16:57] While I'm not deeply familiar with the latest advancements inthis field, it's clear that XAI could significantly benefit HCIapplications. The goal is to incrementally address these challenges bydeveloping models that acknowledge tagged inputs throughout the dataprocessing pipeline.</p><p>[17:58] These are some thoughts on the subject. I'd like to knowwhich aspects you find most relevant or valuable for your futureendeavors.</p><p>Jifeng Wu: [18:15] The examples and pointers you've provided areinsightful. As someone with a software engineering background, I believethat adapting certain constructs, like functional programming andtraditional program analysis, could offer potential solutions. These aredirections I'm considering for my Ph.D. research.</p><p>Robert Xiao: [18:58] Exploring program tracing for optimization couldprove fruitful, given the untapped potential in that area. Thephilosophy I subscribe to favors solutions that minimize user effort,exemplified by the tracing compiler feature in PyTorch 2.0. UnlikeTensorFlow model, which requires upfront operation declarations,PyTorch's immediate mode operation presents a more straightforwardapproach for users, facilitating a clearer understanding of variableflow during execution.</p><p>Jifeng Wu: [ 24:12 ] Incidentally, as a researcher in HCI, have youever engaged in work that marries aspects of software engineering,specifically functional programming, with HCI?</p><p>Robert Xiao: [ 24:28 ] My experience with functional programming in aresearch capacity is virtually nonexistent. My computer scienceeducation covered the basics of functional programming - I dabbled inScheme and Racket - but in terms of research, functional programminghasn't been part of my repertoire. Our work typically involves Python,C#, and various visual programming tools, none of which adhere to afunctional programming paradigm.</p><p>[ 24:56 ] Game programming, which encompasses many of our VR/ARprogramming, is about as far removed from functional programming aspossible. It's heavily state-driven, with an ever-changing stateenvironment. A functional approach could be applied to VR/ARdevelopment. It could offer advantages over current methods. I'm awareof actor model programming being used for VR/AR experiences, though it'snot functional programming per se, and I have yet to adopt it in my workpersonally. Conversely, when it comes to software engineering, we dointegrate its methodologies into our software creation process. Thisincludes best practices like code structuring for reusability,modularization, refactoring, and especially source control, which I findis grossly underutilized in research programming, among otherthings.</p><p>Jifeng Wu: [ 26:33 ] Understood, yes.</p><p>My vision, when I speak of integrating functional programming, isn'tconfined to conventional languages like Scheme or Racket that youmentioned earlier.</p><p>My thoughts were more aligned with programming paradigms like theactor model you described, as well as visual programming. I'm interestedin approaches that are more formalized, easier to reason about, andoffer a clearer path to verifying properties and facilitatingdebugging.</p><p>Robert Xiao: [ 27:18 ] With general-purpose imperative coding, thedebugging process is, frankly, a nightmare. Although my personalexperience in developing large-scale games is limited, our researchtypically involves creating specific VR/AR experiences. These aresmaller in scale, utilizing existing libraries to build a finite numberof interactive elements within a controlled environment. This contrastswith the vast complexity of full-scale game development, where thedifficulty arises from the myriad interactions between diverse objectsystems - like physics, collision, and interaction logic.</p><p>[ 28:55 ] Take collision logic as an instance; the multitude ofpossible outcomes from a single collision event can be incrediblyintricate to code. If we consider bullet dynamics in games, the behaviorof these projectiles upon impact with walls, enemies, or objects variesdramatically, leading to a cascade of different effects. Coding theseinteractions is a lot of work. It would be enlightening to study howgame developers handle this complexity and whether there are ways tosimplify the process. The Entity Component System (ECS) attempts tomitigate this by adopting an actor-like model, but even then, complexityescalates rapidly as interactions increase.</p><p>[ 30:56 ] Despite efforts to manage these interactions, there comes apoint where local decisions require some form of higher-levelorchestration. When a bullet is fired, for instance, numerous actionsmust be coordinated, from ammo count adjustments to triggeringanimations. All this complexity makes game programming something I wouldnot want to revisit except in the context of my research. However, therelies a vast potential for impactful research in understanding and easingthe complexities of game development. Game studios, being the behemothsthey are, would undoubtedly embrace methods to alleviate the strenuousnature of their programming efforts. Yes, indeed.</p><p>Jifeng Wu: [32:00] Indeed, that aligns with my central interests. Mymaster's thesis on Python type inference encountered similar challengesto those you've highlighted. In analyzing types, one must grapple withsubstantial propagation throughout the program. This is precisely theissue at hand, and it serves as a prime motivator in my quest to developformalizations that simplify the process for programmers, particularlyin areas like game development, where complex interactions arecommonplace.</p><p>Robert Xiao: [32:45] You've sparked a thought here - this may be adigression - but I'm curious. Has there been research into the amount oftyping necessary for untyped code to converge? You made an excellentpoint about the recursive search required in untyped code to determinetypes, which resembles an intricate graph search. However, it's morethan that because the connections in the 'type graph' are not alwaysapparent. This raises an intriguing theoretical question: At what pointin a code base's typing does the cost shift from an exponential to alinear time complexity? It's a highly theoretical question, indeed, andone that surely must have been examined in terms of computationalcomplexity.</p><p>[34:58] It's fascinating because most research focuses on strongtyping systems and type inference within defined parameters. But thedynamics change with untyped constructs. Apologies for the tangent -it's just a curious question.</p><p>Jifeng Wu: [35:32] Your point is very interesting, and it ispertinent to my future research endeavors.</p><p>Robert Xiao: [35:39] There ought to be studies on this - howcomputationally complex is a type system? The PL community has likelydelved into this. However, the issue becomes significantly morecompelling when considering untyped languages. Sorry for the tangent,but it's a topic worth exploring.</p><p>Jifeng Wu: [36:15] Returning to our discussion, my work in typeinference for Python resonates with your mention of interaction-heavydomains like game programming.</p><p>Robert Xiao: [36:27] Certainly. Game programming exemplifies ascenario with extensive object interactions, which is atypical in mostsystems where such interactions are minimized. For instance, hiring astudent triggers a cascade of bureaucratic actions, illustrating how asingle decision can activate multiple layers of complexity. Managingthese interactions presents a formidable challenge in softwareengineering - taming the complexity is a substantial part of the job.However, game programming provides a more structured context to studythese complexities, with ample open-source resources for research.</p><p>Jifeng Wu: [38:55] Your insights on game programming are quitevaluable.</p><p>[38:59] I hadn't realized the prominence of such problems in thatfield. Your points offer an excellent foundation for my research intothese issues.</p><p>Robert Xiao: [39:16] There are indeed intriguing researchopportunities at the intersection of AI, software, programminglanguages, and HCI. Although my HCI pursuits are broad, one key HCIinterest is explainable AI. As language models advance, the ability toexplain AI operations lags, posing a risk of increasing reliance oninscrutable systems. Advancing explainable AI methodologies will becritical in HCI, particularly in the coming years.</p><p>Jifeng Wu: [42:10] Yes, indeed. What captivates my interest more thanthe empirical approach to software engineering - like automated bugdetection and performance optimization - is the human-computerinteraction aspect, particularly making developers' lives easier. Thisis crucial, especially for rapid prototyping.</p><p>Robert Xiao: [42:42] Right, your IDE example aligns perfectly withthat. It's a tool that enhances usability for people - expanding howthey interact with typing. It could very well be something forpublication. So, you're drawing connections here. When do you expect tograduate?</p><p>Jifeng Wu: [43:05] If all goes according to my advisor's plan, Ishould graduate in May 2024.</p><p>Robert Xiao: [43:13] Okay. And your advisor is?</p><p>Jifeng Wu: [43:16] Caroline Lemieux from the Software PracticesLab.</p><p>Robert Xiao: [43:20] Oh, yes, she's a recent addition. So, she'sguiding you toward a May graduation. And regarding your Ph.D., are youconsidering continuing in the Software Practices Lab or exploring otherareas?</p><p>Jifeng Wu: [43:38] Well, our lab's focus is split between userstudies and the technical side, like bug detection or software fuzzing,and, on the other hand, theoretical topics like formal semantics. Thereisn't much overlap with HCI and usability, so I'm uncertain about whereI'll pursue a Ph.D., if at all, but likely not within our SoftwarePractices Lab.</p><p>Robert Xiao: [44:21] That's something to ponder, especially as youapproach graduation in May. Are you already applying to Ph.D.programs?</p><p>Jifeng Wu: [44:34] I am still deciding. I'm still considering myoptions.</p><p>Robert Xiao: [44:38] Sure, it's a big decision. My focus is onVR/AR-related projects, where my funding comes from. It's trickier toshift to developing support tools for developers without an establishedportfolio. However, I'm open to discussing co-advisory opportunities orcommittee collaborations if you pursue a Ph.D. here at UBC.</p><p>Jifeng Wu: [45:44] That's encouraging to hear.</p><p>Robert Xiao: [45:45] To clarify, I'm not sure I could supervise aPh.D., but I'm open to discussing future possibilities.</p><p>Jifeng Wu: [45:59] That aligns with my thoughts as well.</p><p>Robert Xiao: [46:01] Engaging in research discussions can help refineyour interests, which is beneficial for crafting a strong researchstatement for Ph.D. applications. These conversations can guide yourinitial research direction, even though your focus may evolve.</p><p>Jifeng Wu: [47:10] Thank you for the insights and advice today.They've been very helpful, and I'll reflect on them further.</p><p>Robert Xiao: [47:24] I'm glad to assist. You should have my emailaddress.</p><p>Jifeng Wu: [47:30] Is it listed on your website?</p><p>Robert Xiao: [47:32] It should be - unless my website isn't updatedwith my current email, which would be a blunder. Let me check.</p><p>Jifeng Wu: [47:36] I'll look it up.</p><p>Robert Xiao: [47:37] If it's on there, then it's correct.</p><p>Jifeng Wu: [47:45] Yes, it's on your site.</p><p>Robert Xiao: [47:47] Great, feel free to reach out anytime.</p><p>Robert Xiao: [47:56] I'm impressed by your work and would be happy toattend your thesis presentation when the time comes.</p><p>Jifeng Wu: [48:15] I appreciate that. Our conversation today has beenvery enjoyable.</p><p>Robert Xiao: [48:21] It was an enlightening chat, indeed. If you havefurther questions or topics, don't hesitate to email me.</p><p>Jifeng Wu: [48:34] For now, that's all I have. If something elsecomes up, I'll send you an email. Thank you.</p>]]></content>
    
    
    <categories>
      
      <category>Conference and Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nico Ritschel&#39;s Ph.D. Defense Summary</title>
    <link href="/2023/10/13/Nico-Ritschel-s-Ph-D-Defense-Summary/"/>
    <url>/2023/10/13/Nico-Ritschel-s-Ph-D-Defense-Summary/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cs.ubc.ca/~ritschel/">Nico Ritschel</a>'sresearch focuses on refining block-based programming by integratingelements from visual programming to make it more accessible andeffective for end-users, especially in the robotics domain.</p><h1 id="problem-statement">Problem Statement</h1><ul><li>Block-based programming is mainly used for computer scienceeducation. Can they target other tasks, such as end-userprogramming?</li><li>The challenge: end-users often need to write larger, real-worldprograms, contrasting with the simple toy examples students typicallyhandle.</li><li>Traditional block-based programming struggles with scalability,especially in terms of readability.</li><li>While visual end-user programming tools like Excel and Simulinksupport bigger programs through domain-specific visual abstractions,creating new visual languages is difficult and costly.</li><li>Solution Approach: Merge design features from visual programminginto block-based programming languages.</li></ul><h1 id="target-domain-robotics">Target Domain: Robotics</h1><ol type="1"><li><strong>Current Scenario:</strong><ul><li>Professional tools exist, but they're challenging to use.</li><li>There needs to be more effective block-based tools in thedomain.</li></ul></li><li><strong>Robot Arms for Factory Floors:</strong><ul><li>Task: Coordinate and synchronize two robot arms.</li><li>Issues: Current block-based languages require complex solutions likenontrivial mutexes.</li><li><strong>Solution &amp; Studies:</strong><ul><li>Proposed two design ideas:<ol type="1"><li>Represent programs for each arm vertically and side-by-side.Synchronized actions appear as shared nodes between the arms.</li><li>A left-to-right flow resembling video editing.</li></ol></li><li>The 'side-by-side' design was selected.</li><li>A study found that end-users using this design outperformed thoseusing a commercial, text-based tool.</li></ul></li></ul></li><li><strong>Mobile Robots for Warehouses &amp; Labs:</strong><ul><li>Task: Handle large tasks across multiple workstations.</li><li>Issues:<ul><li>Difficulty decomposing long programs and locating where to makechanges.</li><li></li></ul></li><li><strong>Solutions &amp; Features:</strong><ul><li>Introduced block-based language that supports functionaldecomposition.</li><li>Provided two separate canvases: one for task composition/movementand the other for low-level task definitions.</li><li>Included triggers as dataflow graphs to improve the visibility ofnested expressions and enhance user freedom in structuringprograms.</li></ul></li></ul></li></ol><h1 id="questions-addressed-during-the-practice-session">QuestionsAddressed During the Practice Session</h1><ol type="1"><li><strong>Why focus on the two robotics scenarios?</strong><ul><li>They are important and relevant in the robotics domain.</li><li>These scenarios present challenges for end-users learning toprogram.</li><li>They represent a complex form of programming that's worthrefining.</li></ul></li><li><strong>Would functional programming principles enhance end-uservisual programming, given the imperative nature of block-basedprogramming?</strong><ul><li>The inherent complexity in robotics means many elements can't besimplified.</li><li>Introducing functional programming might not necessarily boost userproductivity.</li></ul></li><li><strong>What was the environment for user studies?</strong><ul><li>Engaged actual end-users for genuine feedback.</li><li>Also recruited students from non-computer science departments for abroader perspective.</li></ul></li></ol><h1 id="questions-asked-during-the-ph.d.-defense">Questions Asked Duringthe Ph.D. Defense</h1><ul><li>How were the visions and observations formulated?<ul><li>Separate users into traditional versus new environments and thencompare.</li><li>Gain knowledge of their needs and patterns.</li><li>Test on a small pool of users to refine the design.</li></ul></li><li>How do you account for the spectrum of end-users regardingprogramming experience, domain-specific task time, and toolexperience?</li><li>Which results were the most and least robust?</li><li>What factors made the tool easy to learn?<ul><li>The "blocks" concept is already well-known.</li><li>The tool matches the users' previous domain-specific knowledge(e.g., separate columns for two arms).</li></ul></li><li>How realistic is the decomposition at scale? Any evidence fromrelated work?<ul><li>More of a "lower bound," limited by the time of the user study.</li></ul></li><li>Why was the comparison made between block-based methods andgraph-based methods?<ul><li>Graph-based methods are already used in end-user programming, suchas game programming.</li></ul></li><li>What is the importance and implication of the determined p-value?<ul><li>We have a null hypothesis - there is no difference between theperformance of the two groups.</li></ul></li><li>What improvements (e.g., 5%) are worthwhile?</li><li>What are the advantages of block-based approaches over dataflow, andhow can this be further investigated?<ul><li>Different aspects, e.g., reading vs writing</li><li>Different domains, e.g., robotics vs game</li><li>Different styles of programs</li><li>Different representations of graphs</li></ul></li><li>How are potential accessibility challenges addressed?<ul><li>Already addressed to a degree in the normal block-based domain.</li><li>Domain-specific challenges are directions for future work.</li></ul></li><li>How does the new tool compare with LLMs?<ul><li>Can work together.</li><li>Have advantages in evolution and understanding vs. writing somethingthat would work the first time.<ul><li>Debugging.</li><li>Reliability.</li><li>No training required.</li></ul></li></ul></li><li>What follow-up studies are anticipated for real-world usage? How doyou anticipate the tool's usability in practical scenarios? Follow-upstudies based on real-world usage in the wild may encounterunanticipated, really specific problems. Is your tool something someonewants to use in practice?</li><li>Would featuring a table of reactive values a la Excel bebeneficial?</li><li>How do different domains within computer science influence thetool's design and analysis? What interdisciplinary expertise would bebeneficial?<ul><li>Information visualization.</li><li>Designing design drafts with an expert in visualization would bebeneficial.</li></ul></li><li>What about your tool's applicability to expert programmers insteadof end users?<ul><li>Different design goals.</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Conference and Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Conversation with Prof. Margo Seltzer</title>
    <link href="/2023/10/10/Conversation-with-Prof-Margo-Seltzer/"/>
    <url>/2023/10/10/Conversation-with-Prof-Margo-Seltzer/</url>
    
    <content type="html"><![CDATA[<h1id="introduction-to-prof.-margo-seltzer-quoted-from-wikipedia">Introductionto Prof. Margo Seltzer (quoted from Wikipedia)</h1><p>"<strong>Margo Ilene Seltzer</strong> is a professor and researcherin computer systems. She is currently the Canada 150 Research Chair inComputer Systems and the Cheriton Family Chair in Computer Science atthe <ahref="https://en.wikipedia.org/wiki/University_of_British_Columbia"title="University of British Columbia">University of BritishColumbia</a>. Previously, Seltzer was the Herchel Smith Professor ofComputer Science at Harvard University's <ahref="https://en.wikipedia.org/wiki/John_A._Paulson_School_of_Engineering_and_Applied_Sciences"title="John A. Paulson School of Engineering and Applied Sciences">JohnA. Paulson School of Engineering and Applied Sciences</a> and directorat the <ahref="https://en.wikipedia.org/wiki/Center_for_Research_on_Computation_and_Society"title="Center for Research on Computation and Society">Center forResearch on Computation and Society</a>."</p><h1id="question-how-did-you-conduct-research-across-a-variety-of-domains-from-operating-systems-to-machine-learning-systems">Question:How did you conduct research across a variety of domains, from operatingsystems to machine learning systems?</h1><p>Prof. Seltzer: I've always been intellectually curious and I findalmost all research problems fascinating. Engaging in discussions withdiverse people has also fueled my passion. When I was a junior facultymember, I focused on tenure and focused on core systems research, butthat was miserable. However, I still explored different areas.</p><p>My deep interest lies in software architecture, even though my Ph.D.was in storage. I was fortunate when another lab decided to support myresearch. This shift allowed me to progress from storage to coresystems.</p><p>I also got interested into data provenance, especially realizing thatwe could do a lot more at the systems level.</p><p>Transitioning to machine learning was a natural progression, drivenmainly by collaborations with graduate students and other partners.</p><h1id="question-why-did-you-pursue-a-ph.d.-in-storage-if-you-were-more-interested-in-core-systems">Question:Why did you pursue a Ph.D. in storage if you were more interested incore systems?</h1><p>Prof. Seltzer: Before pursuing my Ph.D., I was primarily involvedwith databases. However, as I delved deeper, my curiosity veered towardssystem issues.</p><h1id="question-how-do-you-manage-evolving-interests-during-a-ph.d.">Question:How do you manage evolving interests during a Ph.D.?</h1><p>Prof. Seltzer: It's uncommon for Ph.D. students to plot a lifetimeresearch agenda. Instead, it's about producing one miracle per paper anddeveloping the skills to do research for your whole life. The key is tofocus on accomplishing your first piece of independent research duringyour Ph.D.</p><p>Choosing a supervisor you get along well with is most important. It'sessential to be involved in an interesting area and join a lab thataligns with your interests. However, a perfect match isn't alwaysnecessary. Looking at co-supervised students can give insights intopotential co-supervision opportunities.</p><p>As a Ph.D. student, your primary goal should be to define yourresearch problem. Although you shouldn't jump between entirely differentareas, it's crucial to select a project that genuinely interests you inthe first year. Other interests can be pursued as side projects.</p><p>To maintain engagement, pick a broad domain that offers a plethora ofprojects you find captivating.</p><p>Before starting a Ph.D., actively seek out research papers thatintrigue you and identify the labs behind them.</p><h1id="question-whats-your-vision-for-the-future-of-computer-systems">Question:What's your vision for the future of Computer Systems?</h1><p>Prof. Seltzer: A pressing concern is that people are not very good atwriting software that works. We need to develop strategies to createsoftware with minimal bugs from the ground up. Embracing modularity canbe a solution, and the solution is about software architecture.</p><p>Researchers focus on verifying existing software products because thepublication cycle is way too short. Moreover, we lack good metrics forevaluating software architecture, and there is no equivalent of adebugger for software architecture. Software architecture, in itscurrent state, remains an art more than a well-defined discipline.Often, professionals in the field rely heavily on mentors, and theydon't see the growth of a new generation of software architects.</p><h1 id="personal-comments-and-recommendations">Personal Comments andRecommendations:</h1><p>I'm pleased to note your inspiration derived from challenges in the'Type Inference for Python' project, including the importance offormalizations and specifications both for the design goal and forimplementation, the tedious and fault-prone task of setting up anevaluation pipeline, etc.</p><p>Deep learning thrives in domains with a clear ground truth. In otherscenarios, basic probabilistic methods might offer better results.</p><p>Your task of combining AST traversal with introspection of liveobjects reminds me of the work I did in "StarFlow: A Script-Centric DataAnalysis Environment" and Arpan Gujarati's tracing infrastructureefforts in Python.</p><p>Should you wish to delve deeper into software architecture for datascience and machine learning, I recommend focusing on constructingintricate software like operating systems instead of shorter datawrangling scripts. Or you can explore the challenges in experimentalframeworks. For insights on this, consider discussing with Joe Wonsil.Additionally, Philip Guo at UCSD has an intriguing Ph.D. thesis abouttools for research programmers that might be of interest to you.</p>]]></content>
    
    
    <categories>
      
      <category>Conference and Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pre-MICCAI Workshop@UBC Observations and Gained Insights</title>
    <link href="/2023/10/08/Pre-MICCAI-Workshop-UBC-Observations-and-Gained-Insights/"/>
    <url>/2023/10/08/Pre-MICCAI-Workshop-UBC-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<p>From the <ahref="https://sites.google.com/view/pre-miccai-ubc/home">Pre-MICCAIWorkshop@UBC</a> website:</p><blockquote><p>The Pre-MICCAI Workshop is a dynamic and innovative platform thatunites machine learning and medical computer vision. As a prelude to theprestigious MICCAI (Medical Image Computing and Computer-AssistedIntervention) conference, this workshop serves as a vital nexus whereexperts, researchers, and enthusiasts converge to explore cutting-edgeadvancements, exchange knowledge, and foster collaborative partnershipsin the field of medical image analysis.</p></blockquote><h1id="shaoting-zhang-shanghai-ai-lab---keynote-talk-2---foundation-models-in-medicine-generalist-vs-specialist">ShaotingZhang (Shanghai AI Lab) - Keynote Talk 2 - Foundation Models inMedicine: Generalist vs Specialist</h1><ul><li>Advantages of Large Models:<ul><li>Emergent abilities.</li><li>Long-tail problems (only a small amount of fine-tuning is requiredfor downstream tasks and does not require a tremendous amount of datacollection and labeling).</li><li>Model sharing strengthens data security.</li></ul></li><li>Shanghai AI Lab presents <ahref="https://github.com/openmedlab">OpenMEDLab (open-source medicalimage and language foundation models)</a>.</li><li>Utilizing a single model with varied prompts for diverse tasks.</li><li>Large language model training encompasses:<ul><li>Self-supervised pre-training.</li><li>Instruction tuning.</li><li>RLHF.</li><li>Plugins for accessing updated information without retraining.</li></ul></li><li>Computer vision researchers lean towards generalist models due tothe technical challenges.</li><li>Clinicians prefer specialist models to solve day-to-day work.</li></ul><p>Question: Will medical foundation models support more modalities inthe future besides vision and language?</p><p>Answer:</p><ul><li>People will still focus on one modality for one model with highaccuracy to address practical business demands.</li><li>Multiple models can be used on demand to handle multimodaldata.</li></ul><h1 id="briefings">Briefings</h1><h2id="sana-ayromlou---continual-class-specific-impression-for-data-free-class-incremental-learning">SanaAyromlou - Continual Class-Specific Impression for Data-free ClassIncremental Learning</h2><ul><li>Focuses on training models over newly introduced classes, termed <ahref="https://en.wikipedia.org/wiki/Incremental_learning">incrementallearning</a>.</li><li>Challenges include the loss of old data, resulting in catastrophicforgetting.</li><li>Proposed Solution: Generate synthetic medical data from priorclasses using <a href="https://arxiv.org/abs/2201.10787">modelinversion</a> (extracting training data from the model) and employing <ahref="https://arxiv.org/abs/2102.09517">cosine-normalized cross-entropyloss</a>.</li></ul><h2 id="hooman-vaseli---protoasnet">Hooman Vaseli - ProtoASNet</h2><ul><li>Emphasizes the importance of interpretability in AI solutions,especially in healthcare.</li><li>Core Technology: <ahref="https://proceedings.neurips.cc/paper_files/paper/2017/hash/cb8da6767461f2812ae4290eac7cbc42-Abstract.html">Prototypicalneural networks</a>, which "learn a metric space in which classificationcan be performed by computing distances to prototype representations ofeach class."</li></ul><h1id="ruogu-fang-university-of-florida---keynote-talk-4---a-tale-of-two-frontiers-when-brain-meets-ai">RuoguFang (University of Florida) - Keynote Talk 4 - A Tale of Two Frontiers:When Brain Meets AI</h1><p>Research Vision:</p><ul><li>Integrate domain knowledge over mere data-driven approaches.</li><li>Harness neuroscience principles for next-gen AI designs.</li><li>Leverage AI in testing neural science hypotheses and promoting brainhealth.</li></ul><p><ahref="https://www.sciencedirect.com/science/article/pii/S1361841518307734">DeepEvolutionary Networks with Expedited Genetic Algorithms for MedicalImage Denoising</a></p><ul><li>Auto feature extraction and hyperparameter search are major painpoints in deep learning research (compared with traditional machinelearning research) faced by deep learning researchers.</li><li>Fine gene transfer learning to optimize on a larger dataset - c.f.<ahref="https://www.investopedia.com/financial-edge/0412/the-best-portfolio-balance.aspx">portfoliobalance</a> in finance</li><li>Question: Is it possible to combine the genetic algorithm thatmaintains a gene pool of neural networks with ensemble learning?<ul><li>Answer: Different objective.</li></ul></li></ul><p><ahref="https://www.biorxiv.org/content/10.1101/2023.04.16.537079v2.abstract">Emergenceof Emotion Selectivity in A Deep Neural Network Trained to RecognizeVisual Objects</a></p><ul><li>Simple, interpretable neural network architecture based onbiology.</li><li>Representation similarity between the DNN model and brainamygdala.</li><li>$1M NSF funding.</li></ul><p><a href="https://www.nature.com/articles/s41598-020-80312-2">Modularmachine learning for Alzheimer's disease classification from retinalvasculature</a></p><ul><li>Retina data is easy to collect.</li><li>A lot of information (gender, body mass index) can be seen from theretina.</li><li>The results are interpretable.</li></ul><h1id="hervé-lombaert-ets-montreal---keynote-talk-3---geometric-deep-learning---examples-on-brain-surfaces">HervéLombaert (ETS Montreal) - Keynote Talk 3 - Geometric Deep Learning -Examples on Brain Surfaces</h1><p>Research directions:</p><ul><li>Geometry and Machine Learning.</li><li>Correspondences and variability existent in the brain.</li></ul><p>Motivation:</p><ul><li>Traditional algorithms frequently rely on an image grid (pixels).However, in neuroimaging, data is often on 3D surfaces. Two neighboringpoints may be neighbors but may lie very far away on such asurface.</li><li>How to learn on such surfaces? How do we transfer convolution andpooling on images to such surfaces?</li></ul><p>Solution:</p><ul><li>Represent surfaces as graphs.</li><li>Project problem into spectral space (<ahref="https://en.wikipedia.org/wiki/Spectral_shape_analysis">spectralshape analysis</a>).<ul><li>An object's vibration pattern is governed by shape - spectral spacecaptures a unique intrinsic shape signature.</li><li>Extract spectral signature via spectral decomposition and exploit tofind correspondences.</li><li>Enables transforming convolutions on surfaces to convolutions onspectral embeddings, enabling classical architectures on brainsurfaces.</li></ul></li></ul><p>Ongoing work:</p><ul><li><ahref="https://en.wikipedia.org/wiki/Active_learning_(machine_learning)">Activelearning</a> to reduce annotation effort - focus on sample-leveluncertainty and find the most uncertain images.<ul><li>Goals: Informative and diverse samples.</li><li>Works:<ul><li><ahref="https://link.springer.com/chapter/10.1007/978-3-031-17027-0_5">TAAL:Test-time augmentation for active learning in medical imagesegmentation</a></li><li><a href="https://arxiv.org/abs/2301.07670">Active learning formedical image segmentation with stochastic batches</a></li></ul></li></ul></li></ul><h1id="ali-bashashatiruogu-fangshaoting-zhanghervé-lombaerjun-ma---panel-discussion">AliBashashati/Ruogu Fang/Shaoting Zhang/Hervé Lombaer/Jun Ma - PanelDiscussion</h1><h2id="the-influence-of-large-language-models-is-growing-significantly.-what-changes-do-you-think-llms-will-bring-about-in-medical-imaging-from-both-positive-and-negative-sides">Theinfluence of Large Language Models is growing significantly. Whatchanges do you think LLMs will bring about in medical imaging (from bothpositive and negative sides)?</h2><ul><li>Language contributes to improved performance.</li><li>Still need a diversity of models to investigate different modalitiesand tasks.</li><li>Large language models help in day-to-day routine tasks. They are acopilot which facilitates the processing of huge amounts of informationin pathology and brain research.</li><li>Reduces cost and boosts accessibility for patients.</li><li>Multimodal data integration.</li><li>LLMs face data privacy and trustworthiness.</li><li>When to use LLMs and when to use human abilities requires carefulthinking.</li></ul><h2id="what-other-recent-medical-image-analysis-advancements-excite-you-the-most">Whatother recent medical image analysis advancements excite you themost?</h2><ul><li>Classic problems like segmentations and how to capture geometryremain unsolved.</li><li>More comprehensive and dynamic brain-inspired, biologically-inspiredAI.</li><li>Understanding the biology behind the data will help you design moreapplicable models. Those models can better make a difference</li><li>Prior knowledge is important in addition to big data. Foundationalmodels will explore all non-synthetic data in the next few years; no newdata will exist.</li><li>Montreal is a major hub for neuroscience and AI.</li></ul><h2id="for-the-many-students-here-what-technical-skills-and-knowledge-should-the-next-generation-of-medical-image-analysis-researchers-prepare-for">Forthe many students here, what technical skills and knowledge should thenext generation of medical image analysis researchers prepare for?</h2><ul><li>Know the neglected basics, e.g., solid mathematical background andproficiency in programming</li><li>Understand the data</li><li>Ability to explain the results and ask the question of why andhow</li><li>Visualization is very important for both exploratory data analysisand publishing</li><li>Learning from mistakes - find out why a model doesn't work insteadof throwing in different models</li><li>Ask yourself: Who will care about an increase in accuracy? Is itsignificant? Will it have tradeoffs in robustness, explainability,etc.?</li><li>Quickly take up new skills (mathematics, programming, etc.)</li><li>Research paradigms have changed in the foundation model era - how toleverage foundation models for your field to stand on the shoulders ofgiants?</li><li>Low-level implementation details such as preprocessing,multiprocessing in coding for large-scale data, model development,multi-node distributed training, efficient fine-tuning, and modeldeployment on constrained environments are also critical skills.</li><li>Work and have fun at the same time.</li><li>Perseverance in the face of failure is one of the most essentialqualities for Ph.D. students.</li></ul><h2id="question-the-future-of-models-for-specific-tasks-e.g.-segmentation-vs-end-to-end-models.">Question:The future of models for specific tasks (e.g., segmentation) vsend-to-end models.</h2><ul><li>New models for specific tasks make lovely reads.</li><li>Methodology will change, but specific tasks will stay there.However, improving specific tasks will gradually shift towards industry.Universities will focus on publishing the first paper in a domain, whileindustry will focus on publishing the last paper in a domain.</li><li>In the end, we care about helping patients.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Conference and Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Understanding the Name, Structure, and Loss Function of the Variational Autoencoder</title>
    <link href="/2023/09/30/Understanding-the-Name-Structure-and-Loss-Function-of-the-Variational-Autoencoder/"/>
    <url>/2023/09/30/Understanding-the-Name-Structure-and-Loss-Function-of-the-Variational-Autoencoder/</url>
    
    <content type="html"><![CDATA[<p>Despite the intuitive appeal of <ahref="https://en.wikipedia.org/wiki/Variational_autoencoder">variationalautoencoders (VAEs)</a>, their underlying principles can be elusive.After extensive research across papers and online resources, I willsummarize the core insights behind the VAE's name, structure, and lossfunction and try to explain <strong>how the mathematical formulas usedto describe the VAE came into being from first principles</strong>, asopposed to simply providing interpretations for them.</p><h2 id="basics-of-vaes">Basics of VAEs</h2><p>VAEs are probabilistic generative models, when trained on a dataset<span class="math inline">\(X\)</span>, allow us to sample from a latentvariable <span class="math inline">\(Z\)</span> and generate outputresembling samples in <span class="math inline">\(X\)</span> through atrained neural network <span class="math inline">\(f: Z \rightarrowX\)</span>.</p><p>This can be formulated as making the probability of generating <spanclass="math inline">\(X = x\)</span> as close as possible to the actual<span class="math inline">\(P(X = x)\)</span> (known quality) under theentire generative process.</p><h2 id="ideal-training-goal">Ideal Training Goal</h2><p>In the <strong>ideal situation</strong>, based on the <ahref="https://en.wikipedia.org/wiki/Marginal_distribution">marginaldistribution formula</a> we have <span class="math inline">\(P(X = x) =\int{P(X = x | Z = z) P(Z = z) dz}\)</span>. Thus, the training goal ofvariational autoencoders is to <strong>make the actual <spanclass="math inline">\(\int{P(X = x | Z = z) P(Z = z) dz}\)</span> asclose to <span class="math inline">\(P(X = x)\)</span> aspossible</strong>.</p><h2 id="latent-variable-distribution">Latent Variable Distribution</h2><p>VAEs select a <strong>multivariate normal distribution</strong> forthe latent variable <span class="math inline">\(Z\)</span> based on theprinciple that <a href="https://doi.org/10.1145/318242.318443">anydistribution in <span class="math inline">\(d\)</span> dimensions can begenerated by mapping normally distributed variables through asufficiently complicated function</a>, which could be approximated usingthe neural network <span class="math inline">\(f: Z \rightarrowX\)</span> we train.</p><h2 id="approximation-challenge">Approximation Challenge</h2><p>Having reasonably decided <span class="math inline">\(Z \sim N(0,I)\)</span>, we may calculate the actual <spanclass="math inline">\(\int{P(X = x | Z = z) P(Z = z) dz}\)</span>. Thisis straightforward to approximate: we can randomly sample a large numberof <span class="math inline">\(Z\)</span> values <spanclass="math inline">\(\{z_1, \dots, z_n\}\)</span>, and approximate<span class="math inline">\(\int{P(X = x | Z = z) P(Z = z) dz}\)</span>as <span class="math inline">\(\sum_{j}^{n}{P(X = x | Z =z_j)}\)</span>.</p><p>However, for most <span class="math inline">\(Z\)</span> values,<span class="math inline">\(P(X = x | Z)\)</span> will be nearly zero,contributing almost nothing to our calculation. This is especially thecase in high dimensional spaces, for which an extremely large number ofsamples of <span class="math inline">\(Z\)</span> may be required.</p><p>To address the problem, we can attempt to <strong>sample values of<span class="math inline">\(Z\)</span> that are likely to have produced<span class="math inline">\(X = x\)</span> and compute <spanclass="math inline">\(\int{P(X = x | Z = z) P(Z = z) dz}\)</span> justfrom those</strong>.</p><h2 id="the-variational-aspect">The "Variational" Aspect:</h2><p>To do so, we can <strong>fit another parametrized function</strong><span class="math inline">\(Q(Z | X = x)\)</span>, which can give us adistribution over <span class="math inline">\(Z\)</span> values that arelikely to produce <span class="math inline">\(X = x\)</span> through<span class="math inline">\(f: Z \rightarrow X\)</span> given <spanclass="math inline">\(X = x\)</span>. This is an example of a <ahref="https://en.wikipedia.org/wiki/Variational_Bayesian_methods">variationalBayesian method</a>, which involves finding an "optimal" function (atask known as <ahref="https://en.wikipedia.org/wiki/Calculus_of_variations">variationalcalculus</a>) and is the source of the word "variational" in variationalautoencoders.</p><h2 id="minimizing-divergence">Minimizing Divergence</h2><p>Theoretically, the values of <span class="math inline">\(Z\)</span>that are likely to have produced <span class="math inline">\(X =x\)</span> follow the conditional distribution <spanclass="math inline">\(P(Z | X = x)\)</span>. <strong>Thus, our originalgoal of making the actual <span class="math inline">\(\int{P(X = x | Z =z) P(Z = z) dz}\)</span> as close to <span class="math inline">\(P(X =x)\)</span> as possible can be transformed to minimizing theKullback-Leibler divergence between <span class="math inline">\(P(Z | X= x)\)</span> and <span class="math inline">\(Q(Z | X =x)\)</span></strong>:</p><p><span class="math display">\[KL(Q(Z | X = x) || P(Z | X = x)) =\int{Q(Z = z | X = x) \log{\frac{Q(Z = z | X = x)}{P(Z = z | X = x)}}dz}\]</span></p><p>According to Bayes' Law,</p><p><span class="math display">\[P(Z = z | X = x) = \frac{P(X = x | Z =z) P(Z = z)}{P(X = x)}\]</span></p><p>Thus, we have:</p><p><span class="math display">\[\int{Q(Z = z | X = x) \log{\frac{Q(Z = z| X = x) P(X = x)}{P(X = x | Z = z) P(Z = z)}} dz}\]</span></p><p><span class="math display">\[= \int{Q(Z = z | X = x) (\log{\frac{Q(Z= z | X = x)}{P(Z = z)}} + \log{P(X = x)} - \log{P(X = x | Z = z)})dz}\]</span></p><p><span class="math display">\[= \int{Q(Z = z | X = x) \log{\frac{Q(Z =z | X = x)}{P(Z = z)}} dz} + \int{Q(Z = z | X = x) \log{P(X = x)} dz} -\int{Q(Z = z | X = x) \log{P(X = x | Z = z)} dz}\]</span></p><p>Note that:</p><p><span class="math display">\[\int{Q(Z = z | X = x) \log{\frac{Q(Z = z| X = x)}{P(Z = z)}} dz} = KL(Q(Z | X = x) || P(Z))\]</span></p><p><span class="math display">\[\int{Q(Z = z | X = x) \log{P(X = x)} dz}= \log{P(X = x)} \int{Q(Z = z | X = x)} dz = \log{P(X = x)}\]</span></p><p>Thus, we have:</p><p><span class="math display">\[KL(Q(Z | X = x) || P(Z | X = x)) =KL(Q(Z | X = x) || P(Z)) + \log{P(X = x)} - \int{Q(Z = z | X = x)\log{P(X = x | Z = z)} dz}\]</span></p><p>As <span class="math inline">\(\log{P(X = x)}\)</span> is constant,if we were to minimize <span class="math inline">\(KL(Q(Z | X = x) ||P(Z | X = x))\)</span>, we should minimize:</p><p><span class="math display">\[KL(Q(Z | X = x) || P(Z)) - \int{Q(Z = z| X = x) \log{P(X = x | Z = z)} dz}\]</span></p><p>To further transfer that into a calculatable function, we need to bemore specific about the form that <span class="math inline">\(Q(Z |X)\)</span> will take. The usual choice is to say that <spanclass="math inline">\(Q(Z | X = x) = N(Z | \mu(X = x), \Sigma(X =x))\)</span>, i.e., <span class="math inline">\(Q(Z | X = x)\)</span>follows a Gaussian distribution where the mean and covariance matrix arecalculated by <strong>parameterized functions (trained neuralnetworks)</strong> given <span class="math inline">\(X = x\)</span>. Inthis case, <strong>fitting <span class="math inline">\(Q(Z | X =x)\)</span> involves training these neural networks</strong>.</p><figure><imgsrc="https://miro.medium.com/v2/resize:fit:720/format:webp/1*kXiln_TbF15oVg7AjcUEkQ.png"alt="Q(Z | X = x) = N(Z | \mu(X = x), \Sigma(X = x))" /><figcaption aria-hidden="true"><span class="math inline">\(Q(Z | X = x)= N(Z | \mu(X = x), \Sigma(X = x))\)</span></figcaption></figure><p>The advantages of this choice are <em>computational</em>, as <spanclass="math inline">\(KL(Q(Z | X = x) || P(Z)) + \log{P(X = x)}\)</span>is now <strong>a KL-divergence between two multivariate Gaussiandistributions</strong>, which can be computed in <strong>closedform</strong>.</p><p>As for <span class="math inline">\(\int{Q(Z = z | X = x) \log{P(X = x| Z = z)} dz}\)</span>, it depicts the expected log-likelihood ofgenerating <span class="math inline">\(X = x\)</span> as the VAE'soutput through <span class="math inline">\(f(Z)\)</span> when samplingfrom <span class="math inline">\(Q(Z = z | X = x)\)</span> given <spanclass="math inline">\(X = x\)</span>. Thus, it can be treated as the"reconstruction loss" of the VAE, and different closed-form indices,such as mean square error, may be used as proxies of it depending on theproject domain.</p><h2 id="why-autoencoders">Why "Autoencoders"?</h2><p>Despite the mathematical basis of VAEs being quite different fromclassical autoencoders, they are named "autoencoders" due to their finaltraining objective involving an encoder (the neural networks <spanclass="math inline">\(\mu\)</span> and <spanclass="math inline">\(\Sigma\)</span> determining mean and covariance)and a decoder (the neural network <spanclass="math inline">\(f\)</span>), which resembles a traditionalautoencoder in structure.</p><h2 id="references">References</h2><ul><li>https://arxiv.org/abs/1606.05908</li><li>https://agustinus.kristia.de/techblog/2016/12/10/variational-autoencoder/</li><li>https://arxiv.org/abs/1312.6114</li><li>https://arxiv.org/abs/1907.08956</li><li></li><li>https://stats.stackexchange.com/questions/485488/should-reconstruction-loss-be-computed-as-sum-or-average-over-input-for-variatio</li><li>https://stats.stackexchange.com/questions/540092/how-do-we-get-to-the-mse-in-the-loss-function-for-a-variational-autoencoder</li><li>https://stats.stackexchange.com/questions/464875/mean-square-error-as-reconstruction-loss-in-vae</li><li>https://stats.stackexchange.com/questions/323568/help-understanding-reconstruction-loss-in-variational-autoencoder</li></ul>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>My Software Engineering Philosophy</title>
    <link href="/2023/09/24/My-Software-Engineering-Philosophy/"/>
    <url>/2023/09/24/My-Software-Engineering-Philosophy/</url>
    
    <content type="html"><![CDATA[<blockquote><p>If you deprive yourself of outsourcing and your competitors do not,you're putting yourself out of business. Lee Kuan Yew</p></blockquote><ul><li>Do the high-level, high-value <ahref="https://en.wikipedia.org/wiki/Requirements_engineering"><strong>requirements</strong></a>,<ahref="https://en.wikipedia.org/wiki/Requirements_analysis"><strong>analysis</strong></a>,and <ahref="https://en.wikipedia.org/wiki/Software_design"><strong>design</strong></a>work in an <em>incremental</em> fashion while not sacrificing<em>rigor</em>.</li><li>Maximize the utilization of <em>tools</em> that make coding,testing, and operations as <em>cheap, trivial, straightforward, anderror-free</em> as possible, minimizing <em>technical debt</em>,including:<ul><li>Generative AI tools like ChatGPT.</li><li>Functional Programming.</li></ul></li><li>A critique on both <ahref="https://en.wikipedia.org/wiki/Waterfall_model">the waterfallmodel</a> and <ahref="https://en.wikipedia.org/wiki/Agile_software_development">theagile model</a>.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>The Cornell, Maryland, Max Planck Pre-doctoral Research School 2023 Observations and Gained Insights</title>
    <link href="/2023/09/08/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023-Observations-and-Gained-Insights/"/>
    <url>/2023/09/08/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<figure><imgsrc="/static/images/The-Cornell-Maryland-Max-Planck-Pre-doctoral-Research-School-2023.jpeg"alt="Group Photo" /><figcaption aria-hidden="true">Group Photo</figcaption></figure><h2 id="panel-session-2-research-in-industry-vs.-academia">Panel Session2: "Research in industry vs. academia"</h2><h3 id="problem-focus-recognition">Problem Focus &amp; Recognition</h3><ul><li>Industry tends to focus on concrete problems.</li><li>In academia, broader issues are often addressed.</li><li>Authorship and credit in academia is complex. It's not a zero-sumgame. It's not just about who is first or second author; giving creditto students doesn't mean professors won't get any.</li></ul><h3 id="publication-quality">Publication &amp; Quality</h3><ul><li>The emphasis is on publishing fewer papers but ensuring they are ofhigh quality. It's not about the quantity but the impact and quality ofthe papers.</li><li>The first, last, or best paper on a topic are the mostinfluential.</li></ul><h3 id="career-path">Career Path</h3><ul><li>Before securing a tenure professor position, many go throughmultiple postdocs and even stints as industrial researchscientists.</li><li>Only about 10-20% of PhDs eventually become faculty.</li><li>Some research scientists find academic-like environments within theright industry groups.</li></ul><h3 id="factors-differentiating-academia-and-industry">FactorsDifferentiating Academia and Industry:</h3><ul><li>Industrial research must eventually have some commercial value.</li><li>In academia, there are constraints like obtaining funding, studentrecruitment, and equipment acquisition.</li><li>Academics have better job security and can rebound frommistakes.</li><li>Industry doesn't need to chase grants or funding in the same wayacademia does.</li></ul><h3 id="skills-transitions">Skills &amp; Transitions</h3><ul><li>Transferring skills between departments or companies isstraightforward.</li><li>Transitioning between academia and industry is often a one-waystreet. It's challenging to return to academia from industry unless onemaintains a consistent publishing record and works on research-valuedprojects.</li></ul><h3 id="geographical-and-topic-mobility">Geographical and TopicMobility</h3><p>Researchers are encouraged to be flexible, moving across countriesand topics.</p><h3 id="work-life-balance">Work-Life Balance</h3><ul><li>Systems vary across locations.</li><li>Enforce personal boundaries and learn to say no.</li><li>A balance doesn't mean absence of stress. In the industry, even ifthe work-life balance is okay, stress may arise from working onundesired projects or facing peer pressure.</li><li>Find people who become friends with you.</li></ul><h3 id="two-body-problem">Two-Body Problem</h3><p>It's more of an issue in academia than in industry since it's easierto change companies than academic institutions.</p><h3 id="personality-and-approach">Personality and Approach</h3><ul><li>Industry caters to hackers and those interested in tooling.</li><li>Academics focus on research and higher purposes and see coding as atool. Effective communication, including selling your idea in proposalsand talks, is vital.</li></ul><h3 id="startups-vs.-phd-journey">Startups vs. PhD Journey</h3><ul><li>Both require a significant commitment, typically around 6-8 years toIPO.</li><li>Startups demand full devotion, often with little to no work-lifebalance.</li></ul><h3 id="funding-tenure">Funding &amp; Tenure</h3><ul><li>If a grant from a company fails, there will be no direct legalconsequences, but the likelihood of getting another might bereduced.</li><li>Tenure provides a basic salary and job security, but researchersstill need to raise funds for their research.</li><li>Doing a job aligned research can be beneficial for dissertation andfuture career opportunities.</li></ul><h2 id="laxman-dhulipala-2nd-lecture"><ahref="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&amp;openfile=84146671">LaxmanDhulipala (2nd Lecture)</a></h2><ul><li>Graphs are ubiquitous structures. Implementing high-performancegraph algorithms speeds up scientific discovery.</li><li>I don't work on dense graphs. Real-world graphs are sparse, and Ihaven't seen a dense graph in practice in 10 years.</li><li>I focus on shared-memory algorithms and don't recommend programmingsupercomputers until you have to.</li><li>Recommended reading: <ahref="https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-mcsherry.pdf"><strong>Scalability!But at what COST?</strong></a></li><li>Should batch updates to dynamic graphs<ul><li>More parallelism</li><li>Reduces the cost of each update</li></ul></li><li>Representing adjacency information using purely functional trees aresafe for concurrency.</li></ul><h2 id="guest-lecture-yiting-xia"><ahref="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&amp;openfile=84146671">GuestLecture: Yiting Xia</a></h2><ul><li>There are different available connections at different timeslices.</li><li>Precomputing routes and handling link failure is still work inprogress.</li></ul><h2 id="group-mentoring-session">Group-Mentoring Session</h2><h3 id="peter-druschel-and-bobby-bhattacharjee"><ahref="https://people.mpi-sws.org/~druschel/">Peter Druschel</a> and <ahref="https://www.cs.umd.edu/people/bobby">Bobby Bhattacharjee</a></h3><h4 id="key-skills-and-knowledge">Key Skills and Knowledge</h4><ul><li>Emphasized the importance of academic aptitude and the ability towork in unstructured environments.</li></ul><h4 id="problem-solving-approach">Problem-solving Approach</h4><ul><li>Seek problems that are significant, solvable, and align with yourskill set.</li><li>Recognize that one may not always approach the right problem fromthe best angle.</li><li>Handling setbacks is crucial. Time spent on tackling a problem isnever lost.</li><li>Resilience, dedication, and discipline are essential traits forsuccess.</li><li>Read many things that are loosely related to solve a problem, asthey might offer insights.</li></ul><h4 id="application-strategy">Application Strategy</h4><ul><li>Apply to a minimum of 5-10 institutions.</li><li>Do the homework for providing a strong application, especially givenlow acceptance rates, like 10%.</li></ul><h4 id="interests-and-graduate-programs">Interests and GraduatePrograms</h4><ul><li>Have a broad range of interests when considering a graduateprogram.</li><li>Opt for programs that offer a wide variety of choices.</li><li>Expressing diverse interests in applications can improve acceptancechances.</li><li>It's advisable not to close one's doors apriori.</li></ul><h4 id="monitoring-progress-in-grad-programs">Monitoring Progress inGrad Programs</h4><ul><li>A competent group advisor is crucial, as they will guide and lookout for students challenges like selecting an excessively challengingproblem, lacking motivation, or poor time management.</li><li>Set achievable milestones that lead to publications, helping tobuild a solid publication record. ### <ahref="https://mtoneva.com/">Mariya Toneva</a></li></ul><h4 id="changing-discipline-during-ph.d.">Changing Discipline duringPh.D.</h4><ul><li>Evaluate if the institution has the necessary resources to supportthis transition.</li></ul><h4 id="traits-of-an-ideal-ph.d.-student">Traits of an Ideal Ph.D.Student</h4><ul><li>Effective communication skills.</li><li>Strong critical thinking abilities.</li><li>A robust computational background.</li><li>Prior research experience.</li></ul><h4 id="linguistics">Linguistics</h4><ul><li>Noted a resurgence in the domain of linguistics as opposed to puredata-driven techniques.</li></ul><h4 id="mpi-sws">MPI-SWS</h4><ul><li>MPI-SWS is highly recommended for programming languages, especiallywhen collaborating with diverse groups of people.</li></ul><h4 id="diving-into-nlp-natural-language-processing---hop-on-now">Divinginto NLP (Natural Language Processing) - Hop On Now?</h4><ul><li>When considering venturing into NLP, focus on:<ul><li>Experts who have a distinct vision in a less-saturated niche.</li><li>Those with substantial experience in related fields, such as theintersection of NLP and robotics.</li></ul></li></ul><h4 id="distinguishing-yourself-in-applications">Distinguishing Yourselfin Applications</h4><ul><li>To stand out:<ul><li>Foster qualities like initiative, drive, and ambition.</li><li>Accumulate experiences that align with and support your academic andresearch interests.</li><li>Obtain references that can vouch for your character and workethic.</li></ul></li><li>It's also essential to explore and consider multiple options orpaths.</li></ul><h3 id="lorenzo-alvisi"><ahref="https://www.engineering.cornell.edu/faculty-directory/lorenzo-alvisi">LorenzoAlvisi</a></h3><h4 id="cultivating-an-academic-sense">Cultivating an AcademicSense</h4><ul><li>To nurture an academic mindset, one should assess how an individualperforms when faced with a problem.</li><li>He mentioned the "Dijkstra club" at UT Austin as an example.</li><li>Emphasized the significance of "beautiful work" and that it'scrucial for individuals to produce work of beauty and quality.</li><li>Observing and learning from the endeavors of others isbeneficial.</li></ul><h4 id="lifes-blueprint">Life's Blueprint</h4><ul><li>Life does not come with a set map but rather a compass fordirection.</li><li>Professor Alvisi never limited his imagination about hiscapabilities.</li><li>Guiding principles in life:<ul><li>Seeking personal happiness.</li><li>Maintaining healthy relationships.</li><li>Pursuing a fulfilling job that combines happiness withchallenges.</li></ul></li><li>Acceptance of uncertain outcomes: One might not always know if theywill succeed or fail.</li><li>The importance of personal growth: Find joy inself-improvement.</li><li>Shared personal experience of pursuing two Ph.D. degrees, the firstof which was at an institution he didn't particularly favor. Highlightedthat struggles are often hidden from view.</li></ul><h4 id="career-perspectives">Career Perspectives</h4><ul><li>One's career doesn't necessarily peak at a fixed point; there'salways potential for growth, including entering academia.</li><li>Career choices are not always black and white; it depends onpersonal preferences and aspirations, such as seeking excellentopportunities close to home.</li><li>Consider the duration of your investments in particular careerchoices. Not every commitment needs to be long-term.</li></ul><h4 id="balancing-hobbies-and-work">Balancing Hobbies and Work</h4><ul><li>Prof. Alvisi shared advice from his mentor's mentor aboutintegrating hobbies into professional life.</li><li>While he had diverse interests, he made sacrifices to focus oncomputer science due to his intellectual capacities. Some hobbies weretoo time-consuming.</li><li>Emphasized the importance of hobbies as they provide a necessarybalance and maintain mental well-being.</li></ul><h4 id="addressing-the-two-body-problem">Addressing the Two-BodyProblem</h4><ul><li>Universities recognize the challenge when both partners in arelationship are professionals.</li><li>If partners excel in different domains, there's potential for bothto be hired with attractive incentives.</li><li>Solutions include proactive planning, alternating priorities betweenpartners over the years, and considering remote work opportunities.</li></ul><h4 id="other-insights">Other Insights</h4><ul><li>Mentioned the Sloan Fellowship as a notable achievement beforetenure.</li><li>Advised young professionals to delay specialization as long aspossible. Explore various options.</li><li>Encouraged students to seek advice from multiple professors to gaina diverse range of opinions and insights.</li></ul><h2 id="tapomayukh-bhattacharjee-2nd-lecture"><ahref="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&amp;openfile=84146671">TapomayukhBhattacharjee (2nd Lecture)</a></h2><ul><li>There are six activities of daily living (ADLs) defined inliterature: personal hygiene or grooming, dressing, toileting,transferring or ambulating, and eating</li><li>Anomaly detection is used in processing sensor data.</li><li>A* is widely used in motion planning due to its efficiency andoptimality (it never overestimates the cost).</li><li>Motion planning time = search time + collision checking time (~90%).Therefore, the author proposed lazy A* (which finds an optimal path inan unconstrained situation, goes over collision checking while on thepath, and re-searches a path if a collision is encountered).</li><li>Collect a dataset before embarking on research.</li><li>To understand how to manipulate different kinds of foods, the authorcreated a <em>food manipulation taxonomy</em>.</li><li>Choose hardware components for real-world deployability.</li><li>Use deformation of points on a gel coupled with computer visionalgorithms to measure shear force</li><li>Add <em>structure</em> to machine learning algorithms to overcome alack of data.</li><li>If integrating multimodal data sources, think of <em>where</em> tointegrate as the size or magnitude of different data may beinconsistent.</li><li>A "bandit" algorithm is an RL algorithm where we utilize <em>partialfeedback</em> of <em>one step</em> in the decision-making process,unlike conventional RL algorithms with "episodes" spanning multiplesteps.</li></ul><h3id="audience-question-how-to-stay-up-to-date-with-the-state-of-the-art-especially-in-the-fast-changing-landscape-of-machine-learning">Audiencequestion: How to stay up-to-date with the state-of-the-art (especiallyin the fast-changing landscape of machine learning)?</h3><ul><li>One of the main tasks of faculty life</li><li>Look at titles and abstracts of publications in all well-knownconferences.</li><li>Organize reading groups and reading sessions.</li><li>Interact with known other research groups.</li></ul><h2id="derek-dreyer-how-to-write-papers-and-give-talks-that-people-can-follow"><ahref="https://cloud.mpi-sws.org/index.php/s/n97WnKRxgYoLcCL?dir=undefined&amp;openfile=84146671">DerekDreyer: How to write papers and give talks that people canfollow</a></h2><ul><li><p>Many papers suffer from the TMI (too much information)problem.</p></li><li><p>Aim at giving <em>constructive principles</em> that are easy tocheck and fix.</p></li><li><p>A paper is different from a textbook - people <em>aren't ascommitted to reading a paper as they are to reading atextbook</em>.</p></li><li><p>A <em>good but not interesting</em> paper tends to get a "B" or a"weak accept."</p></li><li><p>Putting the Related Work section at the front (as opposed to inthe back before the Conclusion) may hinder unfamiliar authors fromunderstanding your work.</p></li><li><p>Most people <em>don't listen to talks to determine whether theyshould read a paper</em>. Instead, they listen to talks to discuss withothers. The main goal of a talk is to <em>give people positive feelingsabout your work</em>.</p></li><li><p>A talk should only cover the <em>intro</em> and <em>keyideas</em> sections of the corresponding paper.</p></li><li><p>The <em>key ideas</em> should be the high point in your talkbefore presenting the takeaway messages.</p></li><li><p>Add visual elements to emphasize <em>one point</em> perslide.</p></li><li><p>Use smooth animations to help the listener follow.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Conference and Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>From the Fourier Series to the Fourier Transform to the Discrete-time Fourier Transform: Demystifying the Formulas</title>
    <link href="/2023/09/04/From-the-Fourier-Series-to-the-Fourier-Transform-to-the-Discrete-time-Fourier-Transform-Demystifying-the-Formulas/"/>
    <url>/2023/09/04/From-the-Fourier-Series-to-the-Fourier-Transform-to-the-Discrete-time-Fourier-Transform-Demystifying-the-Formulas/</url>
    
    <content type="html"><![CDATA[<p>In realms as broad as electrical engineering, acoustics, optics,signal processing, quantum mechanics, and econometrics, the FourierSeries, Fourier Transform, and Discrete-time Fourier Transform play apivotal role in analyzing signals by allowing us to decompose them intosimpler components. Many articles present their formulas or dive intotheir intuition and applications. However, what seems to be missing is ablog post that explains the derivation of their formulas in a way thatis both clear and accessible, requiring no more than a rudimentaryunderstanding of calculus.</p><h1 id="fourier-series">Fourier Series</h1><h2 id="standard-form-of-the-fourier-series">Standard Form of theFourier Series</h2><p>Our journey begins with the <ahref="https://en.wikipedia.org/wiki/Fourier_series">Fourier Series</a> -a method to represent periodic functions as a sum of sine and cosinewaves.</p><p>Let <span class="math inline">\(x(t)\)</span> be a periodic functionwith period <span class="math inline">\(T\)</span>. The <em>standardform of the Fourier series</em> for <spanclass="math inline">\(x(t)\)</span> is given by:</p><p><span class="math display">\[x(t) = \frac{a_0}{2} + a_1\cos{\frac{2\pi}{T} t} + b_1 \sin{\frac{2\pi}{T} t} + a_2\cos{\frac{4\pi}{T} t} + b_2 \sin{\frac{4\pi}{T} t} + \dots\]</span></p><p>To solve for <span class="math inline">\(a_0, a_1, b_1,\dots\)</span>, we first observe the .</p><p>Thus, we can multiply both sides of the equation by <spanclass="math inline">\(cos{\frac{2k\pi}{T} t}\)</span> or <spanclass="math inline">\(\sin{\frac{2k\pi}{T} t}\)</span> <spanclass="math inline">\((k \in \{0, 1, 2, \dots, n\})\)</span>, and thenintegrate over one period <span class="math inline">\([-\frac{T}{2},\frac{T}{2})\)</span> to obtain:</p><p><span class="math display">\[a_k = \frac{2}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \cos{\frac{2k\pi}{T} t}dt}\]</span></p><p><span class="math display">\[b_k = \frac{2}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \sin{\frac{2k\pi}{T} t}dt}\]</span></p><h2 id="exponential-form-of-the-fourier-series">Exponential Form of theFourier Series</h2><p>Using Euler's formula <span class="math inline">\(e^{ix} = \cos{x} +i \sin{x}\)</span>, we can derive:</p><p><span class="math display">\[\cos{x} = \frac{e^{ix} +e^{-ix}}{2}\]</span></p><p><span class="math display">\[\sin{x} = -i \frac{e^{ix} -e^{-ix}}{2}\]</span></p><p>Substituting these representations of <spanclass="math inline">\(\cos{x}\)</span> and <spanclass="math inline">\(\sin{x}\)</span> into <spanclass="math inline">\(a_k\)</span> and <spanclass="math inline">\(b_k\)</span>, we get:</p><p><span class="math display">\[a_k = \frac{2}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) \frac{e^{i \frac{2k\pi}{T} t} +e^{-i \frac{2k\pi}{T} t}}{2} dt}\]</span></p><p><span class="math display">\[b_k = \frac{2}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{-i x(t) \frac{e^{i \frac{2k\pi}{T} t}- e^{-i \frac{2k\pi}{T} t}}{2} dt}\]</span></p><p>And:</p><p><span class="math display">\[a_k \cos{\frac{2k\pi}{T} t} + b_k\sin{\frac{2k\pi}{T} t} = a_k \frac{e^{i \frac{2k\pi}{T} t} + e^{-i\frac{2k\pi}{T} t}}{2} - i b_k \frac{e^{i \frac{2k\pi}{T} t} - e^{-i\frac{2k\pi}{T} t}}{2} = \frac{a_k - i b_k}{2} e^{i \frac{2k\pi}{T} t} +\frac{a_k + i b_k}{2} e^{-i \frac{2k\pi}{T} t}\]</span></p><p>And:</p><p><span class="math display">\[\frac{a_k - i b_k}{2} = \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t}dt}\]</span></p><p><span class="math display">\[\frac{a_k + i b_k}{2} = \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{i \frac{2k\pi}{T} t}dt}\]</span></p><p>Furthermore, if we let:</p><p><span class="math display">\[c_k = \frac{a_k - i b_k}{2} =\frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T}t} dt}\]</span></p><p>Substituting <span class="math inline">\(k \leftarrow -k\)</span>into the expression for <span class="math inline">\(c_k\)</span>, wewill obtain:</p><p><span class="math display">\[c_{-k} = \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{i \frac{2k\pi}{T} t} dt} =\frac{a_k + i b_k}{2}\]</span></p><p>Thus:</p><p><span class="math display">\[a_k \cos{\frac{2k\pi}{T} t} + b_k\sin{\frac{2k\pi}{T} t}  = \frac{a_k - i b_k}{2} e^{i \frac{2k\pi}{T} t}+ \frac{a_k + i b_k}{2} e^{-i \frac{2k\pi}{T} t}= c_k e^{i \frac{2k\pi}{T} t} + c_{-k} e^{-i \frac{2k\pi}{T}t}\]</span></p><p>And by substituting <span class="math inline">\(k \leftarrow0\)</span> into the expression for <spanclass="math inline">\(c_k\)</span>, we get:</p><p><span class="math display">\[c_0 = \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) dt} = \frac{a_0}{2}\]</span></p><p>Therefore:</p><p><span class="math display">\[x(t) = \frac{a_0}{2} +\sum_{k=1}^{n}{(a_k \cos{\frac{2k\pi}{T} t} + b_k \sin{\frac{2k\pi}{T}t})}  = c_0 + \sum_{k=1}^{n}{(c_k e^{i \frac{2k\pi}{T} t} + c_{-k} e^{-i\frac{2k\pi}{T} t})} = \sum_{k=-n}^{n}{c_k e^{i \frac{2k\pi}{T}t}}\]</span></p><p>Where:</p><p><span class="math display">\[c_k= \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t}dt}\]</span></p><p>This is the <em>exponential form of the Fourier series</em>. It ismore concise than the standard form of the Fourier series and is usedmore often in practice.</p><h1 id="fourier-transform">Fourier Transform</h1><p>The Fourier transform is a generalization of the Fourier series,which can analyze the effect of a frequency in <em>any function</em>(which may not necessarily be a periodic function). In this section, wewill present how it can be derived from the exponential form of theFourier series.</p><p>Given a periodic function <span class="math inline">\(x(t)\)</span>with period <span class="math inline">\(T\)</span>, the exponential formof the Fourier series of <span class="math inline">\(x(t)\)</span> is asfollows:</p><p><span class="math display">\[x(t) = \sum_{k=-n}^{n}{c_k e^{i\frac{2k\pi}{T} t}}\]</span></p><p>Where:</p><p><span class="math display">\[c_k= \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i \frac{2k\pi}{T} t}dt}\]</span></p><p>Let's say that the period <span class="math inline">\(T\)</span> isassociated with a frequency known as the <ahref="https://en.wikipedia.org/wiki/Fundamental_frequency"><em>fundamentalfrequency</em></a> <span class="math inline">\(f_0 =\frac{1}{T}\)</span>. Given <span class="math inline">\(f_0\)</span>, wecan rewrite the previous Fourier series as:</p><p><span class="math display">\[x(t) = \sum_{k=-n}^{n}{c_k e^{i 2\pi kf_0 t}}\]</span></p><p>Where:</p><p><span class="math display">\[c_k= \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}{x(t) e^{-i 2\pi k f_0 t}dt}\]</span></p><p>For a non-periodic function, we can consider it as a periodicfunction with <span class="math inline">\(T \rightarrow+\infty\)</span>. In this case, the fundamental frequency <spanclass="math inline">\(f_0\)</span> is an infinitesimal quantity;therefore, <em>we can consider that any frequency <spanclass="math inline">\(f\)</span> can be expressed as an integer multipleof the fundamental frequency, and the difference between two neighboringfrequencies is the fundamental frequency <spanclass="math inline">\(f_0\)</span></em>. In this case, the fundamentalfrequency <span class="math inline">\(f_0\)</span> can be expressed as adifferential of the frequency <span class="math inline">\(f\)</span>,i.e., <span class="math inline">\(df\)</span>.</p><p>In this case, for a possibly non-periodic function <spanclass="math inline">\(x(t)\)</span>:</p><p><span class="math display">\[x(t) = \sum_{k=-\infty}^{\infty}{c_ke^{i 2\pi k (df)t}}\]</span></p><p><span class="math display">\[c_k= (df) \int_{-\infty}^{\infty}{x(t)e^{-i 2\pi k (df) t} dt}\]</span></p><p>Thus, <span class="math inline">\(x(t)\)</span> can be representedas:</p><p><span class="math display">\[x(t) = \sum_{k=-\infty}^{\infty}{[(df)\cdot \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi k (df) t} dt} \cdot e^{i2\pi k (df) t}]}\]</span></p><p>By considering <span class="math inline">\(f \leftarrow k(df)\)</span>, <ahref="https://maninbocss.medium.com/summation-and-the-definite-integral-235663ef5ec3">wecan transform the summation into a definite integral</a>:</p><p><span class="math display">\[x(t)= \int_{-\infty}^{\infty}{[(\int_{-\infty}^{\infty}{x(t) e^{-i 2\pi f t} dt}) e^{i 2\pi f t}]df}\]</span></p><p>Let:</p><p><span class="math display">\[X(f) = \int_{-\infty}^{\infty}{x(t)e^{-i 2\pi f t} dt}\]</span></p><p>Then <span class="math inline">\(x(t)\)</span> can be representedas:</p><p><span class="math display">\[x(t) = \int_{-\infty}^{\infty}{ X(f)e^{i 2\pi f t} df}\]</span></p><p>These two equations are very important.</p><ul><li>If we know <span class="math inline">\(x(t)\)</span> (i.e., thevalue of <span class="math inline">\(x(t)\)</span> at any time <spanclass="math inline">\(t\)</span>), through <spanclass="math inline">\(X(f) = \int_{-\infty}^{\infty}{x(t) e^{-i 2\pi ft} dt}\)</span>, we can compute <em>the relative magnitude of anyfrequency <span class="math inline">\(f\)</span> over the whole timeperiod</em>.</li><li>At the same time, if we know <spanclass="math inline">\(X(f)\)</span> (i.e., the relative magnitude of anyfrequency <span class="math inline">\(f\)</span> over the whole timeperiod), by means of <span class="math inline">\(x(t) =\int_{-\infty}^{\infty}{ X(f) e^{i 2\pi f t} df}\)</span>, we cancalculate <em>the value of <span class="math inline">\(x(t)\)</span> atany time <span class="math inline">\(t\)</span></em>.</li></ul><p>We refer to <span class="math inline">\(X(f)\)</span> as the<em>Fourier transform</em> of <span class="math inline">\(x(t)\)</span>,also known as the <em>spectrum</em> of <spanclass="math inline">\(x(t)\)</span>, and to <spanclass="math inline">\(x(t)\)</span> as the <em>inverse Fouriertransform</em> of <span class="math inline">\(X(f)\)</span>.</p><h1 id="discrete-time-fourier-transform">Discrete-time FourierTransform</h1><p>When we process signals with computers, as computers cannot store acontinuous infinite function, we usually take <spanclass="math inline">\(N\)</span> samples of the original signal <spanclass="math inline">\(x(t)\)</span> at a certain time interval <spanclass="math inline">\(\Delta t\)</span>, obtaining an array <spanclass="math inline">\(x[0:N-1]\)</span>.</p><p>Using <span class="math inline">\(x[0:N-1]\)</span> to estimate theFourier transform <span class="math inline">\(X(f)\)</span> of thesampled function <span class="math inline">\(x(t)\)</span>, we get:</p><p><span class="math display">\[X(f) = \int_{-\infty}^{\infty}{x(t)e^{-i 2\pi f t} dt} \approx \int_{0}^{N \Delta t}{x(t) e^{-i 2\pi f t}dt} \approx \sum_{m=0}^{N - 1}{x(m \Delta t) e^{-i 2\pi f m \Deltat}}\]</span></p><p>If we <em>assume these samples have spanned a period of the originalsignal, e.g. <span class="math inline">\(T = N \Delta t\)</span>, andthat we only consider frequencies satisfying <spanclass="math inline">\(f = k \frac{1}{N \Delta t} (k \in \{0, 1, \dots, N- 1\})\)</span></em>, we get:</p><p><span class="math display">\[X(k \frac{1}{N \Delta t}) \approx\sum_{n=0}^{N - 1}{x(n \Delta t) e^{-i 2\pi k \frac{1}{N \Delta t} n\Delta t}} = \sum_{n=0}^{N - 1}{x(n \Delta t) e^{-i 2\pi \frac{k}{N} n}}= \sum_{n=0}^{N - 1}{x[n] e^{-i 2\pi \frac{k}{N} n}}\]</span></p><p>Let:</p><p><span class="math display">\[X[k] = \sum_{n=0}^{N - 1}{x[n] e^{-i2\pi \frac{k}{N} n}} (k \in \{0, 1, \dots, N - 1\})\]</span></p><p>We call such an array of <span class="math inline">\(N\)</span>discrete numbers <span class="math inline">\(X[0:N-1]\)</span> the<em>discrete-time Fourier transform</em> of <spanclass="math inline">\(x[0:N-1]\)</span>, which is a <em>discrete</em>frequency domain representation of <spanclass="math inline">\(x[0:N-1]\)</span>.</p><p>Using <span class="math inline">\(X[0:N-1]\)</span>, we can restore<span class="math inline">\(x[0:N-1]\)</span>:</p><p><span class="math display">\[x[n] = \frac{1}{N} \sum_{k=0}^{N -1}{X[k] e^{i 2\pi \frac{k}{N} n}} (n \in \{0, 1, \dots, N -1\})\]</span></p><p>We call <span class="math inline">\(x[0:N-1]\)</span> the <em>inversediscrete-time Fourier transform</em> of <spanclass="math inline">\(X[0:N-1]\)</span>. This is analogous to <spanclass="math inline">\(X(f)\)</span> being the Fourier transform of <spanclass="math inline">\(x(t)\)</span> and <spanclass="math inline">\(x(t)\)</span> being the inverse Fourier transformof <span class="math inline">\(X(f)\)</span> in the continuous case.</p>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>On Convolutional Neural Networks and Photographic Lenses</title>
    <link href="/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/"/>
    <url>/2023/08/24/On-Convolutional-Neural-Networks-and-Photographic-Lenses/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://en.wikipedia.org/wiki/Convolutional_neural_network">Convolutionalneural networks</a> are <ahref="https://en.wikipedia.org/wiki/Camera_lens">camera lenses</a> to acomputer.</p><figure><imgsrc="https://upload.wikimedia.org/wikipedia/commons/6/63/Typical_cnn.png"alt="A convolutional neural network" /><figcaption aria-hidden="true">A convolutional neuralnetwork</figcaption></figure><figure><imgsrc="https://upload.wikimedia.org/wikipedia/commons/7/7a/Tessar.png"alt="A camera lens" /><figcaption aria-hidden="true">A camera lens</figcaption></figure><p>The analogy does not stop at the point that both compress visualinformation:</p><ul><li>The <ahref="https://www.jeremyjordan.me/convnet-architectures/">evolution ofconvolutional neural network architectures</a> resembles the <ahref="https://en.wikipedia.org/wiki/History_of_photographic_lens_design">evolutionof camera lenses</a>.</li><li>The <ahref="https://analyticsindiamag.com/complete-guide-to-understanding-precision-and-recall-curves/">P-Rcurve</a> showing the performance of a convolutional neural network isstrikingly similar to the <ahref="https://www.dearsusan.net/how-to-read-mtf-curves-like-an-artist/">MTFcurve</a> evaluating lens performance.</li></ul><figure><imgsrc="https://machinelearningmastery.com/wp-content/uploads/2020/01/Precision-Recall-Curve-of-a-Logistic-Regression-Model-and-a-No-Skill-Classifier2.png"alt="A P-R curve" /><figcaption aria-hidden="true">A P-R curve</figcaption></figure><figure><imgsrc="https://photographylife.com/wp-content/uploads/2013/01/How-to-Read-MTF-Charts.png"alt="An MTF curve" /><figcaption aria-hidden="true">An MTF curve</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Our Motivation for Maintaining Our Blog</title>
    <link href="/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/"/>
    <url>/2023/08/16/Our-Motivation-for-Maintaining-Our-Blog/</url>
    
    <content type="html"><![CDATA[<p>今之博客，乃昔（初高中）之错题本之翻版也。昔之背景知识、解题思路、高效算法，今之认识、洞见，皆为辛苦求索所得，故笔录之，以期日积月累，唯“应试”“科研”之直接目的异也。</p><p>This blog is a replica of our previous "problem books" used forjunior and senior high school. In the past, we would record backgroundknowledge, problem solving ideas, and efficient algorithms. Today, wewould note down understandings and insights. These are all the result ofthe hard work of searching and exploring, and we record them down inorder to gradually accumulate our knowledge and understanding. Only thedirect purpose has been changed from "preparing for a test" to "doingscientific research".</p>]]></content>
    
    
    <categories>
      
      <category>Reflections</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Timetable of Well-known Conferences in Different Subdomains of Computer Science</title>
    <link href="/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/"/>
    <url>/2023/08/16/Timetable-of-Well-known-Conferences-in-Different-Subdomains-of-Computer-Science/</url>
    
    <content type="html"><![CDATA[<p>We have compiled a timetable of well-known conferences in differentsubdomains of computer science based on the <em>Class A</em> and<em>Class B</em> conferences in <ahref="https://www.ccf.org.cn/Academic_Evaluation/By_category/">"Directoryof International Academic Conferences and Journals Recommended by theChinese Computer Society"</a>. Although the precise start dates of eachconference vary year by year, the provided start dates provide a generalguideline on the <em>relative order</em> of the conferences throughouteach year.</p><table><thead><tr class="header"><th>Name</th><th>Start Date</th><th>Subdomain</th></tr></thead><tbody><tr class="odd"><td>CIDR</td><td>01/08/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>GROUP</td><td>01/08/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="odd"><td>POPL</td><td>01/15/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>VMCAI</td><td>01/15/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>HiPEAC</td><td>01/16/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>SODA</td><td>01/22/23</td><td>Theoretical Computer Science</td></tr><tr class="odd"><td>PPoPP</td><td>02/05/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>AAAI</td><td>02/07/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>FPGA</td><td>02/12/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>FAST</td><td>02/21/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>HPCA</td><td>02/25/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>CGO</td><td>02/25/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>NDSS</td><td>02/27/23</td><td>Security</td></tr><tr class="even"><td>WSDM</td><td>02/27/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="odd"><td>FM</td><td>03/07/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>PERCOM</td><td>03/13/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="odd"><td>FSE</td><td>03/20/23</td><td>Security</td></tr><tr class="even"><td>SANER</td><td>03/21/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>DCC</td><td>03/21/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>ASPLOS</td><td>03/25/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>VR</td><td>03/25/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>IUI</td><td>03/27/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="odd"><td>ICDT</td><td>03/28/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>EDBT</td><td>03/28/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="odd"><td>ICDE</td><td>04/03/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>RECOMB</td><td>04/16/23</td><td>Interdisciplinary/Emerging</td></tr><tr class="odd"><td>DATE</td><td>04/17/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>NSDI</td><td>04/17/23</td><td>Computer Networks</td></tr><tr class="odd"><td>DASFAA</td><td>04/17/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>ETAPS</td><td>04/22/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>EUROCRYPT</td><td>04/23/23</td><td>Security</td></tr><tr class="even"><td>CHI</td><td>04/23/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="odd"><td>SDM</td><td>04/27/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>WWW</td><td>04/30/23</td><td>Interdisciplinary/Emerging</td></tr><tr class="odd"><td>I3D</td><td>05/03/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>PKC</td><td>05/07/23</td><td>Security</td></tr><tr class="odd"><td>EG</td><td>05/08/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>RTAS</td><td>05/09/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>IPSN</td><td>05/09/23</td><td>Computer Networks</td></tr><tr class="even"><td>HSCC</td><td>05/09/23</td><td>Theoretical Computer Science</td></tr><tr class="odd"><td>EuroSys</td><td>05/09/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>ICSE</td><td>05/14/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>IPDPS</td><td>05/15/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>ICPC</td><td>05/15/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>INFOCOM</td><td>05/17/23</td><td>Computer Networks</td></tr><tr class="even"><td>MSST</td><td>05/22/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>S&amp;P</td><td>05/22/23</td><td>Security</td></tr><tr class="even"><td>ICRA</td><td>05/29/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>AAMAS</td><td>05/29/23</td><td>Artificial Intelligence</td></tr><tr class="even"><td>ICASSP</td><td>06/04/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>ECSCW</td><td>06/05/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="even"><td>NOSSDAV</td><td>06/10/23</td><td>Computer Networks</td></tr><tr class="odd"><td>CAiSE</td><td>06/12/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>SoCG</td><td>06/12/23</td><td>Theoretical Computer Science</td></tr><tr class="odd"><td>ICMR</td><td>06/12/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>EuroVis</td><td>06/12/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>SPAA</td><td>06/16/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>ISCA</td><td>06/17/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>PLDI</td><td>06/17/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>LCTES</td><td>06/17/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>MobiSys</td><td>06/18/23</td><td>Computer Networks</td></tr><tr class="even"><td>SIGMOD</td><td>06/18/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="odd"><td>PODS</td><td>06/18/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>CVPR</td><td>06/18/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>SIGMETRICS</td><td>06/19/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>IWQoS</td><td>06/19/23</td><td>Computer Networks</td></tr><tr class="odd"><td>PODC</td><td>06/19/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>HPDC</td><td>06/20/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>STOC</td><td>06/20/23</td><td>Theoretical Computer Science</td></tr><tr class="even"><td>ICS</td><td>06/21/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>HotOS</td><td>06/22/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>LICS</td><td>06/26/23</td><td>Theoretical Computer Science</td></tr><tr class="odd"><td>DSN</td><td>06/27/23</td><td>Security</td></tr><tr class="even"><td>EGSR</td><td>06/28/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>CADE/IJCAR</td><td>07/01/23</td><td>Theoretical Computer Science</td></tr><tr class="even"><td>ICWS</td><td>07/02/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>SGP</td><td>07/03/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>SAT</td><td>07/04/23</td><td>Theoretical Computer Science</td></tr><tr class="odd"><td>SPM</td><td>07/05/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>ICAPS</td><td>07/08/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>DAC</td><td>07/09/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>CSFW</td><td>07/09/23</td><td>Security</td></tr><tr class="odd"><td>ACL</td><td>07/09/23</td><td>Artificial Intelligence</td></tr><tr class="even"><td>USENIX ATC</td><td>07/10/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>OSDI</td><td>07/10/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>ICALP</td><td>07/10/23</td><td>Theoretical Computer Science</td></tr><tr class="odd"><td>ICME</td><td>07/10/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>COLT</td><td>07/12/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>ISSTA</td><td>07/17/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>ECOOP</td><td>07/17/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>CAV</td><td>07/17/23</td><td>Theoretical Computer Science</td></tr><tr class="even"><td>CCC</td><td>07/17/23</td><td>Theoretical Computer Science</td></tr><tr class="odd"><td>ICCBR</td><td>07/17/23</td><td>Artificial Intelligence</td></tr><tr class="even"><td>ICDCS</td><td>07/18/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>SIGIR</td><td>07/23/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>ICML</td><td>07/23/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>ISMB</td><td>07/23/23</td><td>Interdisciplinary/Emerging</td></tr><tr class="even"><td>CogSci</td><td>07/26/23</td><td>Interdisciplinary/Emerging</td></tr><tr class="odd"><td>UAI</td><td>07/31/23</td><td>Artificial Intelligence</td></tr><tr class="even"><td>SCA</td><td>08/04/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>SIGKDD</td><td>08/06/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>SIGGRAPH</td><td>08/06/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>ICPP</td><td>08/07/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>USENIX Security</td><td>08/09/23</td><td>Security</td></tr><tr class="odd"><td>CRYPTO</td><td>08/19/23</td><td>Security</td></tr><tr class="even"><td>IJCAI</td><td>08/19/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>HOT CHIPS</td><td>08/27/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>CP</td><td>08/27/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>VLDB</td><td>08/28/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>KR</td><td>09/02/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>RE</td><td>09/04/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>ICFP</td><td>09/04/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>ESA</td><td>09/04/23</td><td>Theoretical Computer Science</td></tr><tr class="even"><td>SIGCOMM</td><td>09/10/23</td><td>Computer Networks</td></tr><tr class="odd"><td>CHES</td><td>09/10/23</td><td>Security</td></tr><tr class="even"><td>SECON</td><td>09/11/23</td><td>Computer Networks</td></tr><tr class="odd"><td>ASE</td><td>09/11/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>CODES+ISSS</td><td>09/17/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>EMSOFT</td><td>09/17/23</td><td>Interdisciplinary/Emerging</td></tr><tr class="even"><td>ECML-PKDD</td><td>09/18/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="odd"><td>CONCUR</td><td>09/19/23</td><td>Theoretical Computer Science</td></tr><tr class="even"><td>ESORICS</td><td>09/25/23</td><td>Security</td></tr><tr class="odd"><td>SRDS</td><td>09/25/23</td><td>Security</td></tr><tr class="even"><td>MobileHCI</td><td>09/26/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="odd"><td>ECAI</td><td>09/30/23</td><td>Artificial Intelligence</td></tr><tr class="even"><td>MoDELS</td><td>10/01/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>ICSME</td><td>10/01/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>MobiCom</td><td>10/02/23</td><td>Computer Networks</td></tr><tr class="odd"><td>ICCV</td><td>10/02/23</td><td>Artificial Intelligence</td></tr><tr class="even"><td>ECCV</td><td>10/02/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>ITC</td><td>10/08/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>UbiComp</td><td>10/08/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="odd"><td>ESEM</td><td>10/09/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>ISSRE</td><td>10/09/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>ICNP</td><td>10/10/23</td><td>Computer Networks</td></tr><tr class="even"><td>PG</td><td>10/10/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>CSCW</td><td>10/14/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="even"><td>RAID</td><td>10/16/23</td><td>Security</td></tr><tr class="odd"><td>ISMAR</td><td>10/16/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="even"><td>PACT</td><td>10/21/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>CIKM</td><td>10/21/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="even"><td>OOPSLA</td><td>10/22/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>SAS</td><td>10/22/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>IEEE VIS</td><td>10/22/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>MobiHoc</td><td>10/23/23</td><td>Computer Networks</td></tr><tr class="even"><td>SOSP</td><td>10/23/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>IMC</td><td>10/24/23</td><td>Computer Networks</td></tr><tr class="even"><td>MICRO</td><td>10/28/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>ICCAD</td><td>10/29/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>ACM MM</td><td>10/29/23</td><td>Computer Graphics/Multimedia</td></tr><tr class="odd"><td>UIST</td><td>10/29/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="even"><td>SoCC</td><td>10/30/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>CLUSTER</td><td>10/31/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>ISS</td><td>11/05/23</td><td>Human Computer Interaction and Ubiquitous Computing</td></tr><tr class="odd"><td>ICCD</td><td>11/06/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="even"><td>ISWC</td><td>11/06/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="odd"><td>FOCS</td><td>11/06/23</td><td>Theoretical Computer Science</td></tr><tr class="even"><td>SC</td><td>11/12/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>SenSys</td><td>11/12/23</td><td>Computer Networks</td></tr><tr class="even"><td>Performance</td><td>11/14/23</td><td>Computer Architecture/Parallel and Distributed Computing/StorageSystems</td></tr><tr class="odd"><td>CCS</td><td>11/26/23</td><td>Security</td></tr><tr class="even"><td>ICSOC</td><td>11/28/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="odd"><td>TCC</td><td>11/29/23</td><td>Security</td></tr><tr class="even"><td>ICDM</td><td>12/01/23</td><td>Databases/Data Mining/Information Retrieval</td></tr><tr class="odd"><td>FSE/ESEC</td><td>12/03/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr><tr class="even"><td>ACSAC</td><td>12/04/23</td><td>Security</td></tr><tr class="odd"><td>ASIACRYPT</td><td>12/04/23</td><td>Security</td></tr><tr class="even"><td>CoNEXT</td><td>12/05/23</td><td>Computer Networks</td></tr><tr class="odd"><td>RTSS</td><td>12/05/23</td><td>Interdisciplinary/Emerging</td></tr><tr class="even"><td>BIBM</td><td>12/05/23</td><td>Interdisciplinary/Emerging</td></tr><tr class="odd"><td>EMNLP</td><td>12/06/23</td><td>Artificial Intelligence</td></tr><tr class="even"><td>NeurIPS</td><td>12/10/23</td><td>Artificial Intelligence</td></tr><tr class="odd"><td>Middleware</td><td>12/11/23</td><td>Software Engineering/Systems Software/Programming Languages</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Reference</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ISSTA/ECOOP 2023 Observations and Gained Insights</title>
    <link href="/2023/07/21/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/"/>
    <url>/2023/07/21/ISSTA-ECOOP-2023-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<h1 id="mon-17-jul">Mon 17 Jul</h1><h2 id="session-1-fuzzing-at-amazon-auditorium-gates-g20">Session 1FUZZING at Amazon Auditorium (Gates G20)</h2><h3 id="welcome-and-introductions">Welcome and Introductions</h3><p>The following reviewing criteria for workshop papers can serve as aguide for us in writing papers:</p><ul><li>Is the problem that is addressed significant for research orpractice?</li><li>Are the contributions (technique, hypothesis, or evaluation) overexisting work sufficient?</li><li>Is the methodology (experimental setup or protocol) specified tovalidate the claims or hypotheses reasonable?</li><li>Can an independent research group reproduce the results, given theproposed methodology (experimental setup)</li></ul><p>Establish significance, novelty, and soundness, even if results donot show a large performance gain. Inspect unexpected results, such aswhy results are negative.</p><h3id="three-colours-of-fuzzing-reflections-and-open-challenges---cristian-cadar"><ahref="https://conf.researchr.org/details/ecoop-issta-2023/fuzzing-2023/9/Three-Colours-of-Fuzzing-Reflections-and-Open-Challenges">ThreeColours of Fuzzing: Reflections and Open Challenges - CristianCadar</a></h3><p>Why does fuzzing keep finding bugs in production software? LOTS ofcode is added or modified without being tested. (Covrig: A framework forthe analysis of code, test, and coverage evolution in real software)</p><p>Fuzzing is not automated enough. Fuzz targets (test drivers) need tobe manually specified. There is much work on improving fuzzingheuristics, but more work is required for test driver generation.</p><p>An ideal test case should benefit quality assurance, debugging aid,and documentation. They should <em>target human users</em>, and besmall, fast, readable, and well-documented. However, automaticallygenerated test suites, such as those generated by fuzzers, need to beimproved in these aspects. They achieve high code coverage, excel atfinding generic/crash bugs in general software that <em>may not be veryrealistic</em> (<ahref="https://www.manuelrigger.at/preprints/NoREC.pdf">assertion faults,crashes, undefined behavior</a>) but do not achieve high featurecoverage and are poor at detecting logical bugs in software for specificdomains.</p><p>On the other hand, such fuzzing makes it appropriate for use casesoutside of security and software testing that <em>require a novel searchto find diverse failing inputs, corner cases, and loopholes</em>, suchas ML models and even investigating legal documents (Rohan).</p><p>Developers tend to be <em>afraid</em> of using fuzzers as they don'tunderstand them or think of them as security tools, in contrast to astandard testing tool. Allowing fuzzing to operate at a higherdeclarative level and combining fuzzing with domain-specificspecification languages would be beneficial.</p><p>Sound fuzzer evaluation is challenging.</p><ul><li>Well-designed experiment methodology.</li><li>Huge variance due to randomness, demanding substantial computationresources (e.g., repeat 20x, 24 hours, X fuzzers, Y programs)</li></ul><h1 id="thu-20-jul">Thu 20 Jul</h1><h2 id="keynotes-at-amazon-auditorium-gates-g20">Keynotes at AmazonAuditorium (Gates G20)</h2><p>Paper Readinging Statistics</p><ul><li>44/97 papers accepted</li><li>Round 1: 40 submitted, 17 accepted, 9 rejected, 14 resubmit</li><li>Round 2: 57 submitted (11 resubmissions), 27 accepted, 18 rejected,12 resubmit</li></ul><h3id="dahl-nygaard-senior-prize-safe-journeys-into-the-unknown---object-capabilities---sophia-drossopoulou"><ahref="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/7/Dahl-Nygaard-Senior-Prize-Safe-Journeys-into-the-Unknown-Object-Capabilities">Dahl-NygaardSenior Prize: Safe Journeys into the Unknown - Object Capabilities -Sophia Drossopoulou</a></h3><ul><li>Think of an exciting question, such as various language features,and look into it as a research question (<ahref="https://link.springer.com/chapter/10.1007/3-540-45332-6_3">AnAbstract Model of Java Dynamic Linking and Loading</a>, <ahref="https://spiral.imperial.ac.uk/bitstream/10044/1/705/1/A%20flexible%20model%20for%20dynamic.pdf">AFlexible Model for Dynamic Linking in Java and C#</a>).</li><li>The key for program verification is to <em>develop formal models fora (subset) of a language</em>, make it small and simple, and graduallyexpand (<ahref="https://spiral.imperial.ac.uk/handle/10044/1/95175">Java is typesafe -- probably</a>).</li><li>Actively start collaborations (<ahref="https://dl.acm.org/doi/10.1145/582419.582447">Ownership,encapsulation and the disjointness of type and effect</a>).</li></ul><h2id="issta-10-test-optimizationsissta-technical-papers-at-smith-classroom-gates-g10">ISSTA10: Test OptimizationsISSTA Technical Papers at Smith Classroom (GatesG10)</h2><h3id="june-a-type-testability-transformation-for-improved-atg-performance"><ahref="https://2023.issta.org/details/issta-2023-technical-papers/15/June-A-Type-Testability-Transformation-for-Improved-ATG-Performance">June:A Type Testability Transformation for Improved ATG Performance</a></h3><p>Automatically generating unit tests is a powerful approach toexercising complex software. However, existing methods frequently failto deliver appropriate input values, like strings, capable of<em>bypassing domain-specific sanity checks</em>. For instance, Randoopcommonly uses "hi!" as a value. (<ahref="https://ieeexplore.ieee.org/abstract/document/8115617">Saying'Hi!' is not enough: Mining inputs for effective testgeneration</a>)</p><h3 id="pattern-based-peephole-optimizations-with-java-jit-tests"><ahref="https://2023.issta.org/details/issta-2023-technical-papers/112/Pattern-Based-Peephole-Optimizations-with-Java-JIT-Tests">Pattern-BasedPeephole Optimizations with Java JIT Tests</a></h3><p>To demonstrate the advantage of JOG over hand-written peepholeoptimizations in terms of <em>ease of writing</em>, existinghand-written peephole optimizations are compared, and <em>number ofcharacters and number of lines</em> are used as metrics.</p><h3id="gpuharbor-testing-gpu-memory-consistency-at-large-experience-paper"><ahref="https://2023.issta.org/details/issta-2023-technical-papers/54/GPUHarbor-Testing-GPU-Memory-Consistency-at-Large-Experience-Paper-">GPUHarbor:Testing GPU Memory Consistency at Large (Experience Paper)</a></h3><p>The tool has been implemented as <ahref="https://tinyurl.com/issta-gpuharbor"><em>a Web app using WebGPU toaccess the GPU</em></a>, allowing the audience to <em>try it out duringthe talk</em>.</p><h2id="keynote---issta24-preview---closingkeynotes-at-amazon-auditorium-gates-g20">Keynote- ISSTA'24 Preview - ClosingKeynotes at Amazon Auditorium (GatesG20)</h2><h3 id="machine-learning-for-software-engineering"><ahref="https://conf.researchr.org/details/ecoop-issta-2023/ecoop-issta-2023-keynotes/1/Machine-Learning-for-Software-Engineering">MachineLearning for Software Engineering</a></h3><p>What underlies the success of machine learning for softwareengineering?</p><ul><li><ahref="https://people.inf.ethz.ch/suz/publications/natural.pdf">Thenaturalness of code</a>. <code>i++</code> is predictable given<code>for (i = 0; i &lt; 10;</code>, and <code>backward()</code> ispredictable given <code>loss.</code></li><li><a href="https://dl.acm.org/doi/10.1145/3338906.3340458">Thebimodality of code, or code contains natural language</a>. Q. How do Iget a platform-dependent new line character? A. public static Stringget<em>Platform</em>LineSeparator() { returnSystem.getProperty("<em>line</em>.separator"); }</li><li><ahref="http://janvitek.org/events/NEU/7580/papers/more-papers/oopsla16-dt.pdf">Codehas predictable properties</a>. Given<code>... = x.weight * x.height</code>, what is the <code>???</code> in<code>... = y.weight * ???</code>?</li><li>Large amount of data (GitHub repos with code, version history, andcommit logs, StackOverflow questions and answers, internal corpora incompanies, etc.)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Conference and Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PNW PLSE Workshop 2023 Observations and Gained Insights</title>
    <link href="/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/"/>
    <url>/2023/05/09/PNW-PLSE-Workshop-2023-Observations-and-Gained-Insights/</url>
    
    <content type="html"><![CDATA[<h1 id="talks"><ahref="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.5ebiaujbjmrk">10:30- Talks</a></h1><h2 id="linear-types-for-systems-verification"><ahref="https://drive.google.com/file/d/1Bv4_PnXXZfx6egG4htZNfNYES_gFhfR7/view?usp=share_link">LinearTypes for Systems Verification</a></h2><p>It is a good idea to embed verification information in type system ofa programming language.</p><h2 id="verified-program-construction"><ahref="https://drive.google.com/file/d/14XdepAsHM1ts-tp21UXAqMOEbsB8mkHG/view?usp=share_link">VerifiedProgram Construction</a></h2><ul><li>Program verification is hard per se.<ul><li>Proofs are brittle.</li><li>Existing techniques provide poor support for commonly-used datatypessuch as vectors, sets, and maps.</li><li>Partial verification is important due to the complexity ofprograms.</li></ul></li><li>Program verification for general-purpose programming languages andframeworks for general-purpose programming languages is tedious comparedto focusing on a DSL.</li><li>The direction for program verification should be <em>verifiedprogram construction</em>.</li><li>Be aware of the pain point you are trying to solve and theday-to-day engineering reality in real-world software development.</li></ul><h1 id="keynote-patrick-lam"><ahref="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.4alvulgrtjyi">13:00- Keynote: Patrick Lam</a></h1><h2 id="hot-takes-on-machine-learning-for-program-analysis"><ahref="https://drive.google.com/file/d/1cfncXsqGw9kFHwi0BBE-VO7JkA1qY8eO/view?usp=share_link">HotTakes on Machine Learning for Program Analysis</a></h2><ul><li>A crucial step in Machine Learning for Program Analysis is decidingwhat things could be used as features based on experience.</li><li>Generative AI can replace junior developers doing <em>rawcoding</em> instead of <em>contextual work</em>.</li></ul><h1 id="lightning-talks"><ahref="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.m58uw7yzsis">13:30- Lightning Talks</a></h1><h2 id="lakeroad-hardware-compilation-via-program-synthesis"><ahref="https://drive.google.com/file/d/165w2NcaRdSk_gy80TkHSQDb1z3yLnxyZ/view?usp=share_link">Lakeroad:Hardware Compilation via Program Synthesis</a></h2><p>If you don't use DSLs, FPGAs bring crappy performance runningprograms in general-purpose programming languages.</p><h2 id="checked-c"><ahref="https://drive.google.com/file/d/1e8T4sz96FRtYDzqdxMM2AFEf7Cfutn7z/view?usp=share_link">CheckedC</a></h2><p>Retrofitting verification into non-verified languages is an arduoustask.</p><h1 id="talks-1"><ahref="https://sites.google.com/cs.washington.edu/pnwplseworkshop/pnw-plse-2023#h.kl2qgin09esc">15:15- Talks</a></h1><h2id="an-anti-capitalist-multicultural-accessible-programming-language"><ahref="https://drive.google.com/file/d/1OD9XlNAPLXTtYFzFY2mpRA-gCoLWFCic/view?usp=share_link">AnAnti-Capitalist, Multicultural, Accessible Programming Language</a></h2><p>An event-based language enabling time-traveling to all points inprogram execution history would greatly benefit debugging.</p>]]></content>
    
    
    <categories>
      
      <category>Conference and Meeting Minutes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Sized Types</title>
    <link href="/2023/03/25/Paper-Reading-Sized-Types/"/>
    <url>/2023/03/25/Paper-Reading-Sized-Types/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics inProgramming Languages: Type Systems</a>. The original paper can be found<a href="https://doi.org/10.1145/237721.240882">here</a>.</p><h1 id="summary">Summary</h1><p>You can check the presentation that I made for this paper <ahref="https://github.com/abbaswu/sized-types-presentation">in thisGitHub repository</a>.</p><h1 id="critique">Critique</h1><p>Although I liked the idea of Sized Types proposed in the motivation,this paper was difficult for me to grasp, and after spending daysreading it, there are still sections which I am confused about. I havesummarized my understanding of this paper in the uploaded PDF, and Iwill discuss my thoughts here.</p><ol type="1"><li>I really like the idea of Sized Types that they can be used to provedata computations terminate and codata computations are productive usingthe same formalization.</li><li>Apparently, the requirement that size indexes in Sized Types benatural number size variables, the special index <spanclass="math inline">\(\omega\)</span>, or linear functions of the sizevariables facilitates generating constraints in the type checkingalgorithm that can be solved by a constraint solver (e.g. an SMTsolver). Although this may lead to overapproximation in certainscenarions (for example, representing the type of the factorialfunction), over all, I consider it to be a good balance point betweenexpressiveness and usability.</li><li>3.2 Semantics of Expressions, 3.3 The Universe of Types, 3.4Continuity and Ordinals, 3.5 Semantics of Types, and 3.7 <spanclass="math inline">\(\omega\)</span>-Types used a lot of conceptsbefore properly introducing them, and I couldn't understand thispart.</li><li>The example presented to demonstrate the type checking algorithminvolves generating constraints. However, only the generated constraintsare presented, while how the constraints are generated and what eachsymbol in the constraints stand for with regards to the aforementionedAST nodes is unknown.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Refinement Types</title>
    <link href="/2023/03/19/Paper-Reading-Refinement-Types/"/>
    <url>/2023/03/19/Paper-Reading-Refinement-Types/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics inProgramming Languages: Type Systems</a>. The original paper can be found<a href="https://arxiv.org/abs/2010.07763">here</a>.</p><h1 id="summary">Summary</h1><p>This paper presents a clear and organized guide to refinement typesystems by condensing the extensive literature on the topic anddemonstrating the implementation of a refinement type checker. It firststates the motivation for requirement types, a history of requirementtypes, and refinement logic, which is a logic system used in theproposed refinement type checker. The rest of the paper shows theimplementation of a refinement type checker through a series ofprogramming languages, beginning with simply-typed lambda calculus andincrementally adding additional features. This approach is influenced bythe nanopass framework, which is used to teach compilation.</p><h1 id="critique">Critique</h1><p>Honestly, I have found the section on implementing a refinement typechecker through a series of programming languages challenging tounderstand. Still, I have understood much of the paper before that.Therefore, I will summarize my gained insights and state questions thatI have in mind.</p><h2 id="insights">Insights</h2><h3 id="refinement-types-as-subtypes">Refinement Types as Subtypes</h3><p>Type systems are the most commonly employed technique for ensuringthe correct behavior of software. However, even well-typed programs cancontain various bugs, such as buffer overflows, divisions by zero, logicbugs, and out-of-bounds array accesses. One approach to address thisissue is to enhance a language's types with <strong>subtypes that limitthe range of valid values with predicates</strong>, such as'non-negative integer' from 'integer.' These subtypes are known as'refinement types.' They enable developers to write precise contractsfor valid inputs and outputs of functions and specify the correctnessproperties. This brings formal verification into mainstream softwaredevelopment.</p><h3 id="refinement-logic-and-how-it-maps-to-smt-expressions">RefinementLogic and How it Maps to SMT Expressions</h3><p>I was partically impressed by refinement logic, the logic system usedin the proposed refinement type checker, as it is both expressive andeasy to be verified using an SMT solver.</p><p>Refinement logic consists of two parts: predicates andconstraints.</p><p>Predicates are drawn from the quantifier-free fragment of lineararithmetic and uninterpreted functions (commonly used in SMT solvers),and may include boolean and integer literals, boolean and integervariables, arithmetic operators, boolean operators, comparisons, the'if-then-else' expression, and uninterpreted functions (resembling thosein <code>z3</code>).</p><p>Predicates are the building block of constraints, which are generatedfrom refinement type checking. A constraint is either a predicate, animplication <span class="math inline">\(\forall t: T \: p \Rightarrowc\)</span> which states that for each term <spanclass="math inline">\(t\)</span> of type <spanclass="math inline">\(T\)</span>, if the predicate <spanclass="math inline">\(p\)</span> holds then another constraint <spanclass="math inline">\(c\)</span> must be true, or a conjunction of twoother constraints.</p><p>Constraints can be verified by <strong>checking whether there is nosatisfying assignment for the negated constraint</strong>. In thisprocess, they can be converted into SMT expressions in a straightforwardway.</p><p>For example, the constraint presented in the paper</p><p><span class="math display">\[c = \forall x: array \: 0 \le length(x)\Rightarrow \forall n: int \: n = length(x) \Rightarrow \forall i: int\: i = n - 1 \Rightarrow 0 \le i \land i &lt; length(x)\]</span></p><p>can be negated as follows:</p><p><span class="math display">\[\neg c\]</span></p><p><span class="math display">\[\neg (\forall x: array \: 0 \lelength(x) \Rightarrow \forall n: int \: n = length(x) \Rightarrow\forall i: int \: i = n - 1 \Rightarrow 0 \le i \land i &lt;length(x))\]</span></p><p><span class="math display">\[\exists x: array \: 0 \le length(x)\land \neg (\forall n: int \: n = length(x) \Rightarrow \forall i: int\: i = n - 1 \Rightarrow 0 \le i \land i &lt; length(x))\]</span></p><p><span class="math display">\[\exists x: array \: 0 \le length(x)\land \exists n: int \: n = length(x) \land \neg (\forall i: int \: i =n - 1 \Rightarrow 0 \le i \land i &lt; length(x))\]</span></p><p><span class="math display">\[\exists x: array \: 0 \le length(x)\land \exists n: int \: n = length(x) \land \exists i: int \: i = n - 1\land \neg (0 \le i \land i &lt; length(x))\]</span></p><p><span class="math display">\[\exists x: array \: 0 \le length(x)\land \exists n: int \: n = length(x) \land \exists i: int \: i = n - 1\land (0 &gt; i \lor i \ge length(x))\]</span></p><p>We can verify the negated constraint using an SMT solver:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> z3<br><br>In [<span class="hljs-number">2</span>]: L = z3.Int(<span class="hljs-string">&#x27;L&#x27;</span>)<br><br>In [<span class="hljs-number">3</span>]: n = z3.Int(<span class="hljs-string">&#x27;n&#x27;</span>)<br><br>In [<span class="hljs-number">4</span>]: i = z3.Int(<span class="hljs-string">&#x27;i&#x27;</span>)<br><br>In [<span class="hljs-number">5</span>]: solver = z3.Solver()<br><br>In [<span class="hljs-number">6</span>]: solver.add(<span class="hljs-number">0</span> &lt;= L)<br><br>In [<span class="hljs-number">7</span>]: solver.add(n == L)<br><br>In [<span class="hljs-number">8</span>]: solver.add(i == n - <span class="hljs-number">1</span>)<br><br>In [<span class="hljs-number">9</span>]: solver.add(z3.Or(i &lt; <span class="hljs-number">0</span>, i &gt; L))<br><br>In [<span class="hljs-number">10</span>]: check_sat_result = solver.check()<br><br>In [<span class="hljs-number">11</span>]: check_sat_result<br>Out[<span class="hljs-number">11</span>]: sat<br><br>In [<span class="hljs-number">12</span>]: model_ref = solver.model()<br><br>In [<span class="hljs-number">13</span>]: model_ref<br>Out[<span class="hljs-number">13</span>]: [i = -<span class="hljs-number">1</span>, L = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>Note that <code>check_sat_result</code> is <code>sat</code> and wecan find a satisfying assignment for <span class="math inline">\(\negc\)</span>: <span class="math inline">\(i = -1, length(x) = 0, n =0\)</span>. This means that the original constraint <spanclass="math inline">\(c\)</span> is invalid.</p><h2 id="questions">Questions</h2><p>Although the concept of refinement types is neat, what is the burdenon programmers of writing refinement types that describe legal inputsand outputs of functions? This is a critical aspect to determine whetherrefinement types can bring formal verification into mainstream softwaredevelopment.</p><p>Furthermore, constraints in the proposed refinement logic generatedby the refinement type checker can be negated and converted into SMTexpressions. However, what is the feasibility of doing such checking forlarge-scale programs? Would it become unscalable?</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: How to make ad-hoc polymorphism less ad-hoc</title>
    <link href="/2023/03/06/Paper-Reading-How-to-make-ad-hoc-polymorphism-less-ad-hoc/"/>
    <url>/2023/03/06/Paper-Reading-How-to-make-ad-hoc-polymorphism-less-ad-hoc/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics inProgramming Languages: Type Systems</a>. The original paper can be found<a href="https://doi.org/10.1145/75277.75283">here</a>.</p><h1 id="summary">Summary</h1><p>The paper first defines and compares <ahref="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">parametricand ad-hoc polymorphism</a> and points out the limitations of existingimplementations of ad-hoc polymorphism. It then presents type classesthat extend the Hindley/Milner type system to support ad-hocpolymorphism as a remedy to these limitations and explains how totranslate a program using type classes into an equivalent programwithout them at compile-time. Furthermore, it showcases the power oftype classes and the translation mechanism using the example of apolymorphic equality operation. Finally, it explores subclassing of typeclasses.</p><h1 id="critique">Critique</h1><p>The paper is easy to follow as it is written in a lucid manner andgives an informal introduction to type classes and its translationrules. Furthermore, the motivation for type classes and how it connectsto object-oriented programming languages is explicitly stated in thepaper. I have further looked up some material following these lines. Iwill summarize them before presenting some questions and comments.</p><h2 id="my-takeaways">My Takeaways</h2><h3 id="different-types-of-polymorphism">Different Types ofPolymorphism</h3><p>See <ahref="https://abbaswu.github.io/2023/02/10/Paper-Review-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/#Polymorphism">myPaper Reading for "Types and Programming Languages" Chapter 15 andChapter 16</a>.</p><h3id="type-classes-and-protocolsinterfaces-in-smalltalkobjective-cjavac">TypeClasses and Protocols/Interfaces in Smalltalk/Objective-C/Java/C</h3><p>An interface is an abstract type used to provide a collection ofmethods compliant classes must implement in the Java (and C#)programming languages.</p><p>Java is mostly influenced by Objective-C, and Java's interfaces areadaptations of the protocols in Objective-C and Smalltalk, which in turnis based on protocols in networking, notably the ARPANet.</p><p>Although Type Classes and Interfaces do not share a common lineage,it is straightforward to implement Type Classes with <em>GenericInterfaces</em> whose Generic Parameters should be Classes that complywith the Interface.</p><p>For instance, the Type Class below specifies the equal (==)operations for Type Constructors that are its instances:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented in Java using the following GenericInterface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Eq</span>&lt;T&gt; &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEqual</span><span class="hljs-params">(T other)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="type-classes-and-concepts-in-c">Type Classes and Concepts inC++</h3><p>Although Java's syntax resembles C++'s, its semantics oflate-binding, single inheritance, class objects, and an extensiveruntime system are in the lineage of Smalltalk and Objective-C, far awayfrom that of C++'s. However, in C++'s Template Metaprogramming world,Concepts, added in C++20, resembles Type Classes.</p><p>Template Metaprogramming in C++ had been untyped, with templateparameters being generic type variables substituted at templateinstantiation.</p><p>In C++20, a type system has been added to this untyped templatelanguage through concepts. They are Boolean predicates on templateparameters evaluated at the point of, not after, template instantiation.The compiler will produce a clear error immediately if a programmertries to use a template parameter that doesn't meet the requirements ofa concept.</p><p>This starkly contrasts the challenging-to-grasp errors reported afteran invalid type substitutes a generic type variable emanating from theimplementation context rather than the template instantiationitself.</p><p>For instance, the first two arguments to <code>std::sort</code> mustbe random-access iterators. If an argument is not a random-accessiterator, an error will occur when <code>std::sort</code> attempts touse it as a bidirectional iterator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::list&lt;<span class="hljs-type">int</span>&gt; l = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>Without concepts, compilers may produce large amounts of errorinformation, starting with an equation that failed to compile when ittried to subtract two non-random-access iterators:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">In instantiation <span class="hljs-keyword">of</span> &#x27;void std::<span class="hljs-constructor">__sort(<span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_Compare</span>)</span> <span class="hljs-literal">[<span class="hljs-identifier">with</span> <span class="hljs-identifier">_RandomAccessIterator</span> = <span class="hljs-identifier">std</span>::<span class="hljs-identifier">_List_iterator</span>&lt;<span class="hljs-identifier">int</span>&gt;; <span class="hljs-identifier">_Compare</span> = <span class="hljs-identifier">__gnu_cxx</span>::<span class="hljs-identifier">__ops</span>::<span class="hljs-identifier">_Iter_less_iter</span>]</span>&#x27;:<br> error: no <span class="hljs-keyword">match</span> <span class="hljs-keyword">for</span> &#x27;operator-&#x27; (operand types are &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27; <span class="hljs-keyword">and</span> &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27;)<br> std::<span class="hljs-constructor">__lg(<span class="hljs-params">__last</span> - <span class="hljs-params">__first</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">2</span>,<br></code></pre></td></tr></table></figure><p>However, if concepts are used, the problem can be found and reportedat template instantiation:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>cannot call function &#x27;void std::sort(_RAIter, _RAIter) [with _RAIter = std::_List_iterator&lt;int&gt;]&#x27;<br>note:   concept &#x27;RandomAccessIterator()&#x27; was not satisfied<br></code></pre></td></tr></table></figure><p>It is straightforward to implement Type Classes with concepts. Forinstance, the Type Class below specifies the equal (==) operations forType Constructors that are its instances:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented using the following C++ concept:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concepts&gt;</span></span><br><br><br><span class="hljs-comment">// Declaration of the concept &quot;Eq&quot;, which is satisfied by any type &#x27;T&#x27;</span><br><span class="hljs-comment">// such that for values &#x27;t&#x27; of type &#x27;T&#x27;, the expression t == t compiles</span><br><span class="hljs-comment">// and its type satisfies the concept std::same_as&lt;bool&gt;</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">concept</span> Eq = <span class="hljs-built_in">requires</span> (T t) &#123;<br>    &#123; t == t &#125; -&gt; std::same_as&lt;<span class="hljs-type">bool</span>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Afterwards, such a concept can be specified when template parametersare being introduced in a template definition, to indicate that thecorresponding template parameter must satisfy the concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Eq T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="references">References</h3><ul><li>https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities</li><li>https://cs.gmu.edu/~sean/stuff/java-objc.html</li><li>https://functionalcpp.wordpress.com/2013/08/16/type-classes/</li><li>https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses</li><li>https://wiki.haskell.org/OOP_vs_type_classes</li><li>https://doi.org/10.1145/1411318.1411324</li><li>https://www.foonathan.net/2021/07/concepts-structural-nominal/</li><li>https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/</li></ul><h2 id="questions-and-comments">Questions and Comments</h2><ul><li>The translation mechanism (pre-processor) proposed in this papertranslates a program using type classes into an equivalent programwithout them at compile-time so that an existing Hindley/Milner typesystem can be used afterward instead of having to develop a new, complextype system to support type classes. This is indeed a very clevermechanism. Can this be viewed as an example of <ahref="https://abbaswu.github.io/2023/01/25/Paper-Review-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/#Derived-Forms">desugaring</a>?</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Type-Theoretic Constructs in C++</title>
    <link href="/2023/03/01/Type-Theoretic-Constructs-in-CXX/"/>
    <url>/2023/03/01/Type-Theoretic-Constructs-in-CXX/</url>
    
    <content type="html"><![CDATA[<h1id="fixed-point-combinators-tying-the-recursive-knot-and-recursive-lambda-expressions">Fixed-pointCombinators, Tying the Recursive Knot, and Recursive LambdaExpressions</h1><p>In Lambda Calculus, we cannot refer to the Lambda Abstraction<em>itself</em> within a Lambda Abstraction. Similarly, C++ does notallow defining a recursive lambda expression. Thus, we cannotstraightforwardly implement recursion.</p><p>A workaround for this is to define a lambda expression that:</p><ul><li>Add an <em>additional first parameter</em> to the lambdaexpression.</li><li>Call that <em>additional first parameter</em> inside the lambdaexpression at each recursive call site.</li></ul><p>Such an additional first parameter should have the value of ayet-unknown hypothetical recursive function. Thus, we should use<code>auto</code> to represent its type. Using <code>auto</code> in alambda expression's parameter list requires C++14 or above.</p><p>For example, we can define the following lambda expression tocalculate the <code>n</code>th Fibonacci Number recursively:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> fib = [](<br>    <span class="hljs-keyword">auto</span> recursive_fib,<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n<br>) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>After defining such a lambda expression, we can use a <ahref="https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed-point_combinators_in_lambda_calculus">Fixed-pointCombinator</a> to <ahref="https://courses.cs.cornell.edu/cs3110/2021sp/textbook/mut/ex_recursion_without_rec.html">tiethe recursive knot</a> and return a new recursive function without theadditional first parameter.</p><p>What is a Fixed-Point Combinator?</p><p>In mathematics, a <em>fixed-point</em> for function <spanclass="math inline">\(f\)</span> refers to an element <spanclass="math inline">\(x\)</span> that is mapped to itself by thefunction, i.e., <span class="math inline">\(x = f(x)\)</span>. Forexample, given <span class="math inline">\(f(x)=x^{2}-3x+4\)</span>,then <span class="math inline">\(2\)</span> is a fixed point of <spanclass="math inline">\(f\)</span>, because <spanclass="math inline">\(f(2) = 2\)</span>.</p><p>A <em>combinator</em> is a function that operates on a function(i.e., a <em>higher-order function</em>).</p><p>A <em>fixed-point combinator</em> <code>g</code> for function<code>f</code> satisfies <code>g(f)(...) = f(g(f), ...)</code>. This isreminiscent of the form <span class="math inline">\(x = f(x)\)</span>for fixed points in mathematics, and <code>g(f)</code> can be seen as a<em>fixed-point</em> of function <code>f</code>.</p><p>This implies that <em>a fixed-point combinator <code>g</code>, whencalled on <code>f</code>, returns a new function (the <code>g(f)</code>above), that, when called with parameters <code>...</code>, isequivalent to directly calling <code>f</code> with both<code>g(f)</code> and <code>...</code></em>. This means that afixed-point combinator <em>returns a new recursive function without theadditional first parameter of <code>f</code></em>.</p><p>This is done by <em>tying the recursive knot of <code>f</code></em>.<em>Tying the recursive knot</em> refers to, for such a previouslydefined lambda expression <code>f</code>, passing a function thatrepresents the hypothetical recursive function, which in this case is<code>g(f)</code>, to its first parameter.</p><p>We can implement fixed-point combinators in C++ using the followingstruct, whose instance represents <code>g(f)</code> and contains an<code>operator()</code> method, in which can use <code>this</code> toself-reference to <code>g(f)</code>, allowing us to support<code>f(g(f), ...)</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> F, <span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FixedPointCombinator</span> &#123;<br>    F f;<br><br>    <span class="hljs-function">R <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Args... args)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(*<span class="hljs-keyword">this</span>, args...);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>C++ supports compiler optimizations for this pattern. For example,the following code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> F, <span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FixedPointCombinator</span> &#123;<br>    F f;<br><br>    <span class="hljs-function">R <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Args... args)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(*<span class="hljs-keyword">this</span>, args...);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">auto</span> fib = [](<br>    <span class="hljs-keyword">auto</span> recursive_fib,<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n<br>) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> fib_ = FixedPointCombinator&lt;<span class="hljs-keyword">decltype</span>(fib), <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; &#123;fib&#125;;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> input;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;input);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">fib_</span>(input);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lu\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>compiles to the following LLVM IR under<code>clang++ -std=c++14 -O2 -S -emit-llvm</code>, in which<code>FixedPointCombinator&lt;decltype(fib), unsigned long, unsigned int&gt; &#123;fib&#125;</code>has been optimized to the recursive function<code>@_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j</code>:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-comment">; ModuleID = &#x27;fib_recursive.cpp&#x27;</span><br>source_filename <span class="hljs-operator">=</span> <span class="hljs-string">&quot;fib_recursive.cpp&quot;</span><br><span class="hljs-keyword">target</span> <span class="hljs-keyword">datalayout</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="hljs-keyword">target</span> <span class="hljs-keyword">triple</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;x86_64-unknown-linux-gnu&quot;</span><br><br><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%u<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%lu\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">5</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: inlinehint nounwind readnone uwtable</span><br><span class="hljs-keyword">define</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span>) <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-variable">#3</span> <span class="hljs-keyword">align</span> <span class="hljs-number">2</span> &#123;<br>  <span class="hljs-keyword">switch</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%3</span> [<br>    <span class="hljs-type">i32</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%9</span><br>    <span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> label <span class="hljs-variable">%2</span><br>  ]<br><br><span class="hljs-number">2</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-keyword">br</span> label <span class="hljs-variable">%9</span><br><br><span class="hljs-number">3</span>:                                                <span class="hljs-comment">; preds = %1</span><br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-1</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">tail</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%4</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">-2</span><br>  <span class="hljs-variable">%7</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">tail</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">fastcc</span> <span class="hljs-type">i64</span> @<span class="hljs-string">&quot;_ZNK3$_0clI20FixedPointCombinatorIS_mJjEEEEmT_j&quot;</span>(<span class="hljs-type">i32</span> <span class="hljs-variable">%6</span>) <span class="hljs-variable">#4</span><br>  <span class="hljs-variable">%8</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">add</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%7</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%5</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%8</span><br><br><span class="hljs-number">9</span>:                                                <span class="hljs-comment">; preds = %1, %2</span><br>  <span class="hljs-variable">%10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">phi</span> <span class="hljs-type">i64</span> [ <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%2</span> ]<span class="hljs-punctuation">,</span> [ <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-variable">%1</span> ]<br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i64</span> <span class="hljs-variable">%10</span><br>&#125;<br><br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#0</span> <span class="hljs-operator">=</span> &#123; norecurse <span class="hljs-keyword">nounwind</span> <span class="hljs-keyword">uwtable</span> <span class="hljs-string">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;disable-tail-calls&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;less-precise-fpmad&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;min-legal-vector-width&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> <span class="hljs-string">&quot;no-frame-pointer-elim&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-infs-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-jump-tables&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-nans-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-signed-zeros-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-trapping-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;stack-protector-buffer-size&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;target-cpu&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;x86-64&quot;</span> <span class="hljs-string">&quot;target-features&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="hljs-string">&quot;unsafe-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;use-soft-float&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#1</span> <span class="hljs-operator">=</span> &#123; <span class="hljs-keyword">argmemonly</span> <span class="hljs-keyword">nounwind</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#2</span> <span class="hljs-operator">=</span> &#123; nofree <span class="hljs-keyword">nounwind</span> <span class="hljs-string">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;disable-tail-calls&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;less-precise-fpmad&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-frame-pointer-elim&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-infs-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-nans-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-signed-zeros-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-trapping-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;stack-protector-buffer-size&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;target-cpu&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;x86-64&quot;</span> <span class="hljs-string">&quot;target-features&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="hljs-string">&quot;unsafe-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;use-soft-float&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#3</span> <span class="hljs-operator">=</span> &#123; <span class="hljs-keyword">inlinehint</span> <span class="hljs-keyword">nounwind</span> <span class="hljs-keyword">readnone</span> <span class="hljs-keyword">uwtable</span> <span class="hljs-string">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;disable-tail-calls&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;less-precise-fpmad&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;min-legal-vector-width&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;0&quot;</span> <span class="hljs-string">&quot;no-frame-pointer-elim&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-infs-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-jump-tables&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-nans-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-signed-zeros-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;no-trapping-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;stack-protector-buffer-size&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;target-cpu&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;x86-64&quot;</span> <span class="hljs-string">&quot;target-features&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="hljs-string">&quot;unsafe-fp-math&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> <span class="hljs-string">&quot;use-soft-float&quot;</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;false&quot;</span> &#125;<br><span class="hljs-keyword">attributes</span> <span class="hljs-variable">#4</span> <span class="hljs-operator">=</span> &#123; <span class="hljs-keyword">nounwind</span> &#125;<br><br><span class="hljs-title">!llvm.module.flags</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-title">!0</span>&#125;<br><span class="hljs-title">!llvm.ident</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-title">!1</span>&#125;<br><br><span class="hljs-title">!0</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-type">i32</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> !<span class="hljs-string">&quot;wchar_size&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-number">4</span>&#125;<br><span class="hljs-title">!1</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;clang version 9.0.1 (https://github.com/conda-forge/clangdev-feedstock 2ea3b72da24769de0dfc6dac99251a5d7a46144d)&quot;</span>&#125;<br><span class="hljs-title">!2</span> <span class="hljs-operator">=</span> !&#123;<span class="hljs-title">!3</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!3</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>&#125;<br><span class="hljs-title">!3</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;int&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>&#125;<br><span class="hljs-title">!4</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;omnipotent char&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!5</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>&#125;<br><span class="hljs-title">!5</span> <span class="hljs-operator">=</span> !&#123;!<span class="hljs-string">&quot;Simple C++ TBAA&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>We can slightly modify the code above to support a fixed-pointcombinator that also provides <em>memoization</em>. Note that<strong>the instance of the fixed-point combinator is now stateful, andwe should pass it by reference to <code>fib</code> (i.e., change thefirst parameter of <code>fib</code> to reference type)</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tuple&gt;</span></span><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> F, <span class="hljs-keyword">typename</span> R, <span class="hljs-keyword">typename</span>... Args&gt; <span class="hljs-keyword">struct</span> <span class="hljs-title class_">FixedPointCombinatorWithMemoization</span> &#123;<br>    F f;<br>    std::map&lt;std::tuple&lt;Args...&gt;, R&gt; memo;<br><br>    <span class="hljs-function">R <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Args... args)</span> </span>&#123;<br>        <span class="hljs-function">std::tuple&lt;Args...&gt; <span class="hljs-title">args_tuple</span><span class="hljs-params">(args...)</span></span>;<br><br>        <span class="hljs-comment">// Check if result is in the memoization map</span><br>        <span class="hljs-keyword">auto</span> found = memo.<span class="hljs-built_in">find</span>(args_tuple);<br>        <span class="hljs-keyword">if</span> (found != memo.<span class="hljs-built_in">end</span>()) &#123;<br>            <span class="hljs-keyword">return</span> found-&gt;second; <span class="hljs-comment">// Return the cached result</span><br>        &#125;<br><br>        <span class="hljs-comment">// Otherwise, compute and store the result</span><br>        R result = <span class="hljs-built_in">f</span>(*<span class="hljs-keyword">this</span>, args...);<br>        memo[args_tuple] = result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">auto</span> fib = [](<br>    <span class="hljs-keyword">auto</span>&amp; recursive_fib,<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n<br>) -&gt; <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> &#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0UL</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1UL</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">recursive_fib</span>(n - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> fib_ = FixedPointCombinatorWithMemoization&lt;<span class="hljs-keyword">decltype</span>(fib), <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt; &#123;fib&#125;;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> input;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;input);<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> result = <span class="hljs-built_in">fib_</span>(input);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lu\n&quot;</span>, result);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="type-abstractions-and-template-functions">Type Abstractions andTemplate Functions</h1><p>Polymorphic Lambda Calculus (also known as Second Order LambdaCalculus or System F) introduces Type Abstractions and TypeApplications.</p><ul><li>A Type Abstraction, written as <code>λ X . t</code>, represents aTerm (often a Lambda Abstraction) <code>t</code> containing a TypeVariable <code>X</code>.</li><li>A Type Application, written as <code>t [T]</code>, uses a ConcreteType <code>T</code> to replace all instances of the Type Variable in theTerm of the Type Abstraction.</li></ul><p>This can be used to implement Polymorphic Lambda Abstractions.</p><p>For example, the following Type Abstraction representing aPolymorphic Identity Function:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">id</span> = λ X . λ x: X . x<br></code></pre></td></tr></table></figure><p>can be instantiated to yield any concrete identity function that maybe required, such as <code>id [Nat]: Nat -&gt; Nat</code>.</p><p>Such Type Abstractions can be implemented in C++ using templatefunctions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">id</span><span class="hljs-params">(X x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>while Type Applications correspond to template instantiations:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">id&lt;<span class="hljs-type">int</span>&gt;<br></code></pre></td></tr></table></figure><p>Should the template function be passed a callable, we usually want touse a template typename to support functions, function pointers,functors, and lambda expressions. Alternatively, we can also use<code>auto</code> to represent its type in the template function'sparameter list. Note that using <code>auto</code> in a (non-lambdaexpression) function's parameter list requires C++20 or above.</p><p>For example, the following Type Abstraction:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">double = λ <span class="hljs-keyword">X</span> . λ f: <span class="hljs-keyword">X</span> -&gt; <span class="hljs-keyword">X</span> . λ a: <span class="hljs-keyword">X</span> . f(f a)<br></code></pre></td></tr></table></figure><p>can be represented using the following template function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X, <span class="hljs-keyword">typename</span> F&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> F f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>or in C++20 or above:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ compilers support aggressive inlining optimizations when lambdaexpressions are used. For example, the call to<code>const auto g = double_&lt;int&gt;([](int x) &#123; return 2 * x; &#125;);</code>in the following source code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> X&gt; <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">double_</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> f)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> [f](X a) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">f</span>(<span class="hljs-built_in">f</span>(a));<br>    &#125;;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> g = <span class="hljs-built_in">double_</span>&lt;<span class="hljs-type">int</span>&gt;([](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x; &#125;);<br>    <br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">g</span>(input));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>has been completely inlined to <code>%5 = shl i32 %4, 2</code> in theLLVM IR generated with<code>clang++ -std=c++20 -O2 -S -emit-llvm</code>:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">@.str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><span class="hljs-title">@.str.1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">unnamed_addr</span> <span class="hljs-keyword">constant</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>] <span class="hljs-keyword">c</span><span class="hljs-string">&quot;%d\0A<span class="hljs-char escape_">\00</span>&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">1</span><br><br><span class="hljs-comment">; Function Attrs: norecurse nounwind uwtable</span><br><span class="hljs-keyword">define</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@main</span>() local_unnamed_addr <span class="hljs-variable">#0</span> &#123;<br>  <span class="hljs-variable">%1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">alloca</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><br>  <span class="hljs-variable">%2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">bitcast</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span> <span class="hljs-keyword">to</span> <span class="hljs-type">i8</span>*<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-variable">%3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">3</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* nonnull <span class="hljs-variable">%1</span>)<br>  <span class="hljs-variable">%4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">load</span> <span class="hljs-type">i32</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span>* <span class="hljs-variable">%1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">align</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-title">!tbaa</span> <span class="hljs-title">!2</span><br>  <span class="hljs-variable">%5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">shl</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%4</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><br>  <span class="hljs-variable">%6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">call</span> <span class="hljs-type">i32</span> (<span class="hljs-type">i8</span>*<span class="hljs-punctuation">,</span> ...) <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* nonnull dereferenceable(<span class="hljs-number">1</span>) <span class="hljs-keyword">getelementptr</span> <span class="hljs-keyword">inbounds</span> ([<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]<span class="hljs-punctuation">,</span> [<span class="hljs-number">4</span> <span class="hljs-keyword">x</span> <span class="hljs-type">i8</span>]* <span class="hljs-title">@.str.1</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i64</span> <span class="hljs-number">0</span>)<span class="hljs-punctuation">,</span> <span class="hljs-type">i32</span> <span class="hljs-variable">%5</span>)<br>  <span class="hljs-keyword">call</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* nonnull <span class="hljs-variable">%2</span>) <span class="hljs-variable">#3</span><br>  <span class="hljs-keyword">ret</span> <span class="hljs-type">i32</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.start.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@__isoc99_scanf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: nofree nounwind</span><br><span class="hljs-keyword">declare</span> dso_local <span class="hljs-type">i32</span> <span class="hljs-title">@printf</span>(<span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span> <span class="hljs-keyword">readonly</span><span class="hljs-punctuation">,</span> ...) local_unnamed_addr <span class="hljs-variable">#2</span><br><br><span class="hljs-comment">; Function Attrs: argmemonly nounwind willreturn</span><br><span class="hljs-keyword">declare</span> void <span class="hljs-title">@llvm.lifetime.end.p0i8</span>(<span class="hljs-type">i64</span> immarg<span class="hljs-punctuation">,</span> <span class="hljs-type">i8</span>* <span class="hljs-keyword">nocapture</span>) <span class="hljs-variable">#1</span><br></code></pre></td></tr></table></figure><h1 id="type-classes-and-concepts-in-c">Type Classes and Concepts inC++</h1><p>Template Metaprogramming in C++ had been untyped, with templateparameters being generic type variables substituted at templateinstantiation.</p><p>In C++20, a type system has been added to this untyped templatelanguage through concepts. They are Boolean predicates on templateparameters evaluated at the point of, not after, template instantiation.The compiler will produce a clear error immediately if a programmertries to use a template parameter that doesn't meet the requirements ofa concept.</p><p>This starkly contrasts the challenging-to-grasp errors reported afteran invalid type substitutes a generic type variable emanating from theimplementation context rather than the template instantiationitself.</p><p>For instance, the first two arguments to <code>std::sort</code> mustbe random-access iterators. If an argument is not a random-accessiterator, an error will occur when <code>std::sort</code> attempts touse it as a bidirectional iterator.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">std::list&lt;<span class="hljs-type">int</span>&gt; l = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>Without concepts, compilers may produce large amounts of errorinformation, starting with an equation that failed to compile when ittried to subtract two non-random-access iterators:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">In instantiation <span class="hljs-keyword">of</span> &#x27;void std::<span class="hljs-constructor">__sort(<span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_RandomAccessIterator</span>, <span class="hljs-params">_Compare</span>)</span> <span class="hljs-literal">[<span class="hljs-identifier">with</span> <span class="hljs-identifier">_RandomAccessIterator</span> = <span class="hljs-identifier">std</span>::<span class="hljs-identifier">_List_iterator</span>&lt;<span class="hljs-identifier">int</span>&gt;; <span class="hljs-identifier">_Compare</span> = <span class="hljs-identifier">__gnu_cxx</span>::<span class="hljs-identifier">__ops</span>::<span class="hljs-identifier">_Iter_less_iter</span>]</span>&#x27;:<br> error: no <span class="hljs-keyword">match</span> <span class="hljs-keyword">for</span> &#x27;operator-&#x27; (operand types are &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27; <span class="hljs-keyword">and</span> &#x27;std::_List_iterator&lt;<span class="hljs-built_in">int</span>&gt;&#x27;)<br> std::<span class="hljs-constructor">__lg(<span class="hljs-params">__last</span> - <span class="hljs-params">__first</span>)</span><span class="hljs-operator"> * </span><span class="hljs-number">2</span>,<br></code></pre></td></tr></table></figure><p>However, if concepts are used, the problem can be found and reportedat template instantiation:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>cannot call function &#x27;void std::sort(_RAIter, _RAIter) [with _RAIter = std::_List_iterator&lt;int&gt;]&#x27;<br>note:   concept &#x27;RandomAccessIterator()&#x27; was not satisfied<br></code></pre></td></tr></table></figure><p>It is straightforward to implement Type Classes with concepts. Forinstance, the Type Class below specifies the equal (==) operations forType Constructors that are its instances:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Eq</span> a <span class="hljs-keyword">where</span></span><br>  (==) :: a -&gt; a -&gt; <span class="hljs-type">Bool</span><br></code></pre></td></tr></table></figure><p>This can be implemented using the following C++ concept:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;concepts&gt;</span></span><br><br><br><span class="hljs-comment">// Declaration of the concept &quot;Eq&quot;,</span><br><span class="hljs-comment">// which is satisfied by any type &#x27;T&#x27; such that for values &#x27;t&#x27; of type &#x27;T&#x27;, the expression t == t compiles and its type satisfies the concept std::same_as&lt;bool&gt;</span><br><span class="hljs-comment">// This is represented using a &quot;requires expression&quot; which returns a bool</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">concept</span> Eq = <span class="hljs-built_in">requires</span> (T t) &#123;<br>    &#123; t == t &#125; -&gt; std::same_as&lt;<span class="hljs-type">bool</span>&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Afterwards, such a concept can be specified when template parametersare being introduced in a template definition, to indicate that thecorresponding template parameter must satisfy the concept.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;Eq T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>or (using a "requires clause"):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-keyword">requires</span> Eq&lt;T&gt; <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; t)</span> </span>&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="references">References</h1><ul><li>https://stackoverflow.com/questions/6948166/javas-interface-and-haskells-type-class-differences-and-similarities</li><li>https://cs.gmu.edu/~sean/stuff/java-objc.html</li><li>https://functionalcpp.wordpress.com/2013/08/16/type-classes/</li><li>https://stackoverflow.com/questions/32124627/how-are-c-concepts-different-to-haskell-typeclasses</li><li>https://wiki.haskell.org/OOP_vs_type_classes</li><li>https://doi.org/10.1145/1411318.1411324</li><li>https://www.foonathan.net/2021/07/concepts-structural-nominal/</li><li>https://www.reddit.com/r/haskell/comments/1e9f49/concepts_in_c_template_programming_and_type/</li></ul>]]></content>
    
    
    <categories>
      
      <category>Software Design</category>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 22</title>
    <link href="/2023/02/26/Paper-Reading-Types-and-Programming-Languages-Chapter-22/"/>
    <url>/2023/02/26/Paper-Reading-Types-and-Programming-Languages-Chapter-22/</url>
    
    <content type="html"><![CDATA[<h1 id="summary">Summary</h1><p>Chapter 22 of "Types and Programming Languages" explores the problemof Type Reconstruction (Type Inference) or deriving Types forUnannotated Arguments of Lambda Abstractions. It first introduces TypeVariables and Substitutions before formalizing the Type Reconstructionproblem. Then, it points out that Type Reconstruction can be implementedusing a Constraint Typing Algorithm or an Algorithm that calculates aSet of Constraints between Types involving Type Variables and recordsthem for later consideration, and proves the Completeness and Soundnessof Constraint Typing. Moreover, it introduces a Unification Algorithm tocalculate Principle Solutions (most general solutions) to ConstraintSets. Finally, the Chapter presents how the Typing Rules for LetExpressions can be modified to support Let Polymorphism - allowing anUntyped Function to generate different Constraints, thus be able to beReconstructed to Different Types when applied to Terms of differentTypes.</p><h1 id="critique">Critique</h1><p>Overall, Chapter 22 is clearly written, and several sectionsintrigued me (such as that Parametric Polymorphism and TypeReconstruction can result from two different interpretations ofDependent Types containing Type Variables). Moreover, this Chapterprovides essential inspiration for my Class Project, "Inferring FeasibleTypes for the Parameters and Return Values of Python Functions."However, the Chapter also used some Concepts without introducing them(such as the Unification Problem), and I had to look into them tounderstand parts of the Chapter.</p><h2 id="background-knowledge">Background Knowledge</h2><h3 id="completeness-and-soundness-of-a-theory">Completeness andSoundness of a Theory</h3><p>Using <span class="math inline">\(TRUE\)</span> and <spanclass="math inline">\(PROVABLE\)</span> to represent the Set of Factsthat are True and Provable under a Theory, respectively:</p><ul><li>Completeness: <span class="math inline">\(TRUE \subseteqPROVABLE\)</span> or every Fact that is True is also Provable (but theremay be some Facts that are Provable but are not True).</li><li>Soundness: <span class="math inline">\(PROVABLE \subseteqTRUE\)</span> or every Fact that is Provable is also True (but there maybe some True Facts that are not Provable).</li><li>Completeness and Soundness: <span class="math inline">\(TRUE =PROVABLE\)</span>.</li></ul><p>An ideal Theory should be both Complete and Sound.</p><h3 id="unification-problem">Unification Problem</h3><p>Given two Terms containing some Variables, find a Substitution (anAssignment of Terms to Variables) that makes the two Terms equal.</p><p>For example, given <span class="math inline">\(f(x_1, h(x_1), x_2) =f(g(x_3), x_4, x_3)\)</span>, a valid Substitution is <spanclass="math inline">\(\sigma = \{g(x_3): x_1, x_3: x_2, h(g(x_3)):x_4\}\)</span>.</p><h2 id="takeaways-from-this-paper">Takeaways From This Paper</h2><h3 id="parametric-polymorphism-and-type-reconstruction">ParametricPolymorphism and Type Reconstruction</h3><p>Given Dependent Types containing Type Variables (often the result ofthe Programmer leaving out Type Annotations in Source Code), we can makeone of the following assumptions.</p><ul><li>All Substitution Instances are well-typed. Thus, it is possible forType Variables to be held abstract during Type Checking and only beSubstituted for Concrete Types later on. This is the basis of ParametricPolymorphism.</li><li>Not all Substitution Instances are well-typed. In this case, we wantto look for <em>valid</em> Substitutions. This leads us to the problemof Type Reconstruction.</li></ul><h3id="deriving-constraint-sets-and-calculating-solutions-to-them">DerivingConstraint Sets and Calculating Solutions to Them</h3><p>To explore valid ways that Concrete Types can substitute TypeVariables, we can calculate a Set of Constraints between Types involvingType Variables. This is similar to an ordinary Type Checking Algorithmchecking Requirements in the Premise but records these Requirements asConstraints for later consideration instead of checking themimmediately.</p><p>After we have generated a Constraint Set, we can use a UnificationAlgorithm to calculate Solutions to it. The Unification Algorithmproposed in the Chapter removes a Constraint from the Constraint Set,processes it, and recursively processes the remaining ConstraintSet.</p><p>There is a most general way to instantiate the Type Variables. Thisis known as a Principle Solution, which contains Principle Types, or themost general types, for Type Variables.</p><h2 id="inspirations-from-this-paper">Inspirations From This Paper</h2><p>This Paper points out a viable way to implement my Class Project"Inferring Feasible Types for the Parameters and Return Values of PythonFunctions."</p><ul><li>Propose Typing Rules for Python Expressions.</li><li>Implement an Algorithm similar to an ordinary Type CheckingAlgorithm checking Requirements in the Premise, but which records theseRequirements as Constraints for later consideration instead of checkingthem immediately.</li></ul><h2 id="questions">Questions</h2><ul><li>What are the specific types of Constraints that are recorded whenderiving Constraint Sets? What do the derived Constraint Sets looklike?</li><li>Implementing the Unification Algorithm proposed to calculateSolutions to the Constraint Set seems non-trivial. Are there anyimplementations of it for more "real-world" (imperative, non-ML Family)Programming Languages? What adjustments have to be made to accomplishsuch an implementation?</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Displaying Information for Thrown and Caught Exceptions to the User in Python</title>
    <link href="/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/"/>
    <url>/2023/02/20/Displaying-Information-for-Thrown-and-Caught-Exceptions-to-the-User-in-Python/</url>
    
    <content type="html"><![CDATA[<h2 id="exception-semantics-in-python">Exception Semantics inPython</h2><p>Exception handling refers to how a program reacts when unexpectedevents, known as exceptions, occur throughout the program'sexecution.</p><p>Exception semantics varies considerably among programming languages.Based on this, we can divide programming languages into <ahref="https://doi.org/10.1007%2F11818502_16">two groups</a>:</p><ul><li>Programming languages that only employ exceptions to addressexceptional, unforeseen, or incorrect circumstances, such as C++, Java,and C#.</li><li>Programming languages that use exceptions as standard flow controlstructures, such as Ada, ML, OCaml, Python, and Ruby. For example, inPython, when an iterator has exhausted its output, and no more items canbe generated, an exception of type StopIteration is thrown.</li></ul><p>As a result, exceptions are pervasive in Python, and exceptioncatching and handling is a must for writing robust Python code.</p><h2id="displaying-information-for-thrown-and-caught-exceptions-to-the-user">DisplayingInformation for Thrown and Caught Exceptions to the User</h2><p>In many situations, it is beneficial to handle the exception and givea user a "loud and clear" message of what has happened as feedback. Thisis also particularly useful in investigating the root cause of theexception and whether it is the tip of the iceberg of a more significantlatent bug.</p><p>This can be simplified by the fact that exceptions thrown by built-infunctions, standard library functions, and functions in many well-testedthird-party libraries all contain rich semantics in:</p><ul><li>The class of the exception. Given an exception <code>e</code>, it isaccessible via <code>type(e)</code>, and <code>type(e).__name__</code>gives a <code>str</code> representation.</li><li>The message of the exception. Given an exception <code>e</code>,<code>str(e)</code> generates a representation of the argument(s) to theinstance.</li></ul><p>In command-line programs, we can write both of them to<code>stderr</code>, as shown in the example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> stderr<br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># Do some potentially erroneous operation</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment"># Write the class of the exception and the message of the exception to stderr</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e), file=stderr)<br></code></pre></td></tr></table></figure><p>In GUI programs, we can display them in a message box, with the classof the exception being the title of the message box and the message ofthe exception being the message of the message box, as shown in theexample below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PySide6.QtCore <span class="hljs-keyword">import</span> Slot<br><span class="hljs-keyword">from</span> PySide6.QtWidgets <span class="hljs-keyword">import</span> QDialog, QMessageBox<br><br><span class="hljs-keyword">from</span> .ui <span class="hljs-keyword">import</span> Ui_ConnectToServerDialog<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectToServerDialog</span>(<span class="hljs-title class_ inherited__">QDialog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, parent=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(parent)<br><br>        self.ui=Ui_ConnectToServerDialog()<br>        self.ui.setupUi(self)<br>        self.ui.connectPushButton.clicked.connect(self.accept)<br>        <br>        self.server=<span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @Slot()</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Do some operation that involves potentially erroneous user input</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-comment"># Display the exception thrown in a QMessageBox</span><br>            <span class="hljs-comment"># The type of the exception is the title of the QMessageBox</span><br>            <span class="hljs-comment"># The message of the exception is the message of the QMessageBox</span><br>            QMessageBox.about(self, <span class="hljs-built_in">type</span>(e).__name__, <span class="hljs-built_in">str</span>(e))<br>            <span class="hljs-keyword">return</span><br>        <br>        <span class="hljs-built_in">super</span>().accept()<br></code></pre></td></tr></table></figure><h2 id="references">References</h2><ul><li>https://en.wikipedia.org/wiki/Exception_handling#Exception_support_in_programming_languages</li><li>https://docs.python.org/3/library/exceptions.html#bltin-exceptions</li></ul>]]></content>
    
    
    <categories>
      
      <category>Software Design</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 15 and Chapter 16</title>
    <link href="/2023/02/10/Paper-Reading-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/"/>
    <url>/2023/02/10/Paper-Reading-Types-and-Programming-Languages-Chapter-15-and-Chapter-16/</url>
    
    <content type="html"><![CDATA[<h1 id="summary">Summary</h1><p>Chapter 15, "Subtyping," describes adding Subtyping with Functionsand Records into Simply Typed Lambda Calculus. It formalizes the SubtypeRelation as a collection of Inference Rules, verifies that verify thatthe Preservation and Progress Theorems of Simply Typed Lambda Calculusstill apply, examines Ascription (or Casting) in the context ofSubtyping, and proposes Subtyping Rules for Variants, Lists, References,and Arrays. Finally, it presents alternative Coercion Semantics forSubtyping. Chapter 16, "Metatheory of Subtyping," observes that theSubtyping Rules presented in the previous chapter are notsyntax-directed and have overlapping conclusions, which impedesimplementing a Typechecking Algorithm, and develops the AlgorithmicSubtype Relation and the Algorithmic Typing Relation to address theseproblems.</p><h1 id="critique">Critique</h1><h2 id="acquired-insights">Acquired Insights</h2><p>I will first summarize the insights that I gained while reading theseChapters.</p><p>An empty Bottom Type is useful, both as a way of expressing that aFunction is not intended to return and telling the Typechecker that theTerm can be associated with any Type.</p><p>Implementing Ascription (Casting) in Subtyping is non-trivial,especially for Downcasting. As blindly following Type Assertions maylead to potentially serious consequences, the Compiler would need toinsert a Runtime Type Check, essentially adding the Machinery forTypechecking to the Runtime System. This might incur a significantperformance overhead.</p><p>Different from an Inheritance Based Class Hierarchy, which is aphysical relationship between Types, Subtyping generally is more of a<em>logical relationship</em> between Types. For example, in thealternative Coercion Semantics for Subtyping, we can consider that<code>int</code> and <code>float</code>, two Types that do not inheritfrom one another, have a Subtyping Relation, as they can be converted toone another. In this case, the Subtyping Relation is compiled toCoercions at runtime (instructions physically converting an<code>int</code> to a <code>float</code>, or vice versa), which are muchmore efficient than virtual function calls frequently seen in anInheritance Based Class Hierarchy.</p><h2 id="background-knowledge">Background Knowledge</h2><p>There is no doubt that the Chapters are written in great detail.However, I find some of the content, especially the terminology, alittle difficult to understand, and I have looked into backgroundknowledge concerning the topic. Below summarizes what I have read.</p><h3 id="polymorphism">Polymorphism</h3><p>Polymorphism describes that a single Interface can work with Terms ofDifferent Types in Programming Languages. There are different kinds ofPolymorphism in the context of Programming Languages, including:</p><h4 id="parametric-polymorphism">Parametric Polymorphism</h4><p>Also known as "Generic Programming". Using Abstract Symbols that cansubstitute for any Type instead of specifying Concrete Types inInterfaces. C++'s Template Metaprogramming comes close to ParametricPolymorphism (except for Template Specializations).</p><h4 id="ad-hoc-polymorphism">Ad Hoc Polymorphism</h4><p>Defining a Common Interface for a Set of Individually SpecifiedTypes. Includes Function Overloading, Operator Overloading, and C++'sTemplate Metaprogramming with Template Specializations.</p><h4 id="subtyping">Subtyping</h4><p>It is a form of Polymorphism in which the Terms of a Subtype<code>T</code>, which is related to another Type known as the Supertype<code>T'</code> in some way, can be safely used in any Context where theTerms of <code>T'</code> are used.</p><p>The Concept of Subtyping has gained visibility with the advent ofObject Oriented Programming Languages, where it is frequently the casethat an Inheritance Based Class Hierarchy forms the basis of Subtyping,and such Safe Substitution is known as the Liskov SubstitutionPrinciple.</p><p>However, stepping out of this specific and widely known context,there are several different Schemes of Subtyping. They can be broadlyclassified along two dimensions: Nominal Subtyping vs. StructuralSubtyping and Inclusive Implementations vs. CoerciveImplementations.</p><p>Nominal Subtyping requires the Subtyping Relation to be explicitlydeclared among the two Types. This is the case with the Subtyping basedon an Inheritance Based Class Hierarchy frequently encountered in ObjectOriented Programming Languages. In contrast, in Structural Subtyping, aType <code>T</code> is <strong>implicitly</strong> the Subtype ofanother Type <code>T'</code> if Terms of <code>T</code> has all theProperties of Terms of <code>T'</code> and can handle all the MessagesTerms of <code>T'</code> can handle. This is closely related to RowPolymorphism or the so-called Duck Typing in Dynamically TypedProgramming Languages.</p><p>On another dimension, Implementations of Subtyping can be dividedinto Inclusive Implementations and Coercive Implementations. InInclusive Implementations, any Term of a Subtype, left unchanged, is<strong>automatically</strong> a Term of a Supertype. This is often thecase with the Subtyping based on an Inheritance Based Class Hierarchyfrequently encountered in Object Oriented Programming Languages. A Termcan have multiple Types in this situation. In contrast, CoerciveImplementations are defined by <strong>Type ConversionFunctions</strong> from Subtype to Supertype and allow a Term of aSubtype to be <strong>converted</strong> to a Term of a Supertype, suchas the case for <code>int</code>'s, <code>float</code>'s, and<code>str</code>'s. It is also worth noticing that applying the TypeCoercion Function from <code>A</code> to <code>B</code> and then from<code>B</code> to <code>C</code> might have a different result fromdirectly applying the Type Coercion Function from <code>A</code> to<code>C</code>. For example, <code>str(float(2))</code> returns a valuedifferent from <code>str(2)</code>.</p><p>Based on the concept of Subtyping, the concept of Variance referenceto how the Subtyping Relations between more complex Types relates to theSubtyping Relations between the simpler Types they include. For example,given that <code>Cat</code> is a Subtype of <code>Animal</code>, shoulda List of <code>Cat</code>'s be a Subtype of a List of<code>Animal</code>'s? What about a Function that takes a Term of Type<code>Cat</code> as an Arugument and a Function that takes a Term ofType <code>Animal</code> as an Arugument?</p><p>Different Programming Languages have different implementations, butmost Programming Languages respect the following patterns.</p><ul><li>If the Complex Types are <strong>Read Only and/or capable ofreturning Terms of the Simple Types</strong>, they should have the<strong>same</strong> Subtyping Relations as the Simple Types. This isknown as <strong>Covariance</strong>. For example,<ul><li>A read-only List of <code>Cat</code>'s can be used whenever aread-only List of <code>Animal</code>'s is required, as each Term readfrom the read-only List of <code>Cat</code>'s is of Type<code>Cat</code>, which is a Subtype of <code>Animal</code>. In otherwords, <code>const List&lt;Cat&gt;</code> <em>is</em> a Subtype of<code>const List&lt;Animal&gt;</code>.</li><li>It is not safe to use a <code>const List&lt;Animal&gt;</code> wherea <code>const List&lt;Cat&gt;</code> is required, as a Term read from a<code>const List&lt;Animal&gt;</code> may not be of Type<code>Cat</code>. In other words, <code>const List&lt;Animal&gt;</code><em>is not</em> a Subtype of <code>const List&lt;Cat&gt;</code>.</li></ul></li><li>If the Complex Types are <strong>Write Only and/or capable ofaccepting Terms of the Simple Types as Parameters</strong>, they shouldhave the <strong>opposite</strong> Subtyping Relations as the SimpleTypes. This is known as <strong>Contravariance</strong>. For example,<ul><li>A Function that takes a Term of Type <code>Animal</code> as aParameter may be used where a Function that takes a Term of Type<code>Cat</code> as a Parameter is used, as each Term of Type<code>Cat</code> can also be passed as a Parameter of Type<code>Animal</code>. In other words, <code>Animal -&gt; T</code><em>is</em> a Subtype of <code>Cat -&gt; T</code>.</li><li>It is not safe to use a <code>Cat -&gt; T</code> where an<code>Animal -&gt; T</code> is required, as a Term of Type<code>Animal</code> may not be passed as a Parameter of Type<code>Cat</code>. In other words, <code>Cat -&gt; T</code> <em>isnot</em> a Subtype of <code>Animal -&gt; T</code>.</li></ul></li><li>If the Complex Types are <strong>Read/Write</strong>, they shouldhave <strong>no</strong> Subtying Relations. This is known as<strong>Invariance</strong>. For example,<ul><li>A Term written into a <code>List&lt;Animal&gt;</code> need not be ofType <code>Cat</code>, but a Term written into a (non-constant)<code>List&lt;Cat&gt;</code> <em>must</em> be of Type <code>Cat</code>.Thus, it is not safe to use a <code>List&lt;Cat&gt;</code> where a<code>List&lt;Animal&gt;</code> is required. In other words,<code>List&lt;Cat&gt;</code> <em>is not</em> a Subtype of<code>List&lt;Animal&gt;</code>.</li><li>A Term read from a (non-constant) <code>List&lt;Animal&gt;</code>may not be of Type <code>Cat</code>. Thus it is not safe to use a<code>List&lt;Animal&gt;</code> where a <code>List&lt;Cat&gt;</code>isrequired. In other words, <code>List&lt;Animal&gt;</code> <em>isnot</em> a Subtype of <code>List&lt;Cat&gt;</code>.</li></ul></li></ul><h3 id="references">References</h3><ul><li>https://en.wikipedia.org/wiki/Polymorphism_(computer_science)</li><li>https://stackoverflow.com/questions/36948205/why-is-c-said-not-to-support-parametric-polymorphism</li><li>https://en.wikipedia.org/wiki/Subtyping</li><li>https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)</li></ul><p>Having acquired such Background Knowledge, I will also summarize theinsights that I gained while reading these Chapters.</p><h2 id="acquired-insights-1">Acquired Insights</h2><p>An empty Bottom Type is useful, both as a way of expressing that aFunction is not intended to return and telling the Typechecker that theTerm can be associated with any Type.</p><p>Implementing Ascription (Casting) in Subtyping is non-trivial,especially for Downcasting. As blindly following Type Assertions maylead to potentially serious consequences, the Compiler would need toinsert a Runtime Type Check, essentially adding the Machinery forTypechecking to the Runtime System. This might incur a significantperformance overhead.</p><p>Different from an Inheritance Based Class Hierarchy, which is aphysical relationship between Types, Subtyping generally is more of a<em>logical relationship</em> between Types. For example, in thealternative Coercion Semantics for Subtyping, we can consider that<code>int</code> and <code>float</code>, two Types that do not inheritfrom one another, have a Subtyping Relation, as they can be converted toone another. In this case, the Subtyping Relation is compiled toCoercions at runtime (instructions physically converting an<code>int</code> to a <code>float</code>, or vice versa), which are muchmore efficient than virtual function calls frequently seen in anInheritance Based Class Hierarchy.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 13 and Chapter 14</title>
    <link href="/2023/02/05/Paper-Reading-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/"/>
    <url>/2023/02/05/Paper-Reading-Types-and-Programming-Languages-Chapter-13-and-Chapter-14/</url>
    
    <content type="html"><![CDATA[<h1 id="summary">Summary</h1><p>Chapters 13 and 14 of "Types and Programming Languages" discussadding Impure Features, also known as Computational Effects, into SimplyTyped Lambda Calculus. Specifically, Chapter 13 discusses addingReferences to Mutable Cells that can be Allocated, Dereferenced, andAssigned and formalizes their Operational Behavior. Chapter 14 graduallyadds Raising and Handling Exceptions, starting from a Term<code>error</code> of any Type that completely aborts Evaluation whenapplied as a Function or passed as an Argument to a Function, beforesupporting Exception Handling, as well as Raising a Value (potentiallycontaining information about what unusual thing happened) as anException.</p><h1 id="critique">Critique</h1><p>Overall, I believe these two Chapters are written very well, as theyprogressively add realistic features to Simply Typed Lambda Calculus. Iwill summarize takeaways from this paper before presenting somequestions and comments.</p><h2 id="takeaways-from-this-paper">Takeaways From This Paper</h2><h3 id="references-to-mutable-cells">References to Mutable Cells</h3><p>The Formalization of the Operational Behavior of References toMutable Cells encompasses Allocations (providing an initial value to aMutable Cell), Dereferences (reading the current value of the referencedCell), and Assignments (changing the value stored in the referencedCell), but not Deallocations. Explicit Deallocations lead to theDangling Reference Problem, which undermines Type Safety. Instead,References to Mutable Cells that are no longer needed should be GarbageCollected.</p><p>An interpretation of how Aliasing makes Program Analysis tricky isthat Aliasing essentially sets up "Implicit Communication Channels inthe form of Shared State" between different parts of a Program.</p><p>To formalize the Operational Behavior of References to Mutable Cells,we can consider a Reference <span class="math inline">\(l \inL\)</span>, where <span class="math inline">\(L\)</span> is the set ofLocations of the Program's Store (a.k.a. Heap Memory) <spanclass="math inline">\(\mu\)</span>.</p><p>As the result of Evaluating an Expression depends on the currentcontents of the Store and may cause Side Effects for the Store,Evaluation Rules should, in addition to Terms and Types, take the Storeas an Argument and return a new Store as part of the result ofEvaluating an Expression.</p><p>Furthermore, in a naive implementation of Typing Rules for Referencesto Mutable Cells, the Type of the Reference depends on the Type of theMutable Cell, e.g., <span class="math inline">\(\frac{\Gamma \vdash\mu(l): T}{\Gamma \vdash l: \text{Ref} \: T}\)</span>. However, this isinefficient where there are multiple levels of Indirection and isproblematic where there are Cyclic References. To solve this problem,the Chapter proposes extending Typing Rules with a Store Typing <spanclass="math inline">\(\Sigma\)</span>, which maps every Location <spanclass="math inline">\(l \in L\)</span> to a fixed, definite Type. Inthis case, the Typing Rule is written as <spanclass="math inline">\(\frac{\Gamma | \Sigma \vdash \Sigma(l): T}{\Gamma| \Sigma \vdash l: \text{Ref} \: T}\)</span>.</p><h3 id="raising-and-handling-exceptions">Raising and HandlingExceptions</h3><p>The first (and most straightforward) Approach to Raising and HandlingExceptions, a Term <code>error</code> that completely aborts Evaluationwhen applied as a Function or passed as an Argument to a Function,effectively simulates Unwinding the Call Stack when it propagates<code>error</code> to the top level.</p><p>The final approach that supports both Exception Handling and Raisinga Value as an Exception considers an Exception to be a Value <spanclass="math inline">\(t_{exp}\)</span> of Type <spanclass="math inline">\(T_{exp}\)</span> (instead of a Term<code>error</code>). It proposes a Term Constructor<code>raise t_&#123;exp&#125;</code> that describes Raising a Value as anException, and models Exception Handling with<code>try t_1 with t_2: T_1</code>, in which <spanclass="math inline">\(t_1: T_1\)</span> and <spanclass="math inline">\(t_2: T_{exp} \rightarrow T_1\)</span> (i.e., <spanclass="math inline">\(t_2\)</span> is a function, called when anException is Raised, taking a Raised Exception as Input and Returning aValue of the same Type as <span class="math inline">\(t_1\)</span> asOutput).</p><h2 id="questions-and-comments">Questions and Comments</h2><p>After reading these two Chapters, the power of Functions as aUniversal Abstraction has left a deep impression on me. For example:</p><ul><li>Arrays containing Terms of Type <spanclass="math inline">\(T\)</span> can be modeled as References toFunctions of type <span class="math inline">\(Nat \rightarrowT\)</span>. The Referenced Function looks up the Element given anIndex.</li><li>Exception Handling is modeled with <code>try t_1 with t_2</code>, inwhich <span class="math inline">\(t_2\)</span> is a function called whenan Exception is Raised, taking a Raised Exception as Input and Returninga Value of the same Type as <span class="math inline">\(t_1\)</span> asOutput).</li></ul><p>This describes complex Side Effects in a realistic ProgrammingLanguage in a Side Effect Free manner that is clean and easy to reasonabout while not sacrificing Expressiveness. Are there any other complexSide Effects that can be modeled like this using Functions?</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Bi-directional type checking</title>
    <link href="/2023/01/30/Paper-Reading-Bi-directional-type-checking/"/>
    <url>/2023/01/30/Paper-Reading-Bi-directional-type-checking/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://williamjbowman.com/teaching/2022/w2/cpsc539b/">Topics inProgramming Languages: Type Systems</a>. The original paper can be found<ahref="http://www.davidchristiansen.dk/tutorials/bidirectional.pdf">here</a>.</p><h1 id="summary">Summary</h1><p>The paper first explains that except Syntax Directed Systems, TypingRules cannot be directly translated into Algorithms for Type Checkingand Type Inference. It presents a motivating example of this using aSimply Typed Lambda Calculus having Bool and Function as Types and BoolConstants, Variables, Function Abstractions, Function Applications, andConditional Expressions as Terms, in which the Typing Rule for FunctionAbstractions cannot be directly translated into a Function for TypeInference.</p><p>It then presents Bidirectional Typing as a remedy to this problem. Itexplains what Bidirectional Typing is, discusses its advantage, and addsBidirectional Typing into the previously presented Simply Typed LambdaCalculus, presenting how Bidirectional Typing works during theprocess.</p><p>Finally, it discusses the limitations of Bidirectional Typing andpresents academic literature for further reading.</p><h1 id="critique">Critique</h1><p>Overall, I believe this paper is written very well, as I can graspmost of it after reading it. I will summarize my takeaways from thispaper before presenting some questions and comments.</p><h2 id="my-takeaways-from-this-paper">My Takeaways From This Paper</h2><h3 id="what-bidirectional-typing-is">What Bidirectional Typing Is</h3><p>Bidirectional Typing splits each Typing Rule <spanclass="math inline">\(\Gamma \vdash t: T\)</span> into:</p><ul><li>An Inference Rule <span class="math inline">\(\Gamma \vdash t\Rightarrow T\)</span>, which <em>infers</em> <spanclass="math inline">\(t\)</span>'s type to be <spanclass="math inline">\(T\)</span> in Context <spanclass="math inline">\(\Gamma\)</span>.</li><li>A Type Checking Rule <span class="math inline">\(\Gamma \vdash t\Leftarrow T\)</span>, which <em>checks</em> <spanclass="math inline">\(t\)</span>'s type to be <spanclass="math inline">\(T\)</span> in Context <spanclass="math inline">\(\Gamma\)</span>.</li></ul><p>The Inference Rules and Type Checking Rules would work together andcall each other.</p><h3 id="advantages-of-bidirectional-typing">Advantages of BidirectionalTyping</h3><ul><li>Makes general Typing Rules more Syntax Directed, thus, simplifyingimplementing Algorithms for Type Checking and Type Inference.</li><li>Requires relatively few additional Type Annotations.</li><li>Produces good error messages that report where the erroroccurs.</li></ul><h3 id="limitations-of-bidirectional-typing">Limitations ofBidirectional Typing</h3><ul><li>Variables in a Derivation can no longer be replaced by theDerivation for a Term of the same Type. This is because BidirectionalTyping uses Inference Mode to check Variables but uses Checking Mode tocheck many other Terms.</li><li>In some situations, explicit Type Annotations may need to be writtenwithin complex Terms, such as a direct Application of a FunctionAbstraction, like<code>(λ b . if b then false else true) true: Bool</code></li></ul><h2 id="questions-and-comments">Questions and Comments</h2><ul><li>Page 8 mentions, "remember that the derivation, like thebidirectional typing rules, should be read bottom-to-top andleft-to-right." However, Inference Rules have the form of <spanclass="math inline">\(\frac{Premise}{Conclusion}\)</span>. So, whyshould the derivation be read from Conclusion to Premise?</li><li>What are the meanings of the small-step rule <spanclass="math inline">\(\frac{}{t : T \rightarrow t}\)</span> and thelarge-step rule <span class="math inline">\(\frac{t \Downarrow t&#39;}{t: T \Downarrow t&#39;}\)</span> on Page 8?</li><li>I believe explicit Type Annotations should be enforced for theParameters within Function Abstractions, such as<code>(λ b: Bool . if b then false else true)</code> instead of<code>(λ b . if b then false else true)</code>.<ul><li>This aligns with real-world programming languages (C++, Java, Rust,Swift, Haskell, etc.)</li><li>This increases readability.</li><li>This simplifies both the Typing Rules and the Inference Rules andType Checking Rules of Bidirectional Typing.</li></ul></li></ul><h1 id="feedback-from-the-class-discussion">Feedback from the ClassDiscussion</h1><p>Small Step Semantics, represented using <spanclass="math inline">\(\rightarrow\)</span>'s, depict <strong>one step inEvaluation</strong>. For example, if <spanclass="math inline">\(e\)</span> is <spanclass="math inline">\(true\)</span> itself, <spanclass="math inline">\(\text{if}\: e \: \text{then} \: e_1 \: \text{else}\: e_2\)</span> can be Evaluated <strong>in one step</strong> to <spanclass="math inline">\(e_1\)</span>. This can be represented using <spanclass="math inline">\(\frac{e \rightarrow true}{\text{if}\: e \:\text{then} \: e_1 \: \text{else} \: e_2 \rightarrow e_1}\)</span></p><p>Big Step Semantics, represented using <spanclass="math inline">\(\Downarrow\)</span>'s, depict <strong>Reducing aSubexpression to a Value through several Small Steps</strong>. Forexample, if <span class="math inline">\(e\)</span> is a Subexpressionthat can be Reduced to <span class="math inline">\(true\)</span> afterseveral Small Steps, <span class="math inline">\(\text{if}\: e \:\text{then} \: e_1 \: \text{else} \: e_2\)</span> can be Reduced to<span class="math inline">\(e_1\)</span> <strong>after several SmallSteps</strong>. This can be represented using <spanclass="math inline">\(\frac{e \Downarrow true}{\text{if}\: e \:\text{then} \: e_1 \: \text{else} \: e_2 \Downarrow e_1}\)</span>.</p><p>Syntax Directed means a one-to-one correspondence between the Type ofthe Term and the Syntax (Derivation of the Grammar Rules) of theTerm.</p><p>There is no precise definition for Bidirectional Typing. Instead,Bidirectional Typing points a direction toward implementing a TypeInference/Type Checking Algorithm.</p><p>In Bidirectional Typing, we prefer to start from Inference Modebecause if we can Infer the Type of a Term, we can Check the Type of theTerm, while Checking falls back on Inference.</p><p>Why is there only a Checking Rule and no Inference Rule for<code>if t then t else t</code>?</p><ul><li>This gives better error messages.<ul><li>Should the Terms in the <code>then</code> branch and the<code>else</code> branch have different types, it is possible to give anerror message directly stating this information.</li><li>If an Inference Rule had been proposed instead, it would blame onebranch for having a wrong type, which may be confusing and go againstprogrammer intent.</li></ul></li></ul><p>We can read Typing Rules either from top to bottom or from bottom totop, with slightly different interpretations.</p><ul><li>Reading from top to bottom describes how to use the information forType Checking.</li><li>Reading from bottom to top describes how a Type Inference Algorithmworks, e.g., what needs to be Checked to Infer the Type of a Term.</li></ul><p>From a historical perspective, there are two Design Philosophies forType Systems.</p><ul><li>The first is to augment a Programming Language with moreinformation, such as C which uses it to determine how much space avariable would take up in memory.</li><li>The second is to express programmer intent.</li></ul><p>Type Annotations (Ascriptions) for Parameters are required forFunctions that are not immediately used, such as Top Level Functions.However, it is helpful to omit Type Annotations (Ascriptions) forParameters for immediately used Lambda Terms within Higher OrderFunctions.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Types and Programming Languages&quot; Chapter 9 and Chapter 11</title>
    <link href="/2023/01/25/Paper-Reading-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/"/>
    <url>/2023/01/25/Paper-Reading-Types-and-Programming-Languages-Chapter-9-and-Chapter-11/</url>
    
    <content type="html"><![CDATA[<h1 id="summary">Summary</h1><p>Chapter 9 of "Types and Programming Languages" presents the simplytyped lambda calculus, which constructs a type system for pure lambdacalculus, explaining theoretical aspects such as the typing relation andthe Curry-Howard Correspondence along the way.</p><p>Chapter 11 introduces simple extensions to the simply typed lambdacalculus presented in Chapter 9, such as base types, derived forms, typeascriptions, let bindings, and some compound data structures (pairs,tuples, records, sums, variants, and lists), making it better resemble areal-world programming language.</p><h1 id="critique">Critique</h1><h2 id="foreword">Foreword</h2><p>I have found the textbook hard to follow in many places. Thus, I havefollowed the textbook and looked into many online resources to grasp thecontent. Below summarizes my understanding after studying thematerial.</p><h2 id="basic-concepts-in-type-theory">Basic Concepts in TypeTheory</h2><h3 id="terms-and-types">Terms and Types</h3><p>In Type Theory, every Term has a Type, often written together as<code>&lt;Term&gt;: &lt;Type&gt;</code>. Types include Natural Numbers(<code>nat</code>) and Boolean Logic Values (<code>bool</code>). Forexample (assuming <code>x: nat</code> and <code>y: nat</code>):</p><ul><li><code>0: nat</code></li><li><code>x: nat</code></li><li><code>1 + 1: nat</code></li><li><code>x + y: nat</code></li><li><code>true: bool</code></li><li><code>x + y: nat</code></li></ul><h3 id="functions">Functions</h3><p>Functions are also Terms with Types, represented as Lambda Terms.</p><p>A Lambda Term looks like<code>(λ &lt;First Parameter Name&gt;: &lt;First Parameter Type&gt; &lt;Second Parameter Name&gt;: &lt;Second Parameter Type&gt; ... . &lt;Term to Return&gt;)</code>.</p><p>It has type<code>&lt;First Parameter Type&gt; → &lt;Second Parameter Type&gt; → ... → &lt;Type of Term to Return&gt;</code>.This indicates that the Lambda Term is a function that takes Parametersof <code>&lt;First Parameter Type&gt;</code>,<code>&lt;Second Parameter Type&gt;</code>, etc., and returns a Term of<code>&lt;Type of Term to Return&gt;</code>.</p><p>Examples of Lambda Terms:</p><ul><li><code>(λ x: nat . (x + x)): nat → nat</code>: a Function which takesin a Parameter <code>x</code> of Type <code>nat</code> and returns thedoubled Parameter.</li><li><code>(λ x: nat y: nat . (x + y)): nat → nat → nat</code>: aFunction which takes in two Parameters <code>x</code>, <code>y</code>all of Type <code>nat</code> and returns their sum.</li></ul><p>A Lambda Term is often called an Anonymous Function because it has noName. We can use the notion to give a Name to a Lambda Term:</p><ul><li><code>add: nat → nat → nat ::= (λ x: nat y: nat . (x + y))</code></li></ul><h3 id="function-applications">Function Applications</h3><p>In Type Theory, a Function Call is called a Function Application,which "takes a Term of a Type and results in a Term of another Type."Function Application is written as<code>&lt;Function&gt; &lt;Argument&gt; &lt;Argument&gt; ...</code>(akin to Function Calls in Haskell and Commands in Unix Shell) insteadof the conventional<code>&lt;Function&gt;(&lt;Argument&gt;, &lt;Argument&gt;, ...)</code>in Programming Languages.</p><p>If we define a Function <code>add</code> that takes two<code>nat</code>'s and returns a <code>nat</code>, the following arevalid Terms:</p><ul><li><code>add 0 0: nat</code></li><li><code>add 2 3: nat</code></li><li><code>add 1 (add 1 (add 1 0)): nat</code></li></ul><h3 id="dependent-typing">Dependent Typing</h3><p>Sometimes, the Type returned by a Function depends on the Value ofits Argument. This is known as Dependent Typing.</p><p>For example, a function <code>if</code> takes three arguments, with<code>if true b c</code> returning <code>b</code>, and<code>if false b c</code> returning <code>c</code>. If <code>b</code>and <code>c</code> have different Types, then the type of<code>if</code> depends on the value of <code>a</code>.</p><p>Dependent Typing is a reasonably complicated subject that is anactive domain of research.</p><h3 id="zero-type-unit-type-and-universal-type">Zero Type, Unit Type,and Universal Type</h3><h4 id="zero-type">Zero Type</h4><p>In some programming languages, there is a <strong>Zero Type</strong>or <strong>Bottom Type</strong> - a Type whose Set of Terms is the emptyset and a Subtype of all other Types.</p><p>In these programming languages, denoting the Zero Type as aFunction's Return Type frequently indicates that <strong>the Functionnever returns (never completes computation) - instead, it may loopforever, throw an exception, or terminate the process</strong>.</p><p>As a real-world example, in Rust, the Zero Type is called the NeverType and is denoted by !. It is the kind of calculation that neverreturns any result. For example, the exit function<code>fn exit(code: i32) -&gt; !</code> terminates the process withoutreturning.</p><h4 id="unit-type">Unit Type</h4><p>In some programming languages, the <strong>Unit Type</strong> is aType whose Set of Terms is a singleton set, i.e., the type allows onlyone value. <strong>It is typically used to describe the Argument Type ofa Function that doesn't need arguments or the Return Type of a Functionwhose only goal is to have a side effect.</strong> For example:</p><ul><li>In Haskell, Rust, and Elm, the Unit Type is the Type of the 0-tuple<code>()</code>.</li><li>In Python, the Unit Type is <code>NoneType</code>, which only has asingle instance <code>None</code>.</li><li>In JavaScript, both <code>Null</code> (which only has a singleinstance <code>null</code>) and <code>Undefined</code> (which only has asingle instance <code>undefined</code>) are Unit Types.</li></ul><p>In languages such as C, C++, Java, and C#, <code>void</code>, whichdesignates that a Function accepts no Arguments or does not returnanything, plays a similar role to the Unit Type. However, there are alsokey differences:</p><ul><li>There are no Terms (Instances) of <code>void</code>.</li><li>A proper Unit Type may always be the Type of an Argument to aFunction, but <code>void</code> cannot be the Type of an Argument.</li></ul><h4 id="universal-type">Universal Type</h4><p>Most object-oriented programming languages include a universal baseclass. In Type Theory, this is known as a <strong>UniversalType</strong> or a <strong>Top Type</strong>. Its Set of Termsencompasses any valid Term in the programming language, and all othertypes in the programming language are subtypes. For example:</p><ul><li><code>Object</code> in Smalltalk and JavaScript</li><li><code>java.lang.Object</code> in Java</li><li><code>System.Object</code> in C#, Visual Basic .NET, and other .NETFramework languages</li><li><code>object</code> in Python (can also be type-annotated as<code>typing.Any</code>)</li><li><code>Any</code> in Scala and Julia</li></ul><p>Some object-oriented programming languages, such as C++, Objective-C,and Swift, do not have a universal base class. In these languages, someconstructs function similarly to the Universal Type.</p><ul><li>In C++, <code>void *</code> can accept any non-function pointer(even though <code>void</code> itself is more akin to the UnitType).</li><li>In Objective-C, <code>id</code> can accept pointers to anyobject.</li><li>In Swift, the protocol <code>Any</code> can accept any type.</li></ul><p>Languages that are not object-oriented usually do not have aUniversal Type.</p><h3 id="typing-context">Typing Context</h3><p>A Typing Context (or Typing Environment) <spanclass="math inline">\(\Gamma\)</span> is a Mapping from Terms to Types(or a collection of Term - Type Pairs). The judgement <spanclass="math inline">\(\Gamma \vdash e: \tau\)</span> is read as "<spanclass="math inline">\(e\)</span> has type <spanclass="math inline">\(\tau\)</span> in Context <spanclass="math inline">\(\Gamma\)</span>".</p><p>In Statically Typed Programming Languages, these Typing Contexts areused and maintained by Typing Rules to Type Check a given Program orExpression.</p><h3 id="type-inhabitation">Type Inhabitation</h3><p>Given a Typing Environment, a Type is <strong>inhabitated</strong> ifan existing Term of the Type is available or a Term of the Type can bereadily obtained (i.e., via Function Application).</p><h3 id="derived-forms">Derived Forms</h3><p>In Type Theory, Syntactic Sugar is known as <strong>DerivedForms</strong>, while replacing a Derived Form with its lower-leveldefinition (usually during compile time) is known as<strong>desugaring</strong>. For example:</p><ul><li>In C, <code>a[i]</code> and <code>*(a + 1)</code>,<code>a-&gt;x</code> and <code>(*a).x</code>.</li><li>In the tidyverse collection of R packages,<code>x %&gt;% f(y)</code> is equivalent to <code>f(x, y)</code>.</li></ul><p>A programming language is typically divided into a compact corelanguage, <strong>a rich set of syntax defined in terms of that core(Derived Forms)</strong>, and a comprehensive standard library. Thismakes the language maintainable for engineers while making it convenientfor users.</p><h3 id="type-ascription">Type Ascription</h3><p><strong>Type Ascription</strong> is an assertion within source codethat a term has a particular type. This can lead to cleaner,easier-to-understand code documentation.</p><h2 id="important-derived-forms">Important Derived Forms</h2><ul><li>Tuple</li><li>Record (Struct, Rows in a Database) - a collection of Fields,possibly of different Types</li><li>Variant (Datatype, Tagged Union, Discriminated Union, DisjointUnion)<ul><li>A data structure to hold a Term that could take on "severaldifferent, but fixed Types."</li><li>Contains a Value field and a Tag field</li><li>Widely used for defining recursive data structures (e.g. Treescontaining Leaves and Internal Nodes)</li></ul></li><li>List</li></ul><h2 id="curry-howard-correspondence">Curry-Howard Correspondence</h2><p>The Curry-Howard Correspondence, independently discovered bylogicians Haskell Curry in 1958 and William Howard in 1969, states that"proofs in a given subset of mathematics are exactly programs from aparticular programming language". Specifically,</p><ul><li>Types correspond to logical formulas.<ul><li>A Term having a Type can be understood as evidence that the Type isinhabited. For example, <code>3110: int</code> is evidence that<code>int</code> is inhabited.</li><li>Logical Atoms <span class="math inline">\(a\)</span>, <spanclass="math inline">\(b\)</span> correspond to whether Types<code>A</code>, <code>B</code> are inhabited.<ul><li><code>true</code> corresponds to a Type that is always inhabited.The simplest of them all is the Unit Type.</li><li><code>false</code> corresponds to a Type that is never inhabited -the Zero Type.</li></ul></li><li>Conjunction <span class="math inline">\(a \land b\)</span>corresponds to a Type inhabited when both Types <code>A</code> and<code>B</code> are inhabited - <code>Tuple[A, B]</code>.</li><li>Disjunction <span class="math inline">\(a \lor b\)</span> with theadded condition that <strong>you know which one of <spanclass="math inline">\(a\)</span>, <span class="math inline">\(b\)</span>is true when <span class="math inline">\(a \lor b\)</span> istrue</strong> corresponds to a Type that is inhabited when one of<code>A</code>, <code>B</code> is inhabited, and you know which one isinhabited - <code>Variant[A, B]</code>.</li><li>Implication <span class="math inline">\(a \rightarrow b\)</span>corresponds to a Type that, when inhibited, ensures <code>B</code> mustbe inhabited when <code>A</code> is inhabited - a Function Type,<code>A -&gt; B</code>.</li></ul></li><li>Programs correspond to proofs.</li><li>Analyzing the types of expressions evaluated during the execution ofa program corresponds to simplifying a proof.</li></ul><h2 id="references">References</h2><ul><li>https://en.wikipedia.org/wiki/Type_theory</li><li>https://en.wikipedia.org/wiki/Bottom_type</li><li>https://en.wikipedia.org/wiki/Typing_environment</li><li>https://softwareengineering.stackexchange.com/questions/277197/is-there-a-reason-to-have-a-bottom-type-in-a-programming-language</li><li>https://stackoverflow.com/questions/32505911/what-is-the-role-of-bottom-%E2%8A%A5-in-haskell-function-definitions</li><li>https://doc.rust-lang.org/std/primitive.never.html</li><li>https://en.wikipedia.org/wiki/Unit_type</li><li>https://en.wikipedia.org/wiki/Top_type</li><li>https://cs3110.github.io/textbook/chapters/adv/curry-howard.html#types-correspond-to-propositions</li><li>https://wiki.haskell.org/Curry-Howard-Lambek_correspondence</li><li>https://www.pédrot.fr/slides/inria-junior-02-15.pdf</li><li>https://math.stackexchange.com/questions/2686280/what-do-logicians-mean-by-type</li><li>https://homepages.inf.ed.ac.uk/stg/NOTES/node35.html</li><li>https://cs.wellesley.edu/~cs251/s02/scheme-intro.pdf</li><li>https://cs.brown.edu/~sk/Publications/Papers/Published/pk-resuarging-types/paper.pdf</li><li>https://en.wikipedia.org/wiki/Syntactic_sugar</li><li>https://www.wikidata.org/wiki/Q73072308</li><li>https://stackoverflow.com/questions/36389974/what-is-type-ascription</li><li>https://github.com/rust-lang/rfcs/blob/master/text/0803-type-ascription.md</li><li>https://medium.com/<span class="citation"data-cites="andrew_lucker/things-you-cant-do-in-rust-type-ascription-5253951c7427">@andrew_lucker/things-you-cant-do-in-rust-type-ascription-5253951c7427</span></li><li>https://docs.scala-lang.org/style/types.html</li><li>https://futhark-lang.org/examples/type-ascriptions.html</li><li>https://en.wikipedia.org/wiki/Record_(computer_science)</li><li>https://en.m.wikipedia.org/wiki/List_(abstract_data_type)</li></ul><h1 id="feedback-from-the-class-discussion">Feedback from the ClassDiscussion</h1><p>An Introduction Rule describes how Elements of the Type can beCreated, and is akin to a description of a Constructor. Similarly, anElimination Rule describes how Elements of the Type can be used in anExpression, and is akin to a description of an Overloaded Operator.</p><p>A lot of papers propose Typing Rules that don't make much sense inisolation, but can be plugged into other Type Systems to add a Feature(i.e., allow the non-intrusive addition of other Typing Rules).</p><p>Well-designed Type Systems provide guarantees on a program's behavior(i.e., guarantee predictable runtime behavior).</p><p>C introduced types, not for verification, but to determine how muchspace a variable would take up in memory.</p><p>Uniqueness of Typing (i.e., a Term can only have one Type) doesn'thold when there is Subtyping.</p><p>Curry Style allows representing errors explicitly and describing thetype of errors, which is suitable for languages where things can gowrong. In comparision, Church Style does not allow errors</p><p>The Erasure Property is built upon the assumption that the Executionof the Program doesn't rely on Types.</p><p>Type Ascription woule be beneficial for giving hints to the TypeInference/Type Checking Algorithm.</p><p>Usually, Desugaring happens before Type Checking, as the Type Systemdoes not directly handle the Syntactic Sugar.</p><p>Tuples are also called Sum Types, and Variants are also calledProduct Types. This is based on how many possible values the Tuple orVariant Type has. For example, <code>std::pair&lt;char, bool&gt;</code>has <code>256 * 2 = 512</code> values,<code>std::variant&lt;char, bool&gt;</code> has<code>256 + 2 = 258</code> values, and<code>std::optional&lt;char&gt;</code> has <code>256 + 1 = 257</code>values.</p><p>Enums can be seen as Variants where each value is associated with theUnit Type.</p><p>Tuples and Records are distinct Types because Compilers implementthem differently</p><p>Programming in Dynamically Typed Programming is akin to programmingwith variables which are Variants of all possible types.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Type Systems</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Date and Time Types in Python</title>
    <link href="/2022/12/31/Date-and-Time-Types-in-Python/"/>
    <url>/2022/12/31/Date-and-Time-Types-in-Python/</url>
    
    <content type="html"><![CDATA[<p>There are many types in Python which can store date and timeinformation. These types can be broadly divided into two categories:</p><h1 id="json-serializable-formats">JSON Serializable Formats</h1><ul><li>UNIX Timestamp (e.g. <code>0</code>)</li><li>ISO 8601 String (e.g. <code>'1970-01-01T00:00:00'</code>)</li></ul><p>UNIX Timestamp has its roots in the system time of Unix operatingsystems. It is now widely used in databases, programming languages, filesystems, and other computer operating systems. It counts the number ofseconds that have passed since the Unix epoch began on January 1, 1970at 00:00:00 UTC, minus any modifications made for leap seconds.</p><p>ISO 8601 is an international standard for the transmission andinterchange of time- and date-related information on a global scale.Dates in the Gregorian calendar, hours based on the 24-hour timekeepingsystem, with an optional UTC offset, time intervals, and combinations ofthese are covered by ISO 8601. The standard offers a clear, unambiguousmanner of expressing calendar dates and times in internationalcommunications, notably to prevent numeric dates and times from beingmisinterpreted when such data is sent between nations.</p><p>As the categorization suggests, these formats can be used in JSONserialization, and are widely adopted in data exchange formats and APIs.For example, Stripe APIs use UNIX Timestamps, while Twitter and DropboxAPIs use ISO 8601 Strings. UNIX Timestamps are easier and more efficientto handle, while ISO 8601 Strings have the virtue of beinghuman-readable.</p><h1 id="widely-used-in-memory-data-structures">Widely Used In-memoryData Structures</h1><ul><li><code>datetime.datetime</code> (e.g.<code>datetime.datetime(1970, 1, 1, 0, 0)</code>)</li><li><code>datetime.date</code> (e.g.<code>datetime.date(1970, 1, 1)</code>)</li><li><code>pandas.Timestamp</code> (e.g.<code>Timestamp('1970-01-01 00:00:00')</code>)</li></ul><p>As the categorization suggests, these formats are in-memory,structured representations of date and time information.</p><p><code>datetime.datetime</code> and <code>datetime.date</code> aretypes implemented (and widely used) in the Python Standard Library.<code>datetime.date</code> represents a date (year, month, day) in anidealized calendar, which is the existing Gregorian calendar infinitelystretched in both directions, while <code>datetime.datetime</code> alsocombines the data from a time object (hour, minute, second,microsecond).</p><p><code>pandas.Timestamp</code> is implemented in <code>pandas</code>.It is the <code>pandas</code> replacement for<code>datetime.datetime</code>, and is the type used for the entriesthat make up a <code>pandas.DatetimeIndex</code>, and other timeseries-oriented data structures in <code>pandas</code>. Furthermore, itis also widely used across the Python Ecosystem for Data Science, suchas being used by <code>matplotlib</code> as the <code>xticks</code> forplotting a <code>pandas.Series</code> with a<code>pandas.DatetimeIndex</code>, as shown below.</p><p>References:</p><ul><li>https://en.wikipedia.org/wiki/Unix_time</li><li>https://en.wikipedia.org/wiki/ISO_8601</li><li>https://dev.to/xngwng/do-you-prefer-unix-epoch-a-number-or-iso-8601-a-string-for-timestamps--28ll</li><li>https://stackoverflow.com/questions/15554586/timestamps-iso8601-vs-unix-timestamp</li><li>https://www.dataquest.io/blog/tutorial-time-series-analysis-with-pandas/</li><li>https://www.programiz.com/python-programming/datetime/timestamp-datetime</li><li>https://stackoverflow.com/questions/3743222/how-do-i-convert-a-datetime-to-date</li><li>https://stackoverflow.com/questions/969285/how-do-i-translate-an-iso-8601-datetime-string-into-a-python-datetime-object</li><li>https://www.programiz.com/python-programming/datetime/timestamp-datetime</li><li>https://pynative.com/python-iso-8601-datetime/</li><li>https://docs.python.org/3/library/datetime.html</li><li>https://stackoverflow.com/questions/1937622/convert-date-to-datetime-in-python</li><li>https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html</li><li>https://stackoverflow.com/questions/993358/creating-a-range-of-dates-in-python</li><li>https://stackoverflow.com/questions/41046630/set-time-formatting-on-a-datetime-index-when-plotting-pandas-series</li></ul>]]></content>
    
    
    <categories>
      
      <category>Software Design</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Efficient scalable thread-safety-violation detection: finding thousands of concurrency bugs during testing</title>
    <link href="/2022/11/27/Paper-Reading-Efficient-scalable-thread-safety-violation-detection-finding-thousands-of-concurrency-bugs-during-testing/"/>
    <url>/2022/11/27/Paper-Reading-Efficient-scalable-thread-safety-violation-detection-finding-thousands-of-concurrency-bugs-during-testing/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://dl.acm.org/doi/10.1145/3341301.3359638">here</a>.</p><p>This paper presents Thread Safety Violation Detection (TSVD), a toolthat dynamically detects thread safety violations with low runtimeoverhead, and which is compatible with real-world, distributed-developedcode employing different synchronization mechanisms. The tool framesthread safety violations as two methods, with one of them being a writeoperation, occurring concurrently. It infers thread safety violationsusing a very creative approach. First, it instruments the program anddetects method calls that access objects behind thread-safety contracts.Later on, during the execution of the program, TSVD injects delays intothreads with method calls accessing those objects and monitors whetheranother thread also accesses the same objects during the delay. As thismay incur significant overhead, the tool uses two strategies todetermine when to inject delays - keeping track of "near misses", wherethe two method calls of two threads occur within a time threshold apartfrom each other, and inferring "happens before" relations, to rule outtwo accesses which are causally related.</p><p>The tool was tested on 43000 .NET programs in Microsoft teams, andits bug-finding capability outperformed both existing tools andconfiguring TSVD to emulate the strategies of existing tools, whichshows the feasibility of TSVD.</p><p>There are two questions that come to mind after reading thispaper:</p><ul><li>How does the tool acquire the information on which methods arethread-unsafe?</li><li>The approach the tool uses to infer thread safely - injecting delaysand monitoring the behavior of other threads - sounds very interestingto me. Have there been any other applications of such an approach?</li><li>What is the sensitivity of the relevant parameters used in TSVD toits effectiveness and efficiency? Is there any guide on how to properlyadjust these parameters?</li></ul><hr /><p>Feedback from the Class Discussion</p><p>The proposed approach can handle different concurrency models, suchas:</p><ul><li>async</li><li>task-based</li><li>thread-based</li></ul><p>But can it handle unstructured concurrency?</p><p>The approach generalizes data race for objects and data structures atthe method-level (e.g. there cannot be two simultaneous calls to add()for a <code>List</code> class).</p><p>Using delays can handle many more cases than reasoning about threadscheduling. It is a "simple thing" which works for many cases (akin tofuzzing).</p><p>The approach requires manually specifying read and write APIs. Is itpossible to create a semi-automatic approach starting from contractslabeled for standard library APIs?</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Hybrid dynamic data race detection</title>
    <link href="/2022/11/23/Paper-Reading-Hybrid-dynamic-data-race-detection/"/>
    <url>/2022/11/23/Paper-Reading-Hybrid-dynamic-data-race-detection/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/781498.781528">here</a>.</p><p>The paper proposes a hybrid approach to dynamically (at runtime) dataraces in multithreaded Java programs. It first proposes two specificdetection approaches, each with its strengths and weaknesses. The firstis lockset-based detection, which identifies a data race when multiplethreads use a shared memory location without holding a shared lockobject. Such an approach is fast but may lead to false positives. As aresult, the paper proposes another approach, happens-before detection,which uses several heuristics to reason about relations between eventsand infer whether a potential race has occurred at a particular memorylocation. In comparison, this approach is more computationally expensiveand may lead to false negatives. Considering that neither approach issound, they combine the two approaches by first using lockset-baseddetection to identify potential data races before using happens-beforedetection to reason whether these are probable. The paper then conductsan experimental study of their hybrid approach on various Java programs,demonstrating its effectiveness and efficiency.</p><p>I like this paper's idea of combining a pessimistic and optimisticapproach when doing program analysis. Are there any other works that usesuch an idea?</p><p>However, I have a question concerning the applicability of the hybridapproach in real life. Although pessimistic, shouldn't lockset-baseddetection be enough to stamp out all potential data races by providingprogrammers with feedback to add relevant locks to prevent such possibledata races? This is relevant to the requirements for defensiveprogramming. Or are there design patterns where multiple threads cansafely use a shared memory location without holding a common lock andnot lead to data races?</p><hr /><p>Feedback from the Class Discussion</p><p>Difference Between Race Condition and Data Race: - Race Condition:There are multiple threads, and the behavior of program depends onthread scheduling. - Data Race: Different from race condition. Thisfrequently happens when you parallelize a program that shouldn't beparallelized. Data race can be solved by using locks, but there maystill be race coditions.</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">Thread<span class="hljs-number">-1</span>:<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">...</span>)</span> &#123;<br>    x = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams">Thread<span class="hljs-number">-2</span>:<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">...</span>)</span>&#123;<br>    x = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Modelling in the Paper: - Lamport Timestamps/Vector Clocks - Threadevents: statement executions in threads. A thread event is dependent onprevious thread events. This is captured used using the happens-beforeformal definition in the paper, but leads to false negatives. - Threadcommunications: signals (enforce order) and locks (mutually exclusive).- Message send/receive: enqueue and dequeue.</p><p>Architecure-dependednt atomic operations can also be a lock-freesolution (e.g. C++'s atomic).</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Lightweight Verification of Array Indexing</title>
    <link href="/2022/11/16/Paper-Reading-Lightweight-Verification-of-Array-Indexing/"/>
    <url>/2022/11/16/Paper-Reading-Lightweight-Verification-of-Array-Indexing/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/3213846.3213849">here</a>.</p><h1 id="summary-of-the-paper">Summary of the Paper</h1><p>The authors propose a methodology to detect out-of-bound arrayaccesses statically. They first define that criteria that idealtechniques for detecting out-of-bound array accesses should satisfy,before analyzing the insufficiency of existing academic and industrialapproaches, and presenting their own approach, Index Checker,implemented for Java.</p><p>Index Checker reduces checking array bonds to identifying 7 kinds ofknowledge, which concern array index and array length, and form ahierarchy. It models such hierarchical knowledge as a Type System,requires the user to write "Type" Annotations at procedure boundaries,and verifies that values have the given "Type" at runtime. This isimplemented using Checker Framework, an "industrial-strength,open-source tool for building Java type systems".</p><p>The authors evaluate Index Checker on 3 large-scale, well-tested Javaprojects (Google Guava, JFreeChart, Plume-lib), and compare IndexChecker with 3 other approaches (FindBugs, KeY, and Clousot), provingthe effectiveness of Index Checker (scalability, finding bugs inwell-tested programs, and low false positive rate). They also assess theburden of writing type annotations for Index Checker.</p><h1 id="questions">Questions</h1><ul><li>What is the rationale behind the 7 kinds of knowledge concerningarray index and array length proposed in the paper?</li><li>I am not very familiar with Type Theory, which may have impeded myunderstanding of the value of the paper. What are the benefits of usingType Systems and Type Inference, and using Type Annotations to captureknown constraints? Is it just to leverage the power of CheckerFramework, an "industrial-strength, open-source tool for building Javatype systems", for sound inference? Or are there any furtherbenefits?</li><li>No matter what the benefits are, from this paper, modelinghierarchical knowledge as a Type System, using Type Annotations tocapture known constraints, and using Type Inference to verify suchconstraints sounds like a very innovative technique with many potentialuse cases. Have there been any other applications of such atechnique?</li></ul><hr /><h1 id="feedback-from-the-class-discussion">Feedback from the ClassDiscussion</h1><p>The hierarchy of knowledge is derived from Exploratory Data Analysis(trying stuff until it works, see Section 2.8).</p><p>"Subtype" is a kind of Comparable Partial Ordering ('&lt;'). TheTypes in the Bottom have more information, while the Types in the Tophave less information.</p><p>In Java, aside from Inheritance, another form of Subtyping isFunction Subtyping. e.g. Comparator (to compare two Dog's we can pass afunction that compares two Animal's) the inputs can be more generaltypes.</p><p>Rules define what to do when a Pattern is encountered; however, ittakes a (nontrivial) search to determine the order to apply therules.</p><p>Fixed Point: Convergence of Information.</p><p>Reach a Fixed Point: Iterate until Convergence.</p><p>The Paper uses Subtyping to implement Widening.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Modular Checking for Buffer Overflows in the Large</title>
    <link href="/2022/11/13/Paper-Reading-Modular-Checking-for-Buffer-Overflows-in-the-Large/"/>
    <url>/2022/11/13/Paper-Reading-Modular-Checking-for-Buffer-Overflows-in-the-Large/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/1134285.1134319">here</a>.</p><h1 id="background-information">Background Information</h1><h2 id="datalog">Datalog</h2><ul><li>Declarative Programming Language which began as a Query Language forRelational Databases, and is now used in Data Integration, InformationExtraction, Program Analysis, Cloud Computing, Machine Learning,etc.</li><li>Akin to SQL in many aspects.<ul><li>Not Turing Complete.</li><li>Used as a Domain Specific Language.</li><li>No Canonical Implementation, many different Implementations existfor different Applications (c.f. SQLite, MySQL, PostgreSQL, etc. forSQL).</li></ul></li><li>Follows the 'Logic Programming' Paradigm.<ul><li>A Program consists of Constants, Variables, Facts, and Rules (basedon First Order Logic, in a form similar to "a new Fact A is true if B,C, and D are already known to be true").</li><li>The Execution of a Program is <em>iteratively inferring new Factsgiven the Rules</em>.</li><li>Maps very nicely to many problems encountered during ProgramAnalysis.</li></ul></li></ul><h1 id="summary-of-the-paper">Summary of the Paper</h1><p>The authors proposed a Methodology for detecting possible BufferOverflow-based Security Exploits in C code and providing developers withinstant feedback during the build process. The Methodology prefersusability over accuracy, and should be used alongside other tools in aSwiss Cheese Model against Security Exploits.</p><p>First, the authors proposed a Simple Annotations Language forannotating Pointers passed as parameters to and returned from Functions,to denote Preconditions and Postconditions of Function Execution. Theauthors propose that for new code, annotation should be insertedmanually, and code should be fully annotated before being checked in toVersion Control.</p><p>For legacy codebases and/or third-party code without suchAnnotations, the authors propose an Inference Engline, SALInfer, whichtries to infer such Annotations, preferring Coverage over Accuracy.SALInfer supports specifying Inference Algorithms using Datalog.</p><p>Finally, the authors propose a modular checker, ESPX, which tries toinfer if a program is potentially vulnerable to Buffer Overflow-basedSecurity Exploits by statically analyzing the annotations within theprogram's code. The confidence of the inference results vary based onthe extent and quality of the annotations.</p><h1 id="questions-regarding-the-paper">Questions Regarding thePaper</h1><ul><li>What is the relevance of such a technique to "safe" programminglanguages that do not allow using overflowable buffers?</li><li>The authors state that "control over annotation insertion is givento individual developers". However, developers might be reluctant toinsert Annotations, and inserting Annotations can negatively affectdeveloper productivity. Furthermore, the quality of the insertedAnnotations is not guaranteed. Last but not least, inferring Annotationsfor legacy codebases and/or third-party code without such Annotationsprefers Coverage over Accuracy, which may not lead to sound results.Considering all these real concerns, the practical usability of thistool is seriously compromised.</li><li>The authors did an evaluation on an unnamed Microsoft product. Withlittle information regarding the product being disclosed, such anevaluation is far from convincing, and I suspect that there might bemanipulation of some kind within the evaluation.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Precise Interprocedural Dataflow Analysis via Graph Reachability</title>
    <link href="/2022/11/07/Paper-Reading-Precise-Interprocedural-Dataflow-Analysis-via-Graph-Reachability/"/>
    <url>/2022/11/07/Paper-Reading-Precise-Interprocedural-Dataflow-Analysis-via-Graph-Reachability/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/199448.199462">here</a>.</p><p>To be honest, I found the paper to be almost unreadable due to itbeing full of unfamiliar concepts and abstract formalizations. I triedmy best to do some studying into the topic so that I can understand theproblem that they are trying to solve, and important aspects of theiralgorithm, better.</p><h1 id="graph-reachability">Graph Reachability</h1><p>Graph Reachability means whether it is possible to get from onevertex to another vertex within a graph.</p><p>In an Undirected Graph <span class="math inline">\(G(V, E)\)</span>,Graph Reachability between <em>one pair of nodes</em> can be calculatedusing Breadth-First Search, while Graph Reachability between <em>allpair of nodes</em> can be reduced to calculating the ConnectedComponents of the Undirected Graph, which is an efficient algorithm with<span class="math inline">\(O(|V| + |E|)\)</span> time complexity.</p><figure><imgsrc="https://upload.wikimedia.org/wikipedia/commons/3/38/Equivalentie.svg"alt="Connected Components within an Undirected Graph" /><figcaption aria-hidden="true">Connected Components within an UndirectedGraph</figcaption></figure><p>In a Directed Graph, Graph Reachability between <em>one pair ofnodes</em> can also be calculated using Breadth-First Search.<strong>However, there is no efficient algorithm that can calculateGraph Reachability between <em>all pair of nodes</em> for all DirectedGraphs.</strong></p><p>For <em>any</em> Directed Graph, calculating Graph Reachabilitybetween <em>all pair of nodes</em> can be reduced to calculating<strong>All Pairs Shortest Distance</strong> using the Floyd-WarshallAlgorithm, which has an <span class="math inline">\(O({|V|}^3)\)</span>time complexity.</p><p>More efficient algorithms are only applicable to Planar DirectedGraphs.</p><h1 id="data-flow-analysis">Data Flow Analysis</h1><p>Constant Propogation (determining whether variables at a given pointin the program are guaranteed to have constant values) and Live VariableAnalysis (determining at a given point in the program, which variablesmight be used before being overwritten) are two commonly encounteredexamples of Data Flow Analysis.</p><p>Given a program's Control Flow Graph, Data Flow Analysis:</p><ul><li>Associates each Node of the Control Flow Graph with Informationconcerning the Variables within that Node (known as <em>DataflowFact</em>'s, usually a Mapping between Variables and their Values orProperties)</li><li>Models the effect of executing a Node with a <em>DataflowFunction</em>.</li></ul><p>In most Data Flow Analysis problems, we take one of the followingapproaches to obtain the Dataflow Facts for each Node:</p><ul><li>Summarizing paths entering the Node from the Start, such as inConstant Propogation. Known as "Forward Problem"'s.</li><li>Summarizing paths exiting the Node from the Exit, such as in LiveVariable Analysis. Known as "Backward Problem"'s.</li></ul><p>How we summarize paths is known as the <em>ConfluenceOperator</em>.</p><p>Data Flow Analysis problems can also be divided into "may" problemsand "must" problems.</p><ul><li>In "may" problems, the Dataflow Facts for each Node includeinformation about what may be true. An example is Live VariableAnalysis, where we determine whether a variable <em>may</em> be usedbefore being overwritten in a given point in the program.</li><li>In "must" problems, the Dataflow Facts for each Node includeinformation about what must be true. An example is Constant Propogation,where we determine whether a variable <em>must</em> have a given valuein a given point in the program.</li></ul><p>Many interesting Data Flow Analysis problems, such as Live VariableAnalysis, can be modeled as GEN/KILL problems, or bit-vector problems,in which:</p><ul><li>A set of variables, <span class="math inline">\(KILL[n]\)</span>, isdefined at Node <span class="math inline">\(n\)</span>.</li><li>A set of variables, <span class="math inline">\(GEN[n]\)</span>, isused at Node <span class="math inline">\(n\)</span>.</li><li>We use Union or Intersection to summarize paths entering a Node toobtain the Dataflow Facts for the Node.</li></ul><h1 id="interprocedural-dataflow-analysis">Interprocedural DataflowAnalysis</h1><p>The goal of Interprocedural Dataflow Analysis is to capture anAbstraction of the Effect of calling a Procedure in DataflowAnalysis.</p><p>A naive approach to Interprocedural Dataflow Analysis is to reduce itto Intraprocedural Dataflow Analysis in some way.</p><ul><li>Procedure Inlining<ul><li>Exponentially increases the Control Flow Graph</li><li>Cannot handle recursion</li></ul></li><li>Context Sensitive Procedure Inlining<ul><li>Uses Context Information (often an Approximation of the Call Stack)to distinguish between different Calls of the same Procedure, and reducethe number of inlined Procedures.</li></ul></li></ul><hr /><p>However, even after research, I have failed to understand the morecomplicated approaches (as well as the approaches proposed in thisPaper).</p><p>I can only get the point that the author shows that manyInterprocedural Dataflow Analysis problems, in which:</p><ul><li>A finite set of Dataflow Facts</li><li>Dataflow Functions distribute over the Confluence Operator (which Idon't fully understand)</li></ul><p>including GEN/KILL problems, or bit-vector problems, can be reducedto a Graph Reachability Problem on a Directed Graph.</p><p>Furthermore, I believe the main contribution of this paper istheoretical, but what is its value in real-world Dataflow Analysisproblems, especially considering that the Time Complexity of GraphReachability Problems on Directed Graphs are high?</p><p>I honestly hope that I can get some insight into these approachesduring our class on Monday. Thank you!</p><hr /><h1 id="feedback-from-the-class-discussion">Feedback from the ClassDiscussion</h1><p>Some of the paper's idea comes from Abstract Interpretation. It isnice theoretically, but it is far from implementation.</p><p>Graph Reachability in the context of Interprocedure Analysis is alsoknown as Context-Free Language Reachability and Dyck Reachability.</p><p><strong>In the context of this paper, there are multiple DataflowFunctions, one for each Node in the Control Flow Graph. Given a Node inthe Control Flow Graph, we use Pattern Matching to determine what itsDataflow Function is.</strong> Lambdas are used to represent theseDataflow Functions. Explanation for the notations: <spanclass="math inline">\(\lambda&lt;parameters&gt;.&lt;return\_value&gt;\)</span> means<code>def f(&lt;parameters&gt;): return &lt;return_value&gt;</code>.</p><p>In the context of this paper, we require all Dataflow Functions to bedistributive over the Meet Function (Confluence Function). This meansthat, given the Meet Function <span class="math inline">\(\Pi\)</span>and a Dataflow Function <span class="math inline">\(f\)</span>, <spanclass="math inline">\(f(X~\Pi~Y) = f(X)~\Pi~f(Y)\)</span> for any twoDataflow Facts <span class="math inline">\(X, Y\)</span>.</p><p>Each Dataflow Function can be visualized using a GraphRepresentation. The Edges represent Dependencies between Facts of theVariables in the Old Dataflow Facts and Facts of the Variables in theNew Dataflow Facts.</p><figure><imgsrc="https://picx1.zhimg.com/v2-f2b6351350543806f3a1b5f709071f78_1440w.jpg?source=172ae18b"alt="Graph Representation of Dataflow Functions, x is Shorthand for the Facts of x" /><figcaption aria-hidden="true">Graph Representation of DataflowFunctions, <code>x</code> is Shorthand for the Facts of<code>x</code></figcaption></figure><p>Worklist Algorithm: an Algorithm which takes Objects from a Worklist(a Queue of some sort) one at a time, processes it in some way, andperhaps further adds new Objects to the Worklist, until some Target isreached. Example: Breadth First Search.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Mining Input Grammars from Dynamic Taints</title>
    <link href="/2022/11/02/Paper-Reading-Mining-Input-Grammars-from-Dynamic-Taints/"/>
    <url>/2022/11/02/Paper-Reading-Mining-Input-Grammars-from-Dynamic-Taints/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/2970276.2970321">here</a>.</p><p>A program usually accepts a formal language as input. Inferring thegrammar of this formal language is an important task with many usecases.</p><ul><li>Helps humans understand the structure of the formal language.<ul><li>Manually writing valid inputs</li><li>Reverse Engineering</li></ul></li><li>Generate inputs for testing and fuzzing</li></ul><p>The authors propose Autogram, a method that infers a Context FreeGrammar given a set of sample inputs and a Java program that acceptsthat set of inputs and uses it in some way. Autogram adapts a DynamicTaining-based approach:</p><ul><li>It monitors the data flow of each character within the input, with"the Input Fragment it came from" as the taint.</li><li>It traces method entries, method exits, field accesses, and arrayaccesses within the execution of the program.</li><li>From such a trace, the Dynamic Call Tree is reconstructed, and thesets of Intervals (Input Fragments) processed by functions, stored invariables, and returned by functions is derived.</li><li>This is used to build an Interval Tree, and the Interval Tree isrefined into a Pure Input Tree free of conflicting overlaps (resultingfrom parsers using lookaheads).</li><li>The pure input tree is assumed to be a Parse Tree, and ProductionRules are derived from it. The leaf nodes are considered to beTerminals, and Regular Expressions matching them are learned.</li></ul><p>The authors then conduct an experimental study concerning theaccuracy and completeness of the inferred Context Free Grammars using"parts of the Java Standard API that are used to process URLs andproperty files", and "open source projects that implement support forCSV, INI, and JSON formats".</p><hr /><p>However, I had more questions than answers after reading thispaper.</p><ul><li>One of the use cases that the authors mentioned is "the grammarvastly simplifies the creation of parsing programs that decomposeexisting inputs into their constituents". Why don't we directly extractthe parsing logic out of the program Autogram runs on?</li><li>The type of Context Free Grammar inferred by Autogram seems to be anLL(1) Grammar. This type of Grammar is only able to represent simpleGrammars, and does not support for Left Recursion, which is pervasive inreal-world Grammars. Why don't they infer an LALR(1) Grammar, which isboth simple and expressive (it supports representing may real-worldProgramming Languages). Perhaps, a Hidden Markov Model could be trainedto infer the Transitions between the States within the LALR(1) ParseTable should an LALR(1) Grammar be inferred?</li><li>In the current implementation of Autogram, tracing is efficient, asthe authors have mentioned: "millions of calls result in traces of a fewMegabytes". However, the current implementation incurs a ~100xperformance overhead, and there is a lot of room for performanceoptimization. Maybe ideas that we have discussed for TaintCheck and Qsym(direct Binary Analysis, preinstrumenting Bytecode, JIT compilationetc.) could be used here?</li><li>The specific process of refining an Interval Tree into a PureInterval Tree free of conflicting overlaps is not described clearly inthe paper. Why don't the author present an example with figures showingthe manipulation of nodes within the Interval Tree during this process?The author also mentions applying "a simple heuristic that assumes leftto right processing of the input" to resolve possible ambiguitiesassociated with parsers using lookaheads. However, what is the rationalebehind this "simple heuristic"?</li><li>The specific process of deriving Production Rules from the PureInterval Tree is also unclear. What do the authors mean by "We can thuscheck if nodes are compatible and can be used to derive productions forfor the same nonterminal symbol"? What is the meaning of "compatible" inthis context?</li><li>The programs used in the experimental study are all open-sourceprograms of very high code quality (containing accurately namedvariables and functions). However, how well does Autogram work withclosed-source programs, and/or programs with low code quality,containing obscure variable and function names? This is frequently thesituation we encounter when we try to reverse engineer the (oftenclosed-source and/or obscure) structure of a program's input, one of themajor use cases of Autogram.</li></ul><p>Also some inspiration and ideas I got from the paper:</p><ul><li>The author mentions that "dynamic tainting allows us to preciselyidentify which parts of a programs input are read, stored and processedat any point in time". Could this technique be used in a Fuzzing contextto identify which bits generated by a Coverage-Guided Fuzzer are used inwhich sections of a fuzzed program?</li><li>The logic of building an Interval Tree is very interesting, and itreads like the "Subset Tree" mentioned in the KLEE paper. I conject thatboth these Tree Structures could be generalized and used in a much widerrange of contexts.</li></ul><hr /><p>Feedback from the Class Discussion</p><ul><li>A Context Free Grammar may not capture the structure of binaryfiles.</li><li>How does the approach compare to unsupervised parsing in NLP orfine-tuning language models, especially with a lot of input?</li><li>Is it possible to use feedback to improve the mined grammar?</li><li>From one tree, we infer one set of grammar rules; from 1000 trees,we infer 1000 sets of grammar rules. They are merged together to derivethe final Context Free Grammar.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software</title>
    <link href="/2022/10/29/Paper-Reading-Dynamic-Taint-Analysis-for-Automatic-Detection-Analysis-and-Signature-Generation-of-Exploits-on-Commodity-Software/"/>
    <url>/2022/10/29/Paper-Reading-Dynamic-Taint-Analysis-for-Automatic-Detection-Analysis-and-Signature-Generation-of-Exploits-on-Commodity-Software/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://valgrind.org/docs/newsome2005.pdf">here</a>.</p><p>To combat worms spread by the Internet exploiting softwarevulnerabilities, the paper proposes TaintCheck, a dynamic taint analysistechnique for automatic detection of exploits on software.</p><p>Summary of TaintCheck:</p><ul><li>TaintCheck directly operates on an arbitrary executable and does notrequire its source code. It uses Valgrind to translate basic blocksbeing executed into Valgrind's RISC-like instruction set (UCode),inserts UCode instructions for instrumentation, and passes the modifiedUCode back to Valgrind for execution.</li><li>TaintCheck by default considers data originating from the network as"untrusted" and taints it. It keeps track of "the propagation of tainteddata as the program executes", which involves monitoring data movementinstructions and arithmetic instructions, with the exception of constantfunctions such as <code>xor eax, eax</code>.</li><li>To accomplish this, TaintCheck associates "each byte of memory" witha Taint data structure. Different instances of such a data structure are"chained" to record "how tainted data is propagated".</li><li>TaintCheck checks whether tainted data is used in ways it considersillegitimate, such as being used as a return address, a functionpointer, a format string, and (optionally) as an argument of a systemcall. When such illegitimate uses are detected, it is possible tocollect information about a software vulnerability, especially "theexecution path from tainted data's entry and its use in a probableexploit".</li></ul><p>The paper also proposes a new semantic-based automatic signaturegeneration approach on top of TaintCheck.</p><hr /><p>There are several questions that came to my mind when I was readingthis paper:</p><ul><li>The paper mentions that "the current implementation slows programexecution between 1.5 and 40 times", but also mentions that "theprototype has not been optimized", and proposes optimization techniques.Why didn't the authors implement these optimization techniques andconduct experiments on the optimized TaintCheck?</li><li>There is no doubt that using Valgrind to translate basic blocksbeing executed into UCode greatly simplifies dynamic taint analysis onan arbitrary executable, as TaintCheck deals with an RISC-likeinstruction set instead of raw machine code. However, this incurssignificant overhead. Would directly performing dynamic taint analysison machine code at runtime using a dynamic binary instrumentation toolsuch as Intel Pin boost performance (like the case of QSym)? What aboutgenerating UCode, inserting instructions for instrumentation, andpassing the modified UCode back to Valgrind <em>before the executable isexecuted</em>?</li><li>What is the overhead of using the Taint data structure? Would thetotal size of all Taint data structures explode for long-runningprocesses? And why do they use this Taint data structure, instead ofusing a conventional Data Flow Graph?</li><li>What is the list of constant functions that TaintCheck supports? Isit representative, and is it extensible?</li><li>Are the ways tainted data is used considered by TaintCheck to beillegitimate representative of real exploits? How well can TaintCheckdiscriminate from "illegitimate" uses with intentional uses, and/or useswith checks? Specifically, the paper mentions that TaintCheck can"untaint the data immediately after it has been sanity checked", but howis this situation detected?</li><li>In the evaluation section, why are the benchmarks used in assessing"compatibility and false positives" different from those used inassessing "attack detection" on actual exploits?</li><li>What does a "signature" look like, and how is it used to filterattacks?</li></ul><hr /><p>Feedback from the Class Discussion</p><ul><li>Performance is not a priority. <strong>The paper is more of aproof-of-concept, and even "reads like a grant proposal"</strong>,especially Section 6.</li><li>The "taint data structure" includes more information than a dataflowgraph (snapshots of the stacks etc.). It can also use a <strong>"memoryarena"</strong> instead of vanilla heap allocation to improveperformance.</li><li>Some of the detected attacks may not be present in "safe", managedlanguages.</li><li>Due to the large overhead, the technique cannot be used to handlerequests in production, but requests can be forked to it instead.</li><li>Dynamic taint analysis can have applications outside of the securitydomain.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python in a Functional Style: Closures, Generators, and Coroutines</title>
    <link href="/2022/10/28/Python-in-a-Functional-Style-Closures-Generators-and-Coroutines/"/>
    <url>/2022/10/28/Python-in-a-Functional-Style-Closures-Generators-and-Coroutines/</url>
    
    <content type="html"><![CDATA[<hr /><!-- _class: lead --><h1id="python-in-a-functional-style-closures-generators-and-coroutines">Pythonin a Functional Style: Closures, Generators, and Coroutines</h1><p>Jifeng Wu</p><p>2022-10-28</p><hr /><!-- header: Contents --><ul><li>Closures👈</li><li>Generators</li><li>Coroutines</li></ul><hr /><!-- header: Closures --><p>All Python functions are <strong>closures</strong>.</p><ul><li>Function code.</li><li>Execution environment of function code (variables it dependon).</li></ul><p>A nested function can be returned. This is a common design patternfor creating <strong>tailored functions</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_greeting_function</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">greeting_function</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Hello, <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> greeting_function<br></code></pre></td></tr></table></figure><hr /><p>All Python functions are <strong>closures</strong>.</p><ul><li>Function code.</li><li>Execution environment of function code (variables it dependon).</li></ul><p>A nested function can be returned. This is a common design patternfor creating <strong>tailored functions</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a = get_greeting_function(<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a()<br>Hello, A<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b = get_greeting_function(<span class="hljs-string">&#x27;B&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b()<br>Hello, B<br></code></pre></td></tr></table></figure><hr /><p>Look into a closure's <code>cell_contents</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a.__closure__<br>(&lt;cell at <span class="hljs-number">0x7f3c81849ca8</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c8185ac70</span>&gt;,)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a.__closure__[<span class="hljs-number">0</span>]<br>&lt;cell at <span class="hljs-number">0x7f3c81849ca8</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c8185ac70</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_a.__closure__[<span class="hljs-number">0</span>].cell_contents<br><span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b.__closure__<br>(&lt;cell at <span class="hljs-number">0x7f3c81849c18</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c82f18e30</span>&gt;,)<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b.__closure__[<span class="hljs-number">0</span>]<br>&lt;cell at <span class="hljs-number">0x7f3c81849c18</span>: <span class="hljs-built_in">str</span> <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f3c82f18e30</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>function_greeting_b.__closure__[<span class="hljs-number">0</span>].cell_contents<br><span class="hljs-string">&#x27;B&#x27;</span><br></code></pre></td></tr></table></figure><hr /><p>Should an inner function <strong>use an outer function's localvariable</strong> (instead of <strong>shadowing it</strong>), that localvariable should be declared <code>nonlocal</code> within the innerfunction. Not using <code>nonlocal</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer_function</span>():<br>    string = <span class="hljs-string">&#x27;Hello&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_function</span>():<br>        <span class="hljs-comment"># Shadows the local variable `string` of `outer_function`</span><br>        string = <span class="hljs-string">&#x27;World&#x27;</span><br>    inner_function()<br>    <span class="hljs-keyword">return</span> string<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>outer_function()<br><span class="hljs-string">&#x27;Hello&#x27;</span><br></code></pre></td></tr></table></figure><hr /><p>Should an inner function <strong>use an outer function's localvariable</strong> (instead of <strong>shadowing it</strong>), that localvariable should be declared <code>nonlocal</code> within the innerfunction. Using <code>nonlocal</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer_function</span>():<br>    string = <span class="hljs-string">&#x27;Hello&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner_function</span>():<br>        <span class="hljs-comment"># Uses the local variable `string` of `outer_function`</span><br>        <span class="hljs-keyword">nonlocal</span> string<br>        string = <span class="hljs-string">&#x27;World&#x27;</span><br>    inner_function()<br>    <span class="hljs-keyword">return</span> string<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>outer_function()<br><span class="hljs-string">&#x27;World&#x27;</span><br></code></pre></td></tr></table></figure><hr /><p><strong>Creating and returning a nested function based on a functionargument</strong> is widely used in Python, called <strong>decorating afunction</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cached</span>(<span class="hljs-params">function</span>):<br>    cache = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cached_function</span>(<span class="hljs-params">*args</span>):<br>        <span class="hljs-keyword">nonlocal</span> function, cache<br>        <span class="hljs-keyword">if</span> args <span class="hljs-keyword">in</span> cache:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cache hit with args: <span class="hljs-subst">&#123;args&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span> cache[args]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cache miss with args: <span class="hljs-subst">&#123;args&#125;</span>&#x27;</span>)<br>            result = function(*args)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Writing f(<span class="hljs-subst">&#123;args&#125;</span>) =&gt; <span class="hljs-subst">&#123;result&#125;</span> to cache&#x27;</span>)<br>            cache[args] = result<br>            <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> cached_function<br></code></pre></td></tr></table></figure><hr /><p>Python even has special syntatical support for this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@cached</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> n &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n - <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: fib(<span class="hljs-number">5</span>)                                                                                       <br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">5</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">4</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">3</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">2</span>,)<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">1</span>,)<br>Writing f((<span class="hljs-number">1</span>,)) =&gt; <span class="hljs-number">1</span> to cache<br>Cache miss <span class="hljs-keyword">with</span> args: (<span class="hljs-number">0</span>,)<br>Writing f((<span class="hljs-number">0</span>,)) =&gt; <span class="hljs-number">0</span> to cache<br>Writing f((<span class="hljs-number">2</span>,)) =&gt; <span class="hljs-number">1</span> to cache<br>Cache hit <span class="hljs-keyword">with</span> args: (<span class="hljs-number">1</span>,)<br>Writing f((<span class="hljs-number">3</span>,)) =&gt; <span class="hljs-number">2</span> to cache<br>Cache hit <span class="hljs-keyword">with</span> args: (<span class="hljs-number">2</span>,)<br>Writing f((<span class="hljs-number">4</span>,)) =&gt; <span class="hljs-number">3</span> to cache<br>Cache hit <span class="hljs-keyword">with</span> args: (<span class="hljs-number">3</span>,)<br>Writing f((<span class="hljs-number">5</span>,)) =&gt; <span class="hljs-number">5</span> to cache<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><span class="math inline">\(O(n)\)</span> time complexity.</p><hr /><p>LeetCode problem: Given n pairs of parentheses, write a function togenerate all combinations of well-formed parentheses.</p><p>Example 1:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;((()))&quot;</span>,<span class="hljs-string">&quot;(()())&quot;</span>,<span class="hljs-string">&quot;(())()&quot;</span>,<span class="hljs-string">&quot;()(())&quot;</span>,<span class="hljs-string">&quot;()()()&quot;</span>]<br></code></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">1</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;()&quot;</span>]<br></code></pre></td></tr></table></figure><hr /><figure><imgsrc="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/grammar.png"alt="bg left contain" /><figcaption aria-hidden="true">bg left contain</figcaption></figure><p>We write a Context Free Grammar and analyze it:</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">S -&gt; S S&#x27; | <span class="hljs-type">S</span>&#x27; .<br>S&#x27; -&gt; ( S ) | <span class="hljs-type">( ) .</span><br></code></pre></td></tr></table></figure><blockquote><p>https://mdaines.github.io/grammophone/#</p></blockquote><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@cached</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s_generator</span>(<span class="hljs-params">number_of_parenthesis</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s_generator(<span class="hljs-subst">&#123;number_of_parenthesis&#125;</span>)&#x27;</span>)<br>    <br>    return_value = []<br>    <br>    <span class="hljs-comment"># s -&gt; ss .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis &gt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> ss_string <span class="hljs-keyword">in</span> ss_generator(number_of_parenthesis):<br>            return_value.append(ss_string)<br>    <br>    <span class="hljs-comment"># s -&gt; s ss .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis &gt;= <span class="hljs-number">2</span>: <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, number_of_parenthesis):<br>            <span class="hljs-keyword">for</span> s_string, ss_string <span class="hljs-keyword">in</span> itertools.product(<br>                s_generator(i),<br>                ss_generator(number_of_parenthesis - i)<br>            ):<br>                return_value.append(s_string + ss_string)<br>    <br>    <span class="hljs-keyword">return</span> return_value<br></code></pre></td></tr></table></figure><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@cached</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ss_generator</span>(<span class="hljs-params">number_of_parenthesis</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;ss_generator(<span class="hljs-subst">&#123;number_of_parenthesis&#125;</span>)&#x27;</span>)<br>    <br>    return_value = []<br>    <br>    <span class="hljs-comment"># ss -&gt; ( ) .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis == <span class="hljs-number">1</span>:<br>        return_value.append(<span class="hljs-string">&#x27;()&#x27;</span>)<br>    <span class="hljs-comment"># ss -&gt; ( s ) .</span><br>    <span class="hljs-keyword">if</span> number_of_parenthesis &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> s_string <span class="hljs-keyword">in</span> s_generator(number_of_parenthesis - <span class="hljs-number">1</span>):<br>            return_value.append(<span class="hljs-string">&#x27;(&#x27;</span> + s_string + <span class="hljs-string">&#x27;)&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> return_value<br></code></pre></td></tr></table></figure><hr /><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> n = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> [<span class="hljs-string">&quot;((()))&quot;</span>,<span class="hljs-string">&quot;(()())&quot;</span>,<span class="hljs-string">&quot;(())()&quot;</span>,<span class="hljs-string">&quot;()(())&quot;</span>,<span class="hljs-string">&quot;()()()&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: s_generator(<span class="hljs-number">3</span>)                                                                               <br>s_generator(<span class="hljs-number">3</span>)<br>ss_generator(<span class="hljs-number">3</span>)<br>s_generator(<span class="hljs-number">2</span>)<br>ss_generator(<span class="hljs-number">2</span>)<br>s_generator(<span class="hljs-number">1</span>)<br>ss_generator(<span class="hljs-number">1</span>)<br>Out[<span class="hljs-number">4</span>]: [<span class="hljs-string">&#x27;((()))&#x27;</span>, <span class="hljs-string">&#x27;(()())&#x27;</span>, <span class="hljs-string">&#x27;()(())&#x27;</span>, <span class="hljs-string">&#x27;(())()&#x27;</span>, <span class="hljs-string">&#x27;()()()&#x27;</span>]<br><br>In [<span class="hljs-number">5</span>]: s_generator.cache_info()                                                                     <br>Out[<span class="hljs-number">5</span>]: CacheInfo(hits=<span class="hljs-number">3</span>, misses=<span class="hljs-number">3</span>, maxsize=<span class="hljs-literal">None</span>, currsize=<span class="hljs-number">3</span>)<br><br>In [<span class="hljs-number">6</span>]: ss_generator.cache_info()                                                                    <br>Out[<span class="hljs-number">6</span>]: CacheInfo(hits=<span class="hljs-number">3</span>, misses=<span class="hljs-number">3</span>, maxsize=<span class="hljs-literal">None</span>, currsize=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><hr /><p>Closures also provide an efficient mechanism for <strong>maintainingstate between several calls</strong>. Traditional (OOP) approach:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Countdown</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.n = n<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next_value</span>(<span class="hljs-params">self</span>):<br>        old_value = self.n<br>        self.n -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> old_value<br></code></pre></td></tr></table></figure><hr /><p>Closure-based approach:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_next_value</span>():<br>        <span class="hljs-keyword">nonlocal</span> n<br>        old_value = n<br>        n -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> old_value<br>    <br>    <span class="hljs-keyword">return</span> get_next_value<br></code></pre></td></tr></table></figure><hr /><p>This is not only clean but also <strong>fast</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_object_oriented_approach</span>():<br>    c = Countdown(<span class="hljs-number">1_000_000</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value = c.next_value()<br>        <span class="hljs-keyword">if</span> value == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_functional_approach</span>():<br>    get_next_value = countdown(<span class="hljs-number">1_000_000</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        value = get_next_value()<br>        <span class="hljs-keyword">if</span> value == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">5</span>]: %timeit test_object_oriented_approach()<br><span class="hljs-number">182</span> ms ± <span class="hljs-number">2.61</span> ms per loop (mean ± std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">1</span> loop each)<br><br>In [<span class="hljs-number">6</span>]: %timeit test_functional_approach()<br><span class="hljs-number">96.8</span> ms ± <span class="hljs-number">1.18</span> ms per loop (mean ± std. dev. of <span class="hljs-number">7</span> runs, <span class="hljs-number">10</span> loops each)<br></code></pre></td></tr></table></figure><p>Why?</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">9</span>]: c = Countdown(<span class="hljs-number">1_000_000</span>)<br>In [<span class="hljs-number">10</span>]: dis(c.next_value)<br>  <span class="hljs-number">6</span>           <span class="hljs-number">0</span> LOAD_FAST                <span class="hljs-number">0</span> (self)<br>              <span class="hljs-number">2</span> LOAD_ATTR                <span class="hljs-number">0</span> (n)<br>              <span class="hljs-number">4</span> STORE_FAST               <span class="hljs-number">1</span> (old_value)<br><br>  <span class="hljs-number">7</span>           <span class="hljs-number">6</span> LOAD_FAST                <span class="hljs-number">0</span> (self)<br>              <span class="hljs-number">8</span> DUP_TOP<br>             <span class="hljs-number">10</span> LOAD_ATTR                <span class="hljs-number">0</span> (n)<br>             <span class="hljs-number">12</span> LOAD_CONST               <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)<br>             <span class="hljs-number">14</span> INPLACE_SUBTRACT<br>             <span class="hljs-number">16</span> ROT_TWO<br>             <span class="hljs-number">18</span> STORE_ATTR               <span class="hljs-number">0</span> (n)<br><br>  <span class="hljs-number">8</span>          <span class="hljs-number">20</span> LOAD_FAST                <span class="hljs-number">1</span> (old_value)<br>             <span class="hljs-number">22</span> RETURN_VALUE<br></code></pre></td></tr></table></figure><p>12 instructions, 2 <code>LOAD_ATTR</code> instructions, 1<code>STORE_ATTR</code> instruction.</p><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">11</span>]: get_next_value = countdown(<span class="hljs-number">1_000_000</span>)<br>In [<span class="hljs-number">12</span>]: dis(get_next_value)<br>  <span class="hljs-number">4</span>           <span class="hljs-number">0</span> LOAD_DEREF               <span class="hljs-number">0</span> (n)<br>              <span class="hljs-number">2</span> STORE_FAST               <span class="hljs-number">0</span> (old_value)<br><br>  <span class="hljs-number">5</span>           <span class="hljs-number">4</span> LOAD_DEREF               <span class="hljs-number">0</span> (n)<br>              <span class="hljs-number">6</span> LOAD_CONST               <span class="hljs-number">1</span> (<span class="hljs-number">1</span>)<br>              <span class="hljs-number">8</span> INPLACE_SUBTRACT<br>             <span class="hljs-number">10</span> STORE_DEREF              <span class="hljs-number">0</span> (n)<br><br>  <span class="hljs-number">6</span>          <span class="hljs-number">12</span> LOAD_FAST                <span class="hljs-number">0</span> (old_value)<br>             <span class="hljs-number">14</span> RETURN_VALUE<br></code></pre></td></tr></table></figure><p>8 instructions, NO <code>LOAD_ATTR</code>, <code>STORE_ATTR</code>instructions.</p><hr /><!-- header: Contents --><ul><li>Closures</li><li>Generators👈</li><li>Coroutines</li></ul><hr /><!-- header: Generators --><p>When we define a function containing the <code>yield</code> keyword,we define a generator. Defining a generator allows the user to define a<strong>custom iterator</strong> in the style of defining afunction.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">yield</span> n<br>        n -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr /><p>We create a <strong>generator object</strong> when we call agenerator definition. The generator object can be used like anyiterator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">2</span>]: c = countdown(<span class="hljs-number">5</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">5</span><br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">4</span><br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> c:<br>   ...:     <span class="hljs-built_in">print</span>(value)<br>   ...:<br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr /><p>When we call <code>next()</code> on a generator object, it willexecute code, until it encounters a <code>yield</code> statement. The<code>yield</code> statement tells the generator object to<strong>return a value, and continue execution from here when<code>next()</code> is called again</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">2</span>]: c = countdown(<span class="hljs-number">5</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">3</span>]: <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>This executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">yield</span> n<br></code></pre></td></tr></table></figure><hr /><p>When we call <code>next()</code> on a generator object, it willexecute code, until it encounters a <code>yield</code> statement. The<code>yield</code> statement tells the generator object to<strong>return a value, and continue execution from here when<code>next()</code> is called again</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(c)<br>Out[<span class="hljs-number">4</span>]: <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>This executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">   n -= <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>   <span class="hljs-keyword">yield</span> n<br></code></pre></td></tr></table></figure><hr /><p>This is called <strong>lazy evaluation</strong>. This candramatically boost performance and reduce memory usage in someapplications. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_comments_from_file</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fp:<br>            <span class="hljs-comment"># strip whitespace</span><br>            stripped_line = line.strip()<br>            <span class="hljs-comment"># check if the line is empty after stripping whitespace</span><br>            <span class="hljs-keyword">if</span> stripped_line:<br>                <span class="hljs-comment"># check if the line is a comment</span><br>                <span class="hljs-keyword">if</span> stripped_line[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span>:<br>                    <span class="hljs-comment"># if it is, yield it</span><br>                    <span class="hljs-keyword">yield</span> stripped_line<br></code></pre></td></tr></table></figure><hr /><p>This will <strong>NOT</strong> read the whole file into memory. Onlywhen the user calls <code>next()</code> on the generator object, willthe generator read the file <strong>LINE BY LINE</strong> (with only<strong>ONE LINE</strong> of the file in memory at once), and return thenext comment line.</p><p>This is an efficient way of extracting comments from GB-sized files(such as logs).</p><hr /><h2 id="itertools">itertools</h2><p>Python provides many functions for creating an iterator from anotheriterator. For example:</p><ul><li><code>itertools.permutations(iterable [, r])</code></li><li><code>itertools.combinations(iterable, r)</code></li><li><code>itertools.product(iter1, iter2, iterN, [repeat=1])</code></li></ul><hr /><p>Widely used in algorithms:<code>itertools.permutations(iterable [,r])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> itertools<br><br><br>In [<span class="hljs-number">2</span>]: numbers = <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br><br>In [<span class="hljs-number">3</span>]: permutations_of_two_numbers_iterator = itertools.permutations(numbers, r=<span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(permutations_of_two_numbers_iterator)<br>Out[<span class="hljs-number">4</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><br>In [<span class="hljs-number">5</span>]: <span class="hljs-built_in">next</span>(permutations_of_two_numbers_iterator)<br>Out[<span class="hljs-number">5</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br><br>In [<span class="hljs-number">6</span>]: <span class="hljs-built_in">next</span>(permutations_of_two_numbers_iterator)<br>Out[<span class="hljs-number">6</span>]: (<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><hr /><p>Widely used in algorithms:<code>itertools.combinations(iterable ,r)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> itertools<br><br>In [<span class="hljs-number">2</span>]: numbers = <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)<br><br>In [<span class="hljs-number">3</span>]: <span class="hljs-keyword">for</span> first, second <span class="hljs-keyword">in</span> itertools.combinations(numbers, <span class="hljs-number">2</span>):<br>   ...:     <span class="hljs-built_in">print</span>(first, second)<br>   ...:<br><span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-number">0</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr /><p>Widely used in algorithms:<code>itertools.product(iter1, iter2, iterN, [repeat=1])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">import</span> itertools<br><br>In [<span class="hljs-number">2</span>]: first_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>In [<span class="hljs-number">3</span>]: second_list = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br>In [<span class="hljs-number">4</span>]: third_list = [<span class="hljs-literal">True</span>,<span class="hljs-literal">False</span>]<br><br>In [<span class="hljs-number">5</span>]: it = itertools.product(first_list, second_list, third_list)<br><br>In [<span class="hljs-number">6</span>]: <span class="hljs-built_in">next</span>(it)<br>Out[<span class="hljs-number">6</span>]: (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-literal">True</span>)<br>In [<span class="hljs-number">7</span>]: <span class="hljs-built_in">next</span>(it)<br>Out[<span class="hljs-number">7</span>]: (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-literal">False</span>)<br>In [<span class="hljs-number">8</span>]: <span class="hljs-built_in">next</span>(it)<br>Out[<span class="hljs-number">8</span>]: (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><hr /><!-- header: Contents --><ul><li>Closures</li><li>Generators</li><li>Coroutines👈</li></ul><hr /><!-- header: Coroutines --><p>Starting from Python 2.5, the <code>yield</code> statement can beused as an <strong>right value</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">captured_input = <span class="hljs-keyword">yield</span> value_to_yield<br></code></pre></td></tr></table></figure><p>Generators defined like this can <strong>accept sent input</strong>while providing output. These generators are called<strong>coroutines</strong>.</p><hr /><p>The concept of coroutines was proposed in the 60s, but only gainedtraction in recent years.</p><p>Coroutines can be seen as a combination of<strong>subroutines</strong> and <strong>threads</strong>.</p><ul><li>Can <strong>pause and restart</strong> during execution.</li><li>Controlled by <strong>itself</strong> instead of the operatingsystem.</li><li>Different coroutines run within a thread are<strong>concurrent</strong> instead of <strong>parallel</strong>.</li></ul><hr /><p>Simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_mean</span>():<br>    current_input = <span class="hljs-keyword">yield</span><br>    <br>    <span class="hljs-built_in">sum</span> = current_input<br>    count = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        current_input = <span class="hljs-keyword">yield</span> <span class="hljs-built_in">sum</span> / count<br>        <br>        <span class="hljs-built_in">sum</span> += current_input<br>        count += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><hr /><p>Simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">3</span>]: updater = update_mean()<br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(updater)<br></code></pre></td></tr></table></figure><p>This executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">current_input = <span class="hljs-keyword">yield</span><br></code></pre></td></tr></table></figure><p>And the coroutine waits for an input to be sent.</p><hr /><p>Send an input:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">5</span>]: updater.send(<span class="hljs-number">2</span>)<br>Out[<span class="hljs-number">5</span>]: <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure><p>The coroutine receives the input, and executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">sum</span> = current_input<br>count = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    current_input = <span class="hljs-keyword">yield</span> <span class="hljs-built_in">sum</span> / count<br></code></pre></td></tr></table></figure><p>And the coroutine waits for an input to be sent.</p><hr /><p>Send an input:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">6</span>]: updater.send(<span class="hljs-number">4</span>)<br>Out[<span class="hljs-number">6</span>]: <span class="hljs-number">3.0</span><br></code></pre></td></tr></table></figure><p>The coroutine receives the input, and executes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-built_in">sum</span> += current_input<br>    count += <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    current_input = <span class="hljs-keyword">yield</span> <span class="hljs-built_in">sum</span> / count<br></code></pre></td></tr></table></figure><p>And the coroutine waits again for an input to be sent.</p><hr /><p>More complicated example: set-associative cache simulation</p><ul><li><code>number_of_cache_sets</code> * Set<ul><li><code>number_of_ways_of_associativity</code> * Block<ul><li><code>block_size_in_bytes</code> * Byte</li></ul></li></ul></li><li>The whole set-associative cache is a coroutine receiving<code>(address, is_write)</code> tuples as input, and calculating<code>(cache_hit, writeback_address)</code> tuples as output.<ul><li>It models <strong>each set</strong> as a coroutine receiving<code>(tag, is_write)</code> tuples as input, and calculating<code>(cache_hit, writeback_address)</code> tuples as output.<ul><li>Different coroutine definitions for round-robin, LRU, etc.</li></ul></li></ul></li></ul><hr /><p>The whole set-associative cache</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cache_coroutine</span>(<span class="hljs-params">cache_set_coroutine_function, block_size_in_bytes, number_of_ways_of_associativity, number_of_cache_sets</span>):<br>    <span class="hljs-comment"># create cache_set_coroutine_list and activate each cache_set_coroutine</span><br>    cache_set_coroutine_list = [ cache_set_coroutine_function(number_of_ways_of_associativity) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number_of_cache_sets) ]<br>    <span class="hljs-keyword">for</span> cache_set_coroutine <span class="hljs-keyword">in</span> cache_set_coroutine_list:<br>        <span class="hljs-built_in">next</span>(cache_set_coroutine)<br>    <br>    <span class="hljs-comment"># get function_to_split_address and function_to_merge_address</span><br>    function_to_split_address, function_to_merge_address = get_functions_to_split_and_merge_address(<br>        block_size_in_bytes,<br>        number_of_cache_sets<br>    )<br>    <br>    <span class="hljs-comment"># receive address, is_write</span><br>    <span class="hljs-comment"># yields nothing</span><br>    address, is_write = <span class="hljs-keyword">yield</span><br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># splits address</span><br>        tag, cache_set_index, offset = function_to_split_address(address)<br>        <br>        <span class="hljs-comment"># send (tag, is_write) to the appropriate cache_set_coroutine</span><br>        cache_hit, victim_tag, writeback_required = cache_set_coroutine_list[cache_set_index].send((tag, is_write))<br>        <br>        <span class="hljs-comment"># create writeback_address if (victim_tag is not None) and writeback_required</span><br>        <span class="hljs-keyword">if</span> (victim_tag <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>) <span class="hljs-keyword">and</span> writeback_required:<br>            writeback_address = function_to_merge_address(victim_tag, cache_set_index, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            writeback_address = <span class="hljs-literal">None</span><br>        <br>        <span class="hljs-comment"># receive address, is_write</span><br>        <span class="hljs-comment"># yield cache_hit, writeback_address</span><br>        address, is_write = <span class="hljs-keyword">yield</span> cache_hit, writeback_address<br></code></pre></td></tr></table></figure><hr /><p>Cache Set with LRU replacement policy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lru_cache_set_coroutine</span>(<span class="hljs-params">associativity</span>):<br>    tag_list = [ <span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(associativity) ]<br>    dirty_bit_list = [ <span class="hljs-literal">False</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(associativity) ]<br>    <br>    indices_in_lru_order = OrderedDict()<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(associativity - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        indices_in_lru_order[index] = <span class="hljs-literal">None</span><br>    <br>    <span class="hljs-comment"># receive first tag and is_write</span><br>    tag, is_write = <span class="hljs-keyword">yield</span><br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        cache_hit = <span class="hljs-literal">False</span><br>        victim_tag = <span class="hljs-literal">None</span><br>        writeback_required = <span class="hljs-literal">False</span><br>        <br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># find tag_index</span><br>            tag_index = tag_list.index(tag)<br>            <br>            <span class="hljs-comment"># tag_index found</span><br>            cache_hit = <span class="hljs-literal">True</span><br>            <br>            <span class="hljs-keyword">if</span> is_write:<br>                dirty_bit_list[tag_index] = <span class="hljs-literal">True</span><br>            <br>            <span class="hljs-comment"># move tag_index to the end of indices_in_lru_order</span><br>            indices_in_lru_order.move_to_end(tag_index)<br>        <br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-comment"># tag_index not found</span><br>            <span class="hljs-comment"># get index_of_victim from indices_in_lru_order</span><br>            index_of_victim, _ = indices_in_lru_order.popitem(last=<span class="hljs-literal">False</span>)<br>            <br>            victim_tag = tag_list[index_of_victim]<br>            <br>            <span class="hljs-keyword">if</span> dirty_bit_list[index_of_victim]:<br>                writeback_required = <span class="hljs-literal">True</span><br>            <br>            tag_list[index_of_victim] = tag<br>            <br>            <span class="hljs-keyword">if</span> is_write:<br>                dirty_bit_list[index_of_victim] = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                dirty_bit_list[index_of_victim] = <span class="hljs-literal">False</span><br>            <br>            <span class="hljs-comment"># insert index_of_victim to the end of indices_in_lru_order</span><br>            indices_in_lru_order[index_of_victim] = <span class="hljs-literal">None</span><br>            <br>        <span class="hljs-comment"># receive tag and is_write</span><br>        <span class="hljs-comment"># yield (cache_hit, victim_tag, writeback_required)</span><br>        tag, is_write = <span class="hljs-keyword">yield</span> (cache_hit, victim_tag, writeback_required)<br></code></pre></td></tr></table></figure><hr /><ul><li>Suppose our cache has only <em>eight</em> blocks and each blockcontains <em>four</em> words.</li><li>The cache is <em>2-way</em> set associative, so there are four setsof two blocks.</li><li>The write policy is <em>write-back</em> and write-allocate.</li><li><em>LRU replacement</em> is used.</li></ul><blockquote><p>https://courses.cs.washington.edu/courses/cse378/02sp/sections/section9-3.html</p></blockquote><hr /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">3</span>]: cache = cache_coroutine(lru_cache_set_coroutine, block_size_in_bytes=<span class="hljs-number">4</span> *<br>   ...:  <span class="hljs-number">2</span>, number_of_ways_of_associativity=<span class="hljs-number">2</span>, number_of_cache_sets=<span class="hljs-number">4</span>)          <br><br>In [<span class="hljs-number">4</span>]: <span class="hljs-built_in">next</span>(cache)                                                             <br><br>In [<span class="hljs-number">5</span>]: cache.send((<span class="hljs-number">0</span>, <span class="hljs-literal">True</span>))                                                   <br>Out[<span class="hljs-number">5</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">6</span>]: cache.send((<span class="hljs-number">64</span>, <span class="hljs-literal">False</span>))                                                 <br>Out[<span class="hljs-number">6</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">7</span>]: cache.send((<span class="hljs-number">4</span>, <span class="hljs-literal">True</span>))                                                   <br>Out[<span class="hljs-number">7</span>]: (<span class="hljs-literal">True</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">8</span>]: cache.send((<span class="hljs-number">40</span>, <span class="hljs-literal">True</span>))                                                  <br>Out[<span class="hljs-number">8</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">9</span>]: cache.send((<span class="hljs-number">68</span>, <span class="hljs-literal">False</span>))                                                 <br>Out[<span class="hljs-number">9</span>]: (<span class="hljs-literal">True</span>, <span class="hljs-literal">None</span>)<br><br>In [<span class="hljs-number">10</span>]: cache.send((<span class="hljs-number">128</span>, <span class="hljs-literal">True</span>))                                                <br>Out[<span class="hljs-number">10</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-number">0</span>)<br><br>In [<span class="hljs-number">11</span>]: cache.send((<span class="hljs-number">0</span>, <span class="hljs-literal">False</span>))                                                 <br>Out[<span class="hljs-number">11</span>]: (<span class="hljs-literal">False</span>, <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Software Design</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: The Fundamentals of Writing Questions</title>
    <link href="/2022/10/26/Paper-Reading-The-Fundamentals-of-Writing-Questions/"/>
    <url>/2022/10/26/Paper-Reading-The-Fundamentals-of-Writing-Questions/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://www.wiley.com/en-us/Internet,+Phone,+Mail,+and+Mixed+Mode+Surveys:+The+Tailored+Design+Method,+4th+Edition-p-9781118456149">here</a>.</p><p>This part of the book addresses the problem of crafting surveyquestions that respondents are willing to answer and respond toaccurately. It first discusses issues to consider when designing surveyquestions, then presents the structure of a survey question anddifferent question formats, before providing specific guidelines onwording survey questions.</p><h2 id="issues-to-consider-when-designing-survey-questions">Issues toconsider when designing survey questions</h2><ul><li>What concepts to measure<ul><li>Recommended: Adopt established measures from existing surveys</li></ul></li><li>What data to collect<ul><li>Factual information: precise, readily available</li><li>Opinion: requires time to formulate, strongly influenced bycontext</li><li>Behavior: better memory of recent, memorable events compared withdistant, mundane events</li></ul></li><li>What question format to use<ul><li>Different cognitive information processing for aural and visualsurveys</li></ul></li><li>What mode to adopt<ul><li>The presence of an interviewer may speed up surveys, but may inducesocial desirability and acquiescence, leading to interviewer bias.</li><li>Lack of standardization among different interviewers may lead tointerviewer variance.</li></ul></li><li>What to modify (from existing surveys)<ul><li>no changes or only minimal changes when replicating or comparingresults<ul><li>questions should also be asked in a similar fashion</li></ul></li></ul></li><li>How to motivate respondents<ul><li>think about the cognitive process respondents go through</li><li>pay attention to the context and wording</li></ul></li></ul><h2 id="the-structure-of-a-survey-question">The structure of a surveyquestion</h2><ul><li>Question stem</li><li>Additional instructions</li><li>Answer spaces or choices</li></ul><h2 id="different-question-formats">Different question formats</h2><ul><li>Open-ended<ul><li>rich, detailed</li><li>more prone to skipping</li><li>requires lengthy data processing</li></ul></li><li>Closed-ended<ul><li>nominal or ordinal categories</li><li>set of answer choices known in advance</li><li>easy to analyze</li></ul></li><li>Partially closed-ended<ul><li>closed-ended with "other" response</li><li>respondents more likely to select the options instead of"other"</li></ul></li></ul><h2 id="specific-guidelines-on-wording-survey-questions">Specificguidelines on wording survey questions</h2><ul><li>Choose the appropriate question format.</li><li>Make sure the question applies to the respondent.</li><li>Ask one question at a time.</li><li>Make sure the question is technically accurate.</li><li>Use simple, familiar and specific words.</li><li>Use short, simple sentences that take a question form.</li><li>Avoid double negatives.</li><li>Organize questions in a more straightforward, comprehensibleway.</li></ul><p>Also sprinkled throughout the section is the notion that the craftershould get into a respondent's state of mind when crafting surveyquestions, and also test the survey questions to evaluate theirquality.</p><p>This section is very comprehensive and convincing, as the authorsupports his arguments by analyzing specific examples from actualsurveys, and also frequently quoting previous work on the topic. Fromsuch a chapter we can gain a deep understanding of the nature of surveyquestions, especially the underlying cognitive, psychology and sociologyproblems, as well as the best practices within the domain, and we canalso refer to this chapter as a guide and checklist when we craft surveyquestions ourselves.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask)</title>
    <link href="/2022/10/25/Paper-Reading-All-You-Ever-Wanted-to-Know-About-Dynamic-Taint-Analysis-and-Forward-Symbolic-Execution-but-might-have-been-afraid-to-ask/"/>
    <url>/2022/10/25/Paper-Reading-All-You-Ever-Wanted-to-Know-About-Dynamic-Taint-Analysis-and-Forward-Symbolic-Execution-but-might-have-been-afraid-to-ask/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1109/SP.2010.26">here</a>.</p><p>Forward symbolic execution and dynamic taint analysis are quicklybecoming "staple techniques in security analyses".</p><ol type="1"><li>Dynamic taint analysis runs a program and observes whichcomputations are affected by predefined taint sources such as userinput.</li><li>Dynamic forward symbolic execution automatically builds a logicalformula describing a program execution path, which reduces the problemof reasoning about the execution to logic, allowing us to reason aboutthe behavior of a program on many different inputs at one time.</li><li>The two analyses can be used in conjunction to build formulasrepresenting only the parts of an execution that depend upon taintedvalues.</li></ol><p>Forward symbolic execution:</p><ol type="1"><li>Test Case Generation (automatically generate inputs to testprograms, generate inputs that cause two implementations of the sameprotocol to behave differently)</li><li>Automatic Input Filter Generation (input filters that detect andremove exploits from the input stream)</li></ol><p>Cristian Cadar, Daniel Dunbar, and Dawson Engler. Klee: Unassistedand automatic generation of high-coverage tests for complex systemsprograms. In Proceedings of the USENIX Symposium on Operating SystemDesign and Implementation, 2008.</p><p>Cristian Cadar, Vijay Ganesh, Peter Pawlowski, David Dill, and DawsonEngler. EXE: A system for automatically generating inputs of death usingsymbolic execution. In Proceedings of the ACM Conference on Computer andCommunications Security, October 2006.</p><p>Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directedautomated random testing. In Proceedings of the ACM Conference onProgramming Language Design and Implementation, 2005.</p><p>Dynamic taint analysis:</p><ol type="1"><li>Unknown Vulnerability Detection (misuses of user input)</li><li>Automatic Network Protocol Understanding. Dynamic taint analysis hasbeen used to automatically understand the behavior of network protocolswhen given an implementation of the protocol.</li><li>Malware Analysis (analyze how information flows through a malwarebinary, explore trigger-based behavior, and detect emulators)</li></ol><p>However, there has been little effort to formally define them andsummarize critical issues that arise when applying these techniques in"typical security contexts".</p><p>The authors formalize the runtime semantics of dynamic taint analysisand forward symbolic execution by using SIMPIL (Simple IntermediateLanguage), which is "representative of internal representations used bycompilers and is powerful enough to express typical languages".</p><hr /><p>Concepts:</p><ul><li>Statements: assignments, assertions, jumps, conditional jumps.</li><li>Expressions: constants, variables, binary operators, unaryoperators, get_input.</li><li>Execution state: the list of program statements, the current memorystate, the current value for variables, the program counter, the currentstatement.</li></ul><p>Notation:</p><ul><li><span class="math inline">\(\Sigma\)</span>: list of programstatements<ul><li><span class="math inline">\(\Sigma[v_1]\)</span>: statement at <spanclass="math inline">\(pc = v_1\)</span>.</li></ul></li><li><span class="math inline">\(\mu\)</span>: memory state<ul><li><span class="math inline">\(\mu[v_1]\)</span>: memory content ataddress <span class="math inline">\(v_1\)</span></li></ul></li><li><span class="math inline">\(\Delta\)</span>: register state (valuesof all variables)<ul><li><span class="math inline">\(\Delta[x]\)</span>: value of variable<span class="math inline">\(x\)</span></li><li><span class="math inline">\(\Delta[x \leftarrow 10]\)</span>:setting the value of variable <span class="math inline">\(x\)</span> to10</li></ul></li><li><span class="math inline">\(pc\)</span>: program counter.</li><li><span class="math inline">\(\mu, \Delta \vdash e \Downarrowv\)</span>: Given memory state <span class="math inline">\(\mu\)</span>and register state <span class="math inline">\(\Delta\)</span>, thevalue of expression <span class="math inline">\(e\)</span> is <spanclass="math inline">\(v\)</span>.</li><li><span class="math inline">\(\Sigma, \mu, \Delta, pc, EXPRESSION\rightsquigarrow \Sigma, \mu&#39;, \Delta&#39;, pc&#39;,{EXPRESSION}&#39;\)</span>: Given list of program statements <spanclass="math inline">\(\Sigma\)</span>, memory state <spanclass="math inline">\(\mu\)</span>, register state <spanclass="math inline">\(\Delta\)</span>, program counter <spanclass="math inline">\(pc\)</span>, executing expression <spanclass="math inline">\(EXPRESSION\)</span> leads to new memory state<span class="math inline">\(\mu&#39;\)</span>, new register state <spanclass="math inline">\(\Delta&#39;\)</span>, new program counter <spanclass="math inline">\(pc&#39;\)</span>, and the next expression is <spanclass="math inline">\({EXPRESSION}&#39;\)</span>.</li></ul><p>Other high-level language constructs such as functions or scopes canbe easily represented using these constructs.</p><hr /><p>Dynamic taint analysis tracks values in a program dependent on dataderived from a "taint source" at runtime. As it is conducted at runtime,it can be expressed by extending SIMPIL.</p><p>Dynamic taint analysis is conducted in different ways (i.e., underdifferent "taint policies") for different applications. The differenceslie in "how new taint is introduced to a program", "how taint propagatesas instructions execute", and "how taint is checked during execution".The author presents the example of the "tainted jump policy" for attackdetection, points out several challenges it faces, and analyzes theproposed solutions.</p><ul><li>"Distinguishing between memory addresses and cells is not alwaysappropriate". An alternative "tainted addresses policy" could be used,but this may also overtaint.</li><li>Information flow can occur through control dependencies in additionto dataflow dependencies. This requires "reasoning about multiplepaths", while pure dynamic taint analysis "executes on a single path ata time". Solutions include "supplementing dynamic analysis with staticanalysis" and "using heuristics".</li><li>Taint is only added and never removed (i.e., "sanitized"), leadingto the problem of "taint spread", reducing precision. Well-knownconstant functions (i.e. using XOR to zero out registers in x86 code)can be checked. In addition, we can consider the outputs of somefunctions like cryptographic hash functions as untainted, due to limitedinfluence of input on output. This can be quantified (Newsome et al.) toautomatically recognize such cases. Furthermore, values can be untainted"if the program logic performs sanitization itself" (e.g., index boundschecking).</li></ul><p>In conclusion, this paper is an useful introductory paper in forwardsymbolic execution and dynamic taint analysis, and I have mainly learnedthe following two things from the paper:</p><ul><li>The idea of formalizing runtime semantics using RISC-likebytecode</li><li>An introduction to dynamic taint analysis - what it is, what it cando, and what challenges it faces</li></ul><hr /><p>Feedback from the Class Discussion</p><ul><li>What is the difference between a statement and an expression? Astatement can modify program state when it is executed, while anexpression doesn't modify program state.</li><li>In the formalism of SIMPIL, we determine which expression toevaluate by <strong>pattern-matching the rule</strong>.</li><li>LLVM has a dataflow sanitization pass, which may be useful forimplementing taint analysis.</li><li>Dynamic program analysis only looks at a single path. If we are to<strong>prove something about a program</strong>, static programanalysis would be a better direction.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: ReCrash: Making Software Failures Reproducible by Preserving Object States</title>
    <link href="/2022/10/25/Paper-Reading-ReCrash-Making-Software-Failures-Reproducible-by-Preserving-Object-States/"/>
    <url>/2022/10/25/Paper-Reading-ReCrash-Making-Software-Failures-Reproducible-by-Preserving-Object-States/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1007/978-3-540-70592-5_23">here</a>.</p><h1 id="background">Background</h1><p>Reproduction is key to finding and fixing software problems andverifying proposed solutions, but reproduction can be difficult.</p><ul><li>Nondeterminism: A problem may depend on timing (e.g., contextswitching), memory layout (e.g., hash codes), or random numbergenerators.</li><li>Remote detection: A problem may be discovered by someone other thanthe developer, and it may depend on implicit program inputs such as userGUI actions, environment variables, the state of the file system,operating system behavior, etc. This information may be easy to miss,difficult to collect, or confidential.</li><li>Test case complexity: The exposing execution might be complex, andthe buggy method might be called multiple times before the bug istriggered.</li></ul><hr /><h1 id="proposed-solution-recrash">Proposed Solution: ReCrash</h1><p>ReCrash maintains a <strong>shadow stack</strong> with copies of thereceiver and arguments to each method during execution of the targetprogram.</p><ul><li>Several copy strategies</li><li>Several optimizations</li></ul><p>When the program crashes, ReCrash serializes the shadow stack, andgenerates <strong>unit tests</strong> by calling <strong>each</strong>method on the shadow call stack with their receiver and arguments.</p><ul><li>Calling the method at top of the call stack may not provide enoughcontext.</li><li>Calling a method closer to the bottom provides more context, but isless likely to reproduce the original failure.</li></ul><hr /><h1 id="proposed-solution-recrash-1">Proposed Solution: ReCrash</h1><p>Assumption:</p><ul><li>It is possible to reproduce many failures with only some of theinformation available on entry to the methods on the stack at the timeof the failure.<ul><li>Many bugs are dependent on small parts of the heap.</li><li>Good object-oriented style encapsulates important state nearby.</li><li>Good object-oriented style avoids excessive use of globals.</li></ul></li><li>ReCrash has access to and will store any parts of the global stateor environment that are passed as method arguments.</li></ul><p><strong>Question: What if global state is read or written in themethod?</strong></p><hr /><h1 id="monitoring-phase">Monitoring Phase</h1><ul><li>Several copy strategies</li><li>Several optimizations<ul><li>Monitoring fewer methods</li><li>Second-chance mode</li></ul></li></ul><hr /><h1 id="copy-strategies">Copy Strategies</h1><p>An argument may be side-effected between the method entry and thepoint of the failure in the method. Copying strategies:</p><ul><li>Reference: copying only the reference to the argument.</li><li>Shallow: copying the argument itself.</li><li>Depth-i: copying all the state reachable with <spanclass="math inline">\(\le i\)</span> dereferences from theargument.</li><li>Deep-copy: copying the entire state.</li></ul><p>Options:</p><ul><li>Used-fields: deeper copying on fields that are used (read orwritten) in the method.</li></ul><p>ReCrash always uses the reference strategy for immutableparameters.</p><hr /><h1 id="monitoring-fewer-methods">Monitoring Fewer Methods</h1><p>Dosen't monitor methods that cannot be used in the generated tests,or are unlikely to expose problems.</p><ul><li>non-public methods</li><li>empty methods</li><li>simple methods such as getters and setters (no more than 6opcodes)</li></ul><hr /><h1 id="second-chance-mode">Second-chance Mode</h1><ul><li>ReCrash initially monitors no method calls.</li><li>Each time a failure occurs, ReCrash enables method argumentmonitoring for all methods found on the stack trace.</li><li>Efficient, but requires a failure to be repeated twice. If thedeveloper doesn't mind missing the first time a failure happens, and thefailure occurs relatively often, second chance mode is a good fit.</li></ul><p><strong>Question: could recording all inputs provided to the programbe used in tandom with second-chance mode (such that the failure isprobable to happen the second time)?</strong></p><hr /><h1 id="test-generation-phase">Test Generation Phase</h1><p>ReCrash generates a test for each of the methods in the shadowstack.</p><ul><li>Restores the state of the arguments that were passed to amethod.</li><li>Invokes the method the same way it was invoked in the originalexecution. Only tests that end with the same exception as the originalfailure are saved.</li><li>Storing more than one test that ends with the same failure isuseful. Some tests reproduce a failure, but would not help the developerunderstand, fix, or check her solution.</li></ul><hr /><h1 id="experimental-study">Experimental Study</h1><p>Subject programs:</p><ul><li>Javac-jsr308: the OpenJDK Java compiler, extended with JSR308("Annotations on Java Types"), with four crashes provided by thedevelopers.</li><li>SVNKit: a subversion client, with three crash examples from bugreports.</li><li>Eclipsec: a Java compiler included in the Eclipse JDT, with a crashfound in the Eclipse bug database.</li><li>BST: a toy subject program used by Csallner in evaluating CnC, withthree crashes found by CnC.</li></ul><hr /><h1 id="experimental-study-1">Experimental Study</h1><p>For each subject program:</p><ul><li>Run PIDASA for parameter immutability classification.</li><li>For different argument copying strategies, with and withoutsecond-chance mode:<ul><li>Run ReCrash on inputs that made the subject programs crash.</li><li>Count how many test cases reproduced each crash.</li></ul></li></ul><p><strong>Question: how useful would ReCrash be in reality where it isunknown whether the subject projects could crash, and which inputs wouldmake the subject programs crash?</strong></p><hr /><h1 id="experimental-study-2">Experimental Study</h1><p>Research questions:</p><ul><li>How reliably can ReCrashJ reproduce crashes?</li><li>What is the size of the stored deep copy of the shadow stack?</li><li>Are the tests generated by ReCrash useful for debugging?<ul><li>Like a <strong>case study</strong>: an analysis of two crashes, andcomments from developers</li></ul></li><li>What is the overhead (time and memory) of running ReCrash?</li></ul><p>Aspects assessed:</p><ul><li>different argument copying strategies</li><li>with and without second-chance mode</li></ul><hr /><h1 id="how-reliably-can-recrash-reproduce-crashes">How reliably canReCrash reproduce crashes?</h1><p>ReCrash was able to reproduce the crash in all cases.</p><ul><li>For some crashes, every candidate test case reproduces thecrash.</li><li>For other crashes, only a subset of the generated test casesreproduces the crash.</li></ul><p>In most cases, simply copying references is enough to reproducecrashes. In other cases, using the shallow copying strategy withused-fields was necessary.</p><hr /><h1id="what-is-the-size-of-the-stored-deep-copy-of-the-shadow-stack">Whatis the size of the stored deep copy of the shadow stack?</h1><figure><imgsrc="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/subject_programs_and_crashes_used_in_our_experimental_study.png"alt="Subject Programs and Crashes Used in our Experimental Study" /><figcaption aria-hidden="true">Subject Programs and Crashes Used in ourExperimental Study</figcaption></figure><p><strong>Question: why isn't it compared with the program size and theprogram memory usage?</strong></p><hr /><h1 id="an-analysis-of-two-crashes">An analysis of two crashes</h1><p>Eclipsec bug e1:</p><ul><li>Eclipsec crashes in callee <code>canBeInstantiated</code> because anearlier if statement in the caller <code>resolveType</code> failed toset a boolean flag <code>hasError</code> to true.</li><li>The test case for <code>canBeInstantiated</code> will reproduce thecrash, but is not helpful.</li><li>Demonstrates importance of generating tests for multiple methods onthe stack.</li></ul><p>Javac-jsr308 bug j4:</p><ul><li>Compiling source code containing an annotation with too manyarguments results in an index-out-of-bounds exception in method<code>visitMethodInvocation</code>.</li><li>The generated test does not require the whole source code andencodes only the necessary minimum to reproduce the crash.</li><li>Useful when the compiler crash happens in the field, and the usercannot provide the entire source code for debugging.</li></ul><hr /><h1 id="comments-from-developers">Comments from Developers</h1><p>We gave the tests for j1-4 to two Javac-jsr308 developers and askedfor comments about the tests' usefulness, receiving positiveresponses.</p><ul><li>I often have to climb back up through a stack trace when debugging.ReCrash seems to generate a test method for multiple levels of thestack, making it useful.</li><li>I find that you wouldn't have to wait for the crash to occur againuseful.</li><li>When I set a break point, the break point maybe be executed multipletimes before the error. Using ReCrash, I was able to jump (almostdirectly) to the necessary breakpoint.</li></ul><p><strong>Question: Why only analyze two crashes and ask only twodevelopers?</strong></p><hr /><h1 id="what-is-the-overhead-time-and-memory-of-running-recrash">What isthe overhead (time and memory) of running ReCrash?</h1><h2 id="time-overhead">Time overhead</h2><p>Non second-chance mode:</p><ul><li>Copying only the references can be expensive (11%-42%), and shallowcopying with used-fields is similar (13%–60%). Usable for in-housetesting.</li><li>Deep copying is completely unusable (12,000%-638,000%).</li></ul><p>Second-chance mode:</p><ul><li>A barely noticeable 0%–1.7% under copying only the references andshallow copying with used-fields, after a crash has already beenobserved.</li></ul><hr /><h1 id="what-is-the-overhead-time-and-memory-of-running-recrash-1">Whatis the overhead (time and memory) of running ReCrash?</h1><h2 id="memory-overhead">Memory overhead</h2><p>Non second-chance mode:</p><ul><li>0.2M–4.7M (2.6%-90.3%) under shallow copying with used-fields.</li></ul><p>Second-chance mode:</p><ul><li>negligible</li></ul><hr /><h1 id="conclusions">Conclusions</h1><p>ReCrashJ is usable in real software deployment</p><ul><li>Simple to implement</li><li>Scalable</li><li>Generates simple, helpful test cases that effectively reproducefailures</li><li>Time and memory overhead (13%–60%, 2.6%-90.3%) under nonsecond-chance mode and shallow copying with used-fields usable forin-house testing</li><li>Extremely efficient under second-chance mode</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Evolutionary Generation of Whole Test Suites</title>
    <link href="/2022/10/24/Paper-Reading-Evolutionary-Generation-of-Whole-Test-Suites/"/>
    <url>/2022/10/24/Paper-Reading-Evolutionary-Generation-of-Whole-Test-Suites/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1109/QSIC.2011.19">here</a>.</p><h1 id="background">Background</h1><p>Automatically deriving test cases for realistically sizedprograms:</p><ul><li>Select one coverage goal (e.g., program branch) at a time, andderive a test case that exercises this particular goal.<ul><li>Solving path constraints generated with symbolic execution / dynamicsymbolic execution</li><li>Meta-heuristic search techniques</li><li>Mutation testing</li></ul></li><li>Alternative approaches not directly aimed to achieve code coverage<ul><li>Randoop<ul><li>incrementally generate sequences of function calls to find buggytest sequences</li><li>requires automated oracles (e.g. developer-written assertions andexceptions)</li></ul></li></ul></li></ul><hr /><h1 id="problems">Problems</h1><p>Many coverage goals are unreachable.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt;= values.length) &#123;<br>        resize();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (size &lt; values.length) &#123;<br>        values[size++] = x;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// UNREACHABLE</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="problems-1">Problems</h1><p>Some coverage goals are more difficult to satisfy than others.</p><p>The order of coverage goals is important: a lucky choice can resultin a good test suite, while an unlucky choice can result in a waste ofresources.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt;= values.length) &#123;<br>        <span class="hljs-comment">// HARD</span><br>        resize();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// EASY</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (size &lt; values.length) &#123;<br>        values[size++] = x;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="problems-2">Problems</h1><p>Satisfying a particular coverage goal frequently entails satisfyingfurther coverage goals by accident.</p><p>The order of coverage goals is important.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// May imply coverage in `push` and `resize`</span><br>        <span class="hljs-keyword">return</span> values[size];<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmptyStackException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h1 id="our-solution-evosuite">Our Solution: EvoSuite</h1><ul><li>Optimize an entire test suite at once instead of consideringdistinct test cases.</li><li>Evolve a population of test suites towards satisfying a coveragecriterion.</li><li>Assume automated oracles are not available, and require the outputsof the test cases to be manually verified.<ul><li>The generated test suites should be of manageable size.</li></ul></li></ul><p>Solves the problem of:</p><ul><li>difficult and unreachable coverage goals</li><li>order of coverage goals</li><li>accidentally satisfying further coverage goals</li></ul><hr /><h1 id="our-solution-evosuite-1">Our Solution: EvoSuite</h1><p>Questions:</p><ul><li>We are interested in sequences in OOP. Should coverage in terms of anew ordering seen in the last <span class="math inline">\(n\)</span>function calls in the sequence should make more sense? (Praveen)</li><li>It seems like Evosuite offloads the responsibility of adding incorrect assertions to the developers. How easy is it for the developersto do this, especially when compared with manually writing all of thetest suite? (Shizuko, ToTo, Larry)</li></ul><hr /><h1 id="evosuite-modeling">EvoSuite Modeling</h1><p>Population 1 .. M Test Suite 1 .. N Test Case 1 .. L Statement</p><p>Four types of statements are modeled.</p><ul><li>Primitive statements: numeric variables (e.g.<code>int var0 = 54;</code>)</li><li>Constructor statements: new instances of a class (e.g.<code>Stack var1 = new Stack();</code>). All parameters of theconstructor call have to be values of previous statements.</li><li>Field statements: public fields of objects (e.g.<code>int var2 = var1.size;</code>). If the field is non-static, thenthe source object of the field has to be a value of a previousstatement.</li><li>Method statements: public methods of objects (e.g.<code>int var3 = var1.pop();</code>). The source object and allparameters have to be values of previous statements.</li></ul><hr /><h1 id="evosuite-modeling-1">EvoSuite Modeling</h1><p>The set of available classes, their public constructors, methods, andfields are extracted from the given software under test.</p><p>An optimal solution is a test suite that covers all the feasiblebranches/methods and is minimal in the number of statements.</p><hr /><h1 id="evosuite-process-overview">EvoSuite Process Overview</h1><ul><li>Randomly generate a set of initial test suites.</li><li>Evolve using evolutionary search towards satisfying a coveragecriterion.</li><li>Minimize the best resulting test suite.</li></ul><p>Questions:</p><ul><li>How are test suites randomly generated? The author discusses"sampling". Where are we sampling from? (Larry, Jifeng)</li></ul><hr /><h1 id="evolutionary-search">Evolutionary Search</h1><ul><li>Test Suite Fitness Function</li><li>Crossover</li><li>Accepting the Mutated Offspring</li><li>Bloat Control</li></ul><hr /><h1 id="test-suite-fitness-function">Test Suite Fitness Function</h1><p>Covering all branches <span class="math inline">\(B\)</span> andmethods <span class="math inline">\(M\)</span> of a program.</p><ul><li>To estimates how close a test suite <spanclass="math inline">\(T\)</span> is to covering all branches <spanclass="math inline">\(B\)</span> of a program, for each branch <spanclass="math inline">\(b\)</span>, <strong>minimal branchdistance</strong> <span class="math inline">\(d_{min}(b, T)\)</span> ismeasured. If the branch predicate is <span class="math inline">\(x \ge10\)</span>, and during execution, <span class="math inline">\(x ==5\)</span>, then the minimal branch distance is <spanclass="math inline">\(10 - 5 = 5\)</span>.</li><li>The minimal branch distance is then normalized to get the<strong>branch distance</strong> <span class="math inline">\(d(b, T) =f(d_{min}(b, T))\)</span>, where <span class="math inline">\(f(x) =\frac{x}{x + 1}\)</span>.</li></ul><p><span class="math inline">\(fitness(T) = |M| - |M_T| + \sum_{b \inB}{d(b, T)}\)</span></p><p>If execution exceeds a time limit of 5 minutes, maximum fitness isautomatically assigned.</p><hr /><h1 id="test-suite-fitness-function-1">Test Suite Fitness Function</h1><p>Questions:</p><ul><li>What does branch distance actually mean? Why do we use it? (Eric,Rut, Yayu, Udit, Jifeng)</li><li>Doesn't <span class="math inline">\(\sum_{b \in B}{d(b, T)}\)</span>already consider that branch distances are maximal in unvisited methods?Why do we need an additional <span class="math inline">\(|M| -|M_T|\)</span> term? Furthermore, different methods could have adifferent number of branches. Should the branch distance sum for allbranches within a method be normalized? (Jifeng)</li></ul><hr /><h1 id="crossover">Crossover</h1><p>Rank selection based on the fitness function is used to select twoparent test suites <span class="math inline">\(P_1\)</span> and <spanclass="math inline">\(P_2\)</span> for crossover. In case of ties,smaller test suites are assigned better ranks.</p><p>During crossover:</p><ul><li>a random value <span class="math inline">\(\alpha\)</span> is chosenfrom <span class="math inline">\((0, 1)\)</span></li><li>the first offspring test suite <spanclass="math inline">\(O_1\)</span> will contain the first <spanclass="math inline">\(\alpha |P_1|\)</span> test cases from <spanclass="math inline">\(P_1\)</span> and the last <spanclass="math inline">\((1 - \alpha)|P_2|\)</span> test cases from <spanclass="math inline">\(P_2\)</span></li><li>the second offspring test suite <spanclass="math inline">\(O_2\)</span> will contain the first <spanclass="math inline">\(\alpha |P_2|\)</span> test cases from <spanclass="math inline">\(P_2\)</span> and the last <spanclass="math inline">\((1 - \alpha)|P_1|\)</span> test cases from <spanclass="math inline">\(P_1\)</span></li><li>because test cases are independent, <spanclass="math inline">\(O_1\)</span> and <spanclass="math inline">\(O_2\)</span> will always be valid</li></ul><hr /><h1 id="mutation">Mutation</h1><p>The two offspring test suites <spanclass="math inline">\(O_1\)</span> and <spanclass="math inline">\(O_2\)</span> are then mutated.</p><p>When a test suite T is mutated, each of its <strong>testcases</strong> is mutated with probability <spanclass="math inline">\(\frac{1}{|T|}\)</span>.</p><p>If a test case <span class="math inline">\(t\)</span> is mutated,<strong>remove statements</strong>, <strong>change statements</strong>,and <strong>insert statements</strong> are each applied with probability<span class="math inline">\(\frac{1}{3}\)</span>. Then, a number of newrandom test cases are added to <spanclass="math inline">\(T\)</span>.</p><hr /><h1 id="remove-statements">Remove Statements</h1><ul><li>If a test case <span class="math inline">\(t\)</span> contains <spanclass="math inline">\(n\)</span> statements, each statement is removedwith probability <span class="math inline">\(\frac{1}{n}\)</span>.</li><li>If the removed statement <span class="math inline">\(s_i\)</span> issubsequently used by <span class="math inline">\(s_j (j &gt;i)\)</span>, try to replace this use with another statement before <spanclass="math inline">\(s_j\)</span>.<ul><li>If this is not possible, recursively remove <spanclass="math inline">\(s_j\)</span>.</li></ul></li><li>If all statements have been removed from <spanclass="math inline">\(t\)</span>, remove <spanclass="math inline">\(t\)</span> from <spanclass="math inline">\(T\)</span>.</li></ul><hr /><h1 id="change-statements">Change Statements</h1><ul><li>If a test case <span class="math inline">\(t\)</span> contains <spanclass="math inline">\(n\)</span> statements, each statement is changedwith probability <span class="math inline">\(\frac{1}{n}\)</span>.</li><li>If the changed statement <span class="math inline">\(s_i\)</span> isa primitive statement, its numeric value is changed by a randomvalue.</li><li>Otherwise, a method, field, or constructor with the same return typeis randomly chosen.</li></ul><hr /><h1 id="insert-statements">Insert Statements</h1><ul><li>With probability <span class="math inline">\(p\)</span>, a newstatement is inserted at a random position in the test case.</li><li>With probability <span class="math inline">\(p^2\)</span>, a secondstatement is inserted, and so on.</li></ul><hr /><p>Questions:</p><ul><li>What are the justifications for the probabilities? (Kevin)</li><li>Can we change the probabilities used in the mutation and insertionby using method calls they kept track of and variables generated in eachiteration? (Joyce)</li><li>When deleting, if the statement is chosen from the beginning fewstatements, is there a high probability that many/multiple followingstatements would be removed? Because an initial statement usually has ahigher probability of containing an initialization/declaration function.(Rut)</li><li>Why is the probability of inserting the first, second, etc.statement different? This is not the case with remove statements andchange statements. (Jifeng)</li><li>To mutate and generate test cases, the GA algorithm should haveknowledge of the programming language constructs, fields &amp; methodsof the software under test, etc. Does this require a significantengineering effort? (Udit)</li></ul><hr /><h1 id="accepting-the-mutated-offspring">Accepting the MutatedOffspring</h1><p>The coverage achieved by the Mutated Offspring is measured by theTest Suite Fitness Function.</p><p>Conditions for accepting the mutated offspring:</p><ul><li>The coverage achieved by the Mutated Offspring <strong>exceeds thatachieved by its parents</strong>, or is on par with that achieved by itsparents, <strong>and that the mutated offspring areshorter</strong>.</li><li>Their length do not exceed <strong>twice</strong> that of the TestSuite with the best coverage in the community.</li></ul><hr /><h1 id="accepting-the-mutated-offspring-1">Accepting the MutatedOffspring</h1><p>Questions:</p><ul><li>Are the parents removed before adding the children? (Rut)</li><li>Compared with the single branch strategy, only the crossover isdifferent, and the mutation is done in the same way. (Tarcisio)</li></ul><hr /><h1 id="bloat-control">Bloat Control</h1><p>A <strong>variable size representation</strong> could lead to bloat,where <strong>small negligible improvements in the fitness value areobtained with larger solutions.</strong></p><p>This is a <strong>very common problem in GeneticProgramming</strong>.</p><p>The following measures are used for bloat control:</p><ul><li>Limit the maximum number <span class="math inline">\(N\)</span> oftest cases within a test suite and the maximum number of statements<span class="math inline">\(L\)</span> within a test case. (still needto choose comparatively larger <span class="math inline">\(N\)</span>and <span class="math inline">\(L\)</span> and then reduce their lengthduring/after the search to dramatically boost coverage)</li><li>Crossover selection policy</li><li>Mutated offspring acception policy</li></ul><hr /><h1 id="bloat-control-1">Bloat Control</h1><p>Questions:</p><ul><li>Does coverage-guided fuzzing, which uses a variant of GeneticProgramming, suffer from bloat? If so, could any measures be applied tosolve this problem? (Jifeng)</li><li>How to reduce the length during/after the search? (Yayu,Jifeng)</li></ul><hr /><h1 id="evaluation">Evaluation</h1><p>EvoSuite is compared with the traditional single branch approach ontop of EvoSuite infrastructure.</p><ul><li>Offspring is generated using the crossover function, but isconducted on two sequences of statements.<ul><li>Because there are dependencies between statements, the statements ofthe second part are appended one at a time, trying to satisfydependencies with existing values, generating new values ifnecessary.</li></ul></li><li>The traditional approach level plus normalized branch distancefitness function is used.</li></ul><p>The two approaches are compared on five open source libraries and asubset of an industrial case study project previously used by Arcuri etal. The units are testable without complex interactions with externalresources and are not multithreaded.</p><hr /><h1 id="evaluation-1">Evaluation</h1><p>"Best practices" based on past experience are used for EvoSuite:</p><ul><li>Population size: 80</li><li>Maximum test suite size <span class="math inline">\(N =100\)</span></li><li>Maximum test case size <span class="math inline">\(L =80\)</span></li><li>The initial test suites are generated with 2 test cases each</li><li>Initial probability for test case insertion: 0.1</li><li>Crossover probability: 3 / 4</li><li>Initial probability for statement insertion: 0.5</li></ul><hr /><h1 id="evaluation-2">Evaluation</h1><p>The search operators for test cases make use of only the typeinformation in the test cluster, and so difficulties can arise whenmethod signatures are imprecise. To overcome this problem for containerclasses, we always put Integer objects into container classes, and castreturned Object instances back to Integer.</p><p>As the length of test cases can vary greatly and longer test casesgenerally have higher coverage, we decided to take the number ofexecuted statements as execution limit. The search is performed untileither a solution with 100% branch coverage is found, or <spanclass="math inline">\(k = 1,000,000\)</span> statements have beenexecuted as part of the fitness evaluations.</p><hr /><h1 id="evaluation-3">Evaluation</h1><p>Questions:</p><ul><li>Why not compare EvoSuite to any other (non genetic-testing based)approach? (Zack)</li><li>Why "the units are testable without complex interactions withexternal resources and are not multithreaded"? (Marie)</li><li>Is there a justification for these "best practices"? (Praveen,Kevin, Madonna, Jifeng)</li><li>Do the "best practices" overfit the 5 open-source libraries?(Joyce)</li><li>Why the choice of an Integer? And does it work in practice? Giventhat the internals of the program might be expecting something else?(Rut)</li></ul><hr /><h1 id="results">Results</h1><ul><li>Whole test suite generation achieves higher coverage than singlebranch test case generation.</li><li>Whole test suite generation produces smaller test suites than singlebranch test case generation.</li></ul><hr /><h1 id="results-1">Results</h1><p>Questions:</p><ul><li>While we have focused on branch coverage in this paper, the findingsalso carry over to other test criteria is an unwarranted extrapolation.(Zack)</li><li>Evosuite claims that the test cases are smaller, but how muchsmaller? (not obvious from Figure 7) (ToTo)</li><li>High coverage test suite does not necessary mean high bug-findingabilities.</li><li>How does the performance compare to other tools? (ToTo, Praveen,Kevin, Madonna)</li><li>The authors did not evaluate EvoSuite against a human in softwareengineering. Whether EvoSuite will improve the ability to test softwarefrom a software developer's point of view is unknown. (Marie)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Personal Website Design Considerations</title>
    <link href="/2022/10/20/Personal-Website-Design-Considerations/"/>
    <url>/2022/10/20/Personal-Website-Design-Considerations/</url>
    
    <content type="html"><![CDATA[<h1 id="hosting">Hosting</h1><p>We host our personal website on <ahref="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">GitHubPages</a>, a static site hosting service. Considerations:</p><ul><li>No need to buy/rent and set up infrastructure, such as ElasticComputing instances, Domain Name, Content Distribution Network, LoadBalancer, DDoS protection</li><li>Hosted directly from GitHub repository</li><li>Our personal website meets its limitations:<ul><li>Non-commercial.</li><li>No confidential information.</li><li>Published GitHub Pages sites may be no larger than 1 GB.</li><li>GitHub Pages sites have a soft bandwidth limit of 100 GB permonth.</li><li>GitHub Pages sites have a soft limit of 10 builds per hour.</li></ul></li></ul><p>Implications:</p><ul><li>Static pages.</li><li>Limit content of our personal website to text and lightweightmultimedia, such as vector graphics and vector PDFs. Use raster graphicssparingly, and avoid heavyweight multimedia such as audio andvideo.</li><li>Do not rebuild too frequently (&gt;10 builds per hour).</li></ul><h1 id="framework">Framework</h1><p>Our personal website uses the <a href="https://hexo.io/">Hexo</a>blog framework. Considerations:</p><ul><li>Support for GitHub Flavored Markdown.</li><li>Easy-to-use CLI.</li><li>One-command deploy to GitHub Pages.</li><li>Support for two types of pages (Posts and Pages), adequate for apersonal website.</li><li>Huge library of spectacular, feature-packed and customizablethemes.</li></ul><h1 id="theme">Theme</h1><p>Our personal website uses the <ahref="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a> theme forHexo. Considerations:</p><ul><li>Appropriate Features<ul><li>Support for <ahref="https://github.com/YunYouJun/yunyoujun.github.io/issues/105">manythird-party commenting systems</a>.</li><li>Mathjax support, renders equations like <spanclass="math inline">\(E=mc^2\)</span>.</li><li>Mermaid support.</li><li>Social network links.</li></ul></li><li>Extremely Detailed Documentation.</li><li>Actively Maintained.</li></ul><h1 id="our-considerations-when-writing-posts">Our Considerations WhenWriting Posts</h1><ul><li>Make the Markdown file as self-contained as possible. This includes:<ul><li>Using third-party pictures from the Internet with stable URLswhenever possible.</li><li>Utilize fluid's support for Mermaid, and use Mermaid to describe andrender in real-time diagrams such as Flowcharts, Sequence Diagrams,Class Diagrams, State Diagrams, and Mindmaps whenever possible, asopposed to including diagrams generated using other tools.</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Reference</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Feedback-Directed Random Test Generation</title>
    <link href="/2022/10/18/Paper-Reading-Feedback-Directed-Random-Test-Generation/"/>
    <url>/2022/10/18/Paper-Reading-Feedback-Directed-Random-Test-Generation/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1109/ICSE.2007.37">here</a>.</p><h1 id="overview">Overview</h1><p>The authors present Randoop, a feedback-directed random unit testgenerator for object-oriented programs which generates sequences ofmethod calls that create and mutate objects, and uses feedback obtainedfrom executing the sequences to guide the search towards newsequences.</p><h1 id="logic-of-randoop">Logic of Randoop</h1><p>Randoop builds sequences incrementally starting from an empty set ofsequences. In each iteration, it generates and executes a newsequence.</p><h2 id="sequence-generation">Sequence Generation</h2><p>First, it selects a method randomly among the public methods ofclasses.</p><p>Second, it finds arguments to provide to the method.</p><ul><li>If an argument is a primitive type, select a primitive value from afixed pool of values.</li><li>If an argument is a reference type, select an extensible value ofthe corresponding type from a previously generated sequence in <spanclass="math inline">\(nonErrorSeqs\)</span> and put the previousgenerated sequence into a temporary list if possible, or select nullotherwise.</li></ul><p>Third, a new sequence is formed by concatenating the sequences in thetemporary list and the randomly selected method.</p><p>Fourth, the new sequence is checked whether it has been generatedbefore. If so, the process is repeated.</p><p>Furthermore, the authors considers that repeated calls to a methodmay increase code coverage (e.g. reach code that increases the capacityof a container object, or reach code that goes down certain branches).Thus, with a probability <span class="math inline">\(p = 0.1\)</span>,instead of appending a single call of a chosen method, a maximum of<span class="math inline">\(N = 100\)</span> calls are appended.</p><h2 id="sequence-execution">Sequence Execution</h2><p>After a new sequence is generated, each method call in the sequenceis executed, and after each call, contracts are checked.</p><p>Default contracts checked by Randoop include:</p><ul><li>method throws no NullPointerException if no input parameter wasnull</li><li>method throws no AssertionError</li><li>o.equals(o) returns true and throws no exception</li><li>o.hashCode() throws no exception</li><li>o.toString() throws no exception</li></ul><p>If at least one contract is violated, the sequence is put in <spanclass="math inline">\(errorSeqs\)</span>, and no values within thesequence can be extended. If all contracts are not violated, thesequence is put in <span class="math inline">\(nonErrorSeqs\)</span>,and all values within the sequence are checked whether they can beextended. If the value has been encountered before, is null, or anexception occurs when executing the sequence leading to the value, thevalue cannot be extended.</p><h1 id="experimental-study">Experimental Study</h1><p>The authors evaluate the effectiveness of Randoop through threeexperiments.</p><ol type="1"><li>Comparing the basic block and predicate coverage of Randoop and fivesystematic input generation techniques on four container data structuresused previously to evaluate these systematic input generationtechniques.</li><li>Comparing Randoop with JPF (a systematic testing technique) andundirected random testing on 14 widely-used libraries.</li><li>A case study using Randoop to find regression errors betweendifferent implementations of the Java JDK.</li></ol><p>The experimental results strongly suggest that Randoop outperformssystematic and undirected random test generation in both coverage anderror detection.</p><h1 id="personal-thoughts">Personal Thoughts</h1><ol type="1"><li>In my opinion, a key advantage of Randoop is the "sparse, globalsampling" that it performs, which "retains the benefits of randomtesting (scalability, simplicity of implementation)", while avoidingundirected random testing's pitfalls (generation of redundant ormeaningless inputs), and is better adapted to large-scale library codethan the "dense, local sampling" of systematic test generation.</li><li>The sequences Randoop builds are akin to seeds in coverage-guidedfuzzing, and I believe the efficiency and effectiveness of Randoop maybe further boosted by applying a power schedule to the built sequences,much like applying a power schedule to the seeds in coverage-guidedfuzzing.</li><li>The built sequences could possibly have overlapping prefixes. Wouldusing a tree structure be better than storing each sequence on itsown?</li><li>Randoop only supports a limited number of contracts, and itserror-detection ability is rather weak. It may be appropriate on librarycode filled with assertions and checks, but may not work well on clientcode where these may be sparse.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Software tools to facilitate research programming</title>
    <link href="/2022/10/18/Paper-Reading-Software-tools-to-facilitate-research-programming/"/>
    <url>/2022/10/18/Paper-Reading-Software-tools-to-facilitate-research-programming/</url>
    
    <content type="html"><![CDATA[<p>This is a paper recommended to me <ahref="/2023/10/10/Conversation-with-Prof-Margo-Seltzer/">by MargoSeltzer during a conversation</a>. The original paper can be found <ahref="http://users.csc.calpoly.edu/~dekhtyar/401-Fall2016/papers/guo_phd_dissertation.pdf">here</a>.</p><h1 id="definition-and-ubiquity-of-research-programming">Definition andUbiquity of Research Programming</h1><p>Research programming is a unique form of programming where theprimary objective is to derive insights from data. It's a widespreadactivity. Not only is it crucial for academic advancements acrossvarious disciplines including natural sciences, engineering, and socialsciences, but it also extends beyond academia. By some estimations, thenumber of individuals engaged in research programming dwarfs the numberof professional software developers, suggesting its vast scale andsignificance. Moreover, even professionals in fields like science,engineering, business, finance, public policy, and journalism engage inresearch programming.</p><h1 id="challenges-in-research-programming">Challenges in ResearchProgramming</h1><h2 id="data-management-and-provenance.">Data Management andProvenance.</h2><ul><li>Keeping track of where each piece of data originates and ensuring itremains up-to-date is crucial. This process can be tedious anddifficult, especially when large amounts of data are involved.</li><li>Organizing, naming, and managing various versions of data filespresent challenges.</li></ul><h2 id="data-preparation">Data Preparation:</h2><ul><li>A significant portion of time is spent on data cleaning andreformatting. This task can often be labor-intensive and not directlycontribute to deriving insights, yet it's unavoidable.</li><li>The process is more than just computational number crunching. Itoften involves transferring data between different tools, convertingdata formats, and managing extensive datasets.</li></ul><h2 id="analysis-phase">Analysis Phase</h2><ul><li>The core activity involves writing and refining programs to analyzedata.</li><li>Challenges arise from scripts that take excessive time to run,especially after incremental edits, and from scripts crashing due tovarious errors.</li><li>Managing output files, including keeping track of metadata, presentsadditional challenges.</li></ul><h2 id="reflection-phase">Reflection Phase</h2><ul><li>Researchers analyze outputs, take notes, hold meetings, and makecomparisons. Graphs play a significant role in visualizing andinterpreting results. Managing and comparing these graphical outputs isvital.</li></ul><h2 id="dissemination-phase">Dissemination Phase</h2><ul><li>Once the research is complete, results need to be consolidated andcommunicated, often in the form of reports or academicpublications.</li><li>Reproducing results becomes challenging with time, especially withevolving software environments.</li><li>Sharing code and data in collaborative settings introduces its ownset of challenges.</li></ul><h1id="distinct-nature-of-research-programming-compared-to-traditional-software-engineering">DistinctNature of Research Programming Compared to Traditional SoftwareEngineering</h1><ul><li>Purpose: Unlike software engineering, which focuses on creatingrobust software, research programming prioritizes insights.</li><li>Environment: Research programmers work in a diverse environmentusing various languages and tools, making it inherentlyheterogeneous.</li><li>Specifications: The research programming process is more fluid anditerative, with changing specifications based on new discoveries.</li><li>Priorities: The emphasis is on quick iteration for fasterdiscoveries rather than perfecting the code.</li><li>Expertise: A broad range of individuals, not just professionalprogrammers, engage in research programming.</li></ul><h1 id="the-role-of-modern-day-tools">The Role of Modern-Day Tools</h1><p>Modern tools designed for general programming can be beneficial forresearch programmers. However, these tools are often not optimized forthe unique characteristics of research programming. A balance needs tobe struck between the robustness of software engineering tools and theflexibility required for research programming.</p><h1 id="evolution-of-documentation-in-research">Evolution ofDocumentation in Research</h1><p>Historically, scientific research was documented meticulously inhandwritten lab notebooks. But with the rapid pace of computationalresearch, such traditional methods are no longer sufficient. While manyresearch programmers use digital note-taking methods, an ideal solutionwould seamlessly integrate notes with source code and data files.</p><h1 id="closing-thought">Closing Thought</h1><p>Recognizing and understanding these challenges are the first steps.It then becomes possible to leverage techniques from various domains,such as dynamic program analysis and recommendation systems, to enhancethe productivity of research programmers.</p><hr /><h1 id="high-level-comments">High-level Comments</h1><p>I am very interested in investigating existing formalizations andcrystallized best practices for specific tasks in Research Programming,such as "The Grammar of Graphics" for visualization tasks, and howfunctional programming can synergize with them. A clean-sheet functionaldesign has the potential to open new windows in addressing many of thesechallenges, especially those that lack adequate tool support. Ideally,while embracing a functional cleaniness, it should follow severalaspects of the UNIX and C++ philosophies.</p><ul><li>It must be driven by actual problems and its features should beimmediately useful in real world programs.</li><li>It should support and encourage the user to design and buildsoftware, even large-scale ones such as operating systems, to be triedearly.</li><li>It should provide facilities for organising programs into separate,well-defined parts, and provide facilities for combining separatelydeveloped parts. It should make it easy to make the output of everyparts become the input to another, as yet unknown, parts.</li><li>Allowing a useful feature is more important than preventing everypossible misuse.</li><li>It should work alongside other existing programming languages,rather than fostering its own separate and incompatible programmingenvironment.</li><li>If the programmer's intent is unknown, it should allow theprogrammer to specify it by providing manual control.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Research Programming</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: A Practical Guide for Using Statistical Tests to Assess Randomized Algorithms in Software Engineering</title>
    <link href="/2022/10/16/Paper-Reading-A-Practical-Guide-for-Using-Statistical-Tests-to-Assess-Randomized-Algorithms-in-Software-Engineering/"/>
    <url>/2022/10/16/Paper-Reading-A-Practical-Guide-for-Using-Statistical-Tests-to-Assess-Randomized-Algorithms-in-Software-Engineering/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/1985793.1985795">here</a>.</p><h1 id="overview">Overview</h1><p>There are many problems in software engineering which are undecidableand use randomized algorithms, such as automated unit test generation,random testing, and search algorithms (including Genetic Algorithms). Asthe outcomes of these randomized algorithms vary greatly from run torun, assessing their effectiveness is an important topic.</p><p>To uncover whether randomized algorithms are properly assessed insoftware engineering research, the authors conducted a small-scalesystematic review on three representative software engineering venues,namely IEEE Transactions of Software Engineering (TSE), IEEEInternational Conference on Software Engineering (ICSE) andInternational Symposium on Search Based Software Engineering (SSBSE), inthe year 2009. The review shows that the analyses "are either missing,inadequate, or incomplete", and "randomness is not properly taken intoaccount". The authors then put forward guidelines for properly assessingrandomized algorithms in software engineering research.</p><h1 id="definitions">Definitions</h1><dl><dt>Censoring</dt><dd>a condition in which only the <strong>range</strong> (i.e. above acertan value, below a certain value, within an interval) of ameasurement or observation is known, and its precise value is unknown.</dd><dd>Akin to <strong>clamping</strong> in saturated arithmetic.</dd><dd>Commonly encountered in software engineering experiments when<strong>time limits</strong> are used.</dd></dl><h1 id="assessment-procedure-and-guidelines">Assessment Procedure andGuidelines</h1><p>A novel randomized algorithm is commonly compared against an existingtechnique. After determing a measure to compare (e.g. source codecoverage, execution time), we should run both algorithms <strong>a largeenough number of times independently (the author recommends "a very highnumber of runs" and not the rule of thumb of <spanclass="math inline">\(n = 30\)</span> in medicine and behavioralscience, as human aspects are not involved</strong>. With the collectedmeasure data, we conduct the following:</p><h2 id="statistical-testing">Statistical Testing</h2><p>We use a <strong>statistical test</strong> to assess "whether thereis enough empirical evidence to claim a difference between the twoalgorithms".</p><p><strong>In such a statistical test, the null hypothesis is typically"there is no difference", and we verify whether we should reject thenull hypothesis.</strong></p><h3 id="definitions-related-to-statistical-testing">Definitions relatedto Statistical Testing</h3><p>There are two conflicting types of error when performing statisticaltesting: (I) we reject the null hypothesis when it is true, and (II) weaccept the null hypothesis when it is false.</p><ul><li>The <strong>p-value</strong> of a statistical test is theprobability of rejecting the null hypothesis when it is true.</li><li>The <strong>significant level <spanclass="math inline">\(\alpha\)</span></strong> of a statistical test isthe highest p-value we accept for rejecting the null hypothesis. Thereis a tradition of using <span class="math inline">\(\alpha =0.05\)</span> in the natural sciences. <strong>However, an increasingnumber of researchers believe that, and the author endorses that, suchthresholds are arbitrary, and that researchers should "simply reportp-values and let the reader decide in context".</strong></li><li>The <strong>statistical power</strong> of a statistical test is theprobability of rejecting the null hypothesis when it is false.</li></ul><h3 id="selection-of-statistical-test">Selection of StatisticalTest</h3><p>In different statistical tests, <strong>different probabilitydistributions of the collected measures</strong> are assumed, and<strong>different aspects of the probability distributions of thecollected measures</strong> are being compared. Common statistical testsinclude:</p><ul><li>parametric<ul><li>Student's t-test</li><li>Welch's t-test</li><li>F-test</li><li>ANOVA</li></ul></li><li>nonparametric<ul><li>Fisher exact test</li><li>Wilcoxon signed ranks test</li><li>Mann-Whitney U-test</li></ul></li></ul><p>When selecting a statistical test, tt is worth paying attention tothe probability distributions of the collected measures:</p><ul><li>there may be a "very strong departure from normality"</li><li>the mean and variance may not exist</li><li>the data may be censored</li></ul><h2 id="effect-size-measurement">Effect Size Measurement</h2><p>In addition to using a statistic test to assess improvement of onealgorithm over another, it is also critical to assess "the magnitude ofthe improvement", for which effect size measures are used.</p><ul><li>Unstandardized effect size measures: dependent on the unit ofmeasurement<ul><li>difference in mean</li></ul></li><li>Standardized effect size measures:<ul><li>d family / Mahalanobis distance, <strong>assumes the normality ofthe data</strong></li><li>Common Language (CL) Statistic. The probability that a randomlyselected score from the first population <spanclass="math inline">\(X_1\)</span> is greater than a randomly selectedscore from the second population <spanclass="math inline">\(X_2\)</span>, <span class="math inline">\(P(X_1&gt; X_2)\)</span>.</li><li>Measure of Stochastic Superiority. A generalization of CommonLanguage Statistic, <span class="math inline">\(A_{12} = P(X_1 &gt; X_2)+ 0.5 P(X_1 = X_2)\)</span>. <strong>Recommended.</strong></li><li>Odds ratio. A measure of "how many times greater the odds are that amember of a certain population will fall into a certain category thanthe odds are that a member of another population will fall into thatcategory". If the total number of runs is <spanclass="math inline">\(n\)</span>, and the number of times two algorithmsfind optimal solutions are <span class="math inline">\(n_1\)</span> and<span class="math inline">\(n_2\)</span>, then the odds ratio is <spanclass="math inline">\(\psi = \frac{\frac{n_1}{n - n_1}}{\frac{n_2}{n -n_2}}\)</span>. <strong>Recommended.</strong></li></ul></li></ul><h3id="multiple-statistical-tests-and-effect-size-measurements">MultipleStatistical Tests and Effect Size Measurements</h3><p>When comparing <span class="math inline">\(k\)</span> algorithms, wefrequently would like to know the performance of each algorithm"compared against all other alternatives individually". This incurs<span class="math inline">\(\frac{k (k - 1)}{2}\)</span>comparisons.</p><p>However, when doing multiple stastical tests, given a significantlevel <span class="math inline">\(\alpha\)</span> and the number oftests <span class="math inline">\(n\)</span>, the probability that atleast one null hypothesis is true is <span class="math inline">\(1 - {(1- \alpha)}^n\)</span>, which converges to <spanclass="math inline">\(1\)</span> as <spanclass="math inline">\(n\)</span> increases.</p><p>A remedy is the Bonferroni adjustment, in which we use an adjustedsignificant level <span class="math inline">\(\frac{\alpha}{n}\)</span>.However, this has been "seriously criticized in the literature", and theauthor recommends <strong>"simply report p-values and let the readerdecide in context"</strong> instead.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Exploiting Dynamic Information in IDEs Improves Speed and Correctness of Software Maintenance Tasks</title>
    <link href="/2022/10/16/Paper-Reading-Exploiting-Dynamic-Information-in-IDEs-Improves-Speed-and-Correctness-of-Software-Maintenance-Tasks/"/>
    <url>/2022/10/16/Paper-Reading-Exploiting-Dynamic-Information-in-IDEs-Improves-Speed-and-Correctness-of-Software-Maintenance-Tasks/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/TSE.2011.42">here</a>.</p><h1 id="summary">Summary</h1><p>The pervasive use of inheritance, interfaces, and runtimepolymorphism in object-oriented software systems leads to it beingunclear which concrete method is invoked at a call site. Modern IDEssuch as Eclipse offer static views of the source code, but providelittle help in revealing the execution paths an object-oriented softwaresystem actually takes at runtime.</p><p>In this situation, developers usually resort to debuggers orprofilers. However, the information extracted by such tools arevolatile, and developers cannot continuously benefit from dynamicinformation integrated in the static source views in the IDE.</p><p>To solve this problem, the authors propose Senseo, an Eclipse pluginthat collects dynamic information by running unit and/or system tests ofthe project with a customized JVM, that enriches the source views ofEclipse with dynamic information, such as:</p><ul><li>which concrete methods a particular method invokes, and howoften</li><li>which methods invoke this particular method</li><li>how many objects are allocated in methods</li><li>the dynamic collaborations between different source artifacts</li><li>a visualization of the system's Calling Context Tree</li></ul><p>These are displayed in tooltips, ruler columns, the Package Explorer,and a dedicated Collaboration Overview.</p><p>The authors conducted an experiment with 30 professional Javadevelopers solving five typical software maintenance tasks in JEdit, anunfamiliar, medium-sized software system, measured the time andcorrectness of the tasks, and conducted statistical tests on themeasurements. Senseo yields a significant decrease in time of 17.5percent and a significant increase in correctness of 33.5 percent, whichvalidates the practical usefulness of Senseo.</p><h1 id="personal-thoughts">Personal Thoughts</h1><p>There is no doubt that the idea of enriching the source views of anIDE with dynamic information, as well as its implementation Senseo, isof great practical value to developers writing object-oriented softwaresystems. However, I do have a few concerns after reading the paper.</p><ul><li>To enrich the source views of Eclipse with dynamic information,Senseo runs unit and/or system tests of the project with a customizedJVM. There are several concerns here.<ul><li>The project should have unit and/or system tests that thoroughlyexercise all units in a manner resembling an actual execution of theproject in production, otherwise, the dynamic information for some unitsmay be missing and/or inaccurate.</li><li>The unit and/or system tests should be self-contained and not relyon interacting with the environment, such as getting input from theuser, using OS services, etc. If so, a possible remedy would be to carveunit tests from such executions.</li><li>There is significant overhead in the process of collecting dynamicinformation. As the authors have reported: "On average (geometric mean),CCT creation alone causes an overhead of factor 2.68. CCT creation andcollection of dynamic information result in an overhead of factor 9.07.The total overhead, including serialization/transmission, is of factor9.47." Although the authors claim that "even though the overall overheadis high when gathering dynamic information, we do not consider this amajor issue as the application does not need to run at productive speedwhile analyzing it", this could be a problem for lengthy system tests,especially if units in the system tests are frequently modified, and newdynamic information has to be reacquired. Carving unit tests from suchsystem tests would also be a possible remedy.</li></ul></li></ul><p>Furthermore, aside from the idea and implementation of the tool,something else I appreciate and have learned from this paper is theexperimental study, in which two measures, the time and correctness ofthe tasks, are selected, and statistical tests on the measurements areconducted. This convincingly proves the effectiveness of Senseo.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Breaking the Barriers to Successful Refactoring: Observations and Tools for Extract Method</title>
    <link href="/2022/10/13/Paper-Reading-Breaking-the-Barriers-to-Successful-Refactoring-Observations-and-Tools-for-Extract-Method/"/>
    <url>/2022/10/13/Paper-Reading-Breaking-the-Barriers-to-Successful-Refactoring-Observations-and-Tools-for-Extract-Method/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1145/1368088.1368146">here</a>.</p><p>Refactoring is important to software development. Performing arefactoring is not trivial, for which refactoring tools have beendeveloped. Nevertheless, programmers do not use refactoring tools asoften as they could.</p><p>To investigate this problem, the authors focus on one type ofrefactoring and one specific tool - the Extract Method tool in theEclipse IDE.</p><ul><li>Fowler reports that Extract Method is "one of the most commonrefactorings", "a key refactoring" which if successful, means "you cango on [to do] more refactorings".</li><li>The Extract Method tool in the Eclipse IDE it is a mature,non-trivial refactoring tool.</li><li>Most refactoring tool user interfaces are very similar.</li></ul><p>The authors first conject tools are non-specific and unhelpful indiagnosing problems, and undertake a formative study observing 11programmers perform a number of Extract Method refactorings on severallarge, open-source projects, which suggest that programmers fairlyfrequently encounter a variety of errors arising from violatedrefactoring preconditions.</p><p>The authors further conjecture error messages were conflated,insufficiently descriptive, and discouraged programmers fromrefactoring, and built three visualization tools within the Eclipse IDEas solutions. Then, they conducted a study to assess whether or not thenew tools overcome these usability problems by comparing the accuracyand time to complete refactoring tasks with and without the new tools,and administered a post-test questionnaire for the subjects to expresstheir preferences. The results of the study were very positive, andsubjects found the new tools superior and helpful outside of the contextof the study.</p><p>Finally, the authors provide recommendations for future tools.</p><ul><li>Code Selection: A selection tool should be lightweight,task-specific, and help the programmer overcome unfamiliar/unusual codeformatting.</li><li>Displaying Violated Preconditions: quickly comprehensible, indicatelocation, easily distinguishable from warnings and advisories, displayamount of work required, display relations between preconditionviolations, distinguish different types of violations.</li></ul><p>The experimental study is very concise, and there are many aspectsthat can be borrowed.</p><ul><li>Undertaking a formative study to verify conjections about problemswithin current tools, before building new tools based on the verifiedconjections, and evaluating them.</li><li>The visualization comparing the the accuracy and time of<strong>each participant</strong> to complete refactoring tasks with andwithout the new tools is accurate and straightforward.</li><li>Using a questionnaire to acquire subjective feedback complimentaryto an objective evaluation.</li></ul><p>However, there are still some flaws.</p><ul><li>Only one type of refactoring (Extract Method) and one specific toolwas considered. The takeaways may not apply to other types ofrefactoring.</li><li>Several key variates were not controlled in the formative study,such as participants were free to refactor whatever code they thoughtnecessary.</li></ul><p>Future directions of work include:</p><ul><li>Replicating the study for other types of refactoring.</li><li>Build and assess new refactoring tools with increasedusability.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing</title>
    <link href="/2022/10/11/Paper-Reading-QSYM-A-Practical-Concolic-Execution-Engine-Tailored-for-Hybrid-Fuzzing/"/>
    <url>/2022/10/11/Paper-Reading-QSYM-A-Practical-Concolic-Execution-Engine-Tailored-for-Hybrid-Fuzzing/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-yun.pdf">here</a>.</p><h1id="what-is-the-problem-being-tackled-how-was-it-addressed-by-prior-work">Whatis the problem being tackled? How was it addressed by prior work?</h1><p>There are two notable technologies to automatically findvulnerabilities in software:</p><ul><li>Coverage-guided fuzzing, quickly explores the input space, but onlygood at discovering inputs leading to an execution path with loosebranch conditions</li><li>Concolic execution, good at finding inputs driving the program intotight and complex branch conditions, but very expensive to formulate andsolve constraints</li></ul><p>A hybrid approach, hybrid fuzzing, was recently proposed.</p><ul><li>The fuzzer will quickly explore trivial input spaces (looseconditions)</li><li>The concolic execution will solve the complex branches (tightconditions)</li><li>Still suffer from scaling to find real bugs in real-worldapplications. Bottlenecks are their concolic executors. The symbolicemulation is too slow in formulating path constraints, and it is oftennot even possible to generate constraints due to incomplete anderroneous environment models.</li></ul><h1id="what-are-the-innovations-proposed-in-this-paper-which-technical-innovations-are-most-compelling-to-you">Whatare the innovation(s) proposed in this paper? Which technicalinnovations are most compelling to you?</h1><p>Concolic executors adopt IR in their symbolic emulation. Although IRmakes implementation easy, it incurs additional overhead and blocksfurther optimization. According to our measurement with real-worldsoftware, only 30% of instructions require symbolic execution. Thisimplies an instruction-level approach has an opportunity to reduce thenumber of unnecessary symbolic executions.</p><p>Concolic execution engines use snapshot techniques to reduce theoverhead of re-executing a target program when exploring its multiplepaths. However, in hybrid fuzzing, test cases from the fuzzer areassociated with greatly different paths, rendering snapshotinginefficient. Furthermore, snapshots cannot reflect external status, andsolving this problem through full system concolic execution or externalenvironment modeling is expensive and/or inaccurate.</p><p>Concolic execution tries to guarantee soundness by collectingcomplete constraints. However, this can be expensive, and alsoover-constrain a path, limiting finding future paths.</p><p>To solve these problems, Qsym uses Intel Pin along with acoverage-guided fuzzer:</p><ul><li>Get input test cases and validate newly produced test cases(potentially unsound) from the fuzzer.</li><li>Employ instruction-level taint tracking, and only symbolicallyexecute tainted instructions.</li><li>Generate more relaxed (incomplete) forms of constraints that can beeasily solved (can result in unsound test cases, but quickly checkedwith fuzzer).</li><li>Fast execution makes re-execution much preferable to snapshoting forrepetitive concolic testing.</li><li>Considers external environments as "black-boxes" and simply executesthem concretely (can result in unsound test cases, but quickly checkedwith fuzzer).</li><li>Chooses the last constraint of a path for optimistic solving. Ittypically has a very simple form, and avoids solving irrelevantconstraints repeatedly tested by fuzzers. <strong>This can be applied toother domains to speed up symbolic execution, if the domain has anefficient validator like a fuzzer.</strong></li><li>If a basic block has been executed too frequently in a context (acall stack of the current execution), Qsym stops generating furtherconstraints from it. Extremely suitable for loops. <strong>This candirectly be applied to other concolic executors as a heuristic pathexploration strategy.</strong></li></ul><h1id="how-are-those-innovations-evaluated-how-does-the-papers-evaluation-match-with-the-proposed-problem-statement">Howare those innovations evaluated? How does the paper's evaluation matchwith the proposed problem statement?</h1><p>A series of experiments are conducted.</p><ol type="1"><li>To highlight the effectiveness, we applied QSYM to non-trivialprograms that are large in size and well-tested - all applications andlibraries tested by OSS-Fuzz.</li><li>To show how effectively our concolic executor can assist a fuzzer indiscovering new code paths, we measured the achieved code coverageduring the fuzzing process using Qsym and AFM with a varying number ofinput seed files. We selected libpng as a fuzzing target because itcontained various narrow-ranged checks.</li><li>To show the performance benefits of QSYM's symbolic emulation, weused the DARPA CGC dataset to compare QSYM with Driller, which placedthird in the CGC competition.</li><li>To evaluate the effect of optimistic solving, we compared Qsym withothers using the LAVA dataset, a test suite that injects hard-to-findbugs in Linux utilities to evaluate bug-finding techniques.</li><li>To show the effect of basic block pruning, we evaluated Qsym withand without this technique with four widely-used open-source programs -libjpeg, libpng, libtiff, and file.</li><li>The author then analyzes new bugs found by Qsym.</li></ol><p>These experiments comprehensively assess different innovations andsupport the notion that Qsym "scales to find real bugs in real-worldapplications". However, I do have some questions concerning theexperimental study, stated below.</p><h1id="what-remains-unclear-after-reading-the-paper-are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper">Whatremains unclear after reading the paper? Are there any clarificationquestions whose answers would substantially change your opinion of thepaper?</h1><p>Qsym generates more relaxed (incomplete) forms of constraints thatcan be easily solved. Specifically how this is done is not clear.</p><p>Questions concerning the experimental study:</p><ol type="1"><li>The experiments "to highlight the effectiveness" and "to show theperformance benefits of QSYM's symbolic emulation" seem to beredundant.</li><li>To show how effectively our concolic executor can assist a fuzzer indiscovering new code paths, we compared Qsym with AFM on libpng, becauseit contained various narrow-ranged checks. The benchmark appears to becherry-picked. This is also the case with "to show the effect of basicblock pruning".</li><li>Why are completely different datasets used in differentexperiments?</li></ol><h1id="which-problems-remain-unsolved-after-this-paper-do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper">Whichproblems remain unsolved after this paper? Do you foresee any barriersto the applicability of the technique proposed in the paper?</h1><p>The coverage-guided fuzzer used within Qsym is "vanilla" AFL. Othercoverage-guided fuzzers exist that enhance AFL. How Qsym can complementthese fuzzers can be a direction for future research.</p><p>Unlike other IR-based executors, QSYM cannot test programs targetingother architectures. We plan to overcome this limitation by improvingQSYM to work with architecture specifications, rather than a specificarchitecture implementation. <strong>(Is taint analysis on IR+JIT also apossible solution?)</strong></p><p>QSYM currently supports only memory, arithmetic, bitwise, and vectorinstructions. Other instructions, including floating-point operations,remain to be supported.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Semantic Fuzzing with Zest</title>
    <link href="/2022/10/11/Paper-Reading-Semantic-Fuzzing-with-Zest/"/>
    <url>/2022/10/11/Paper-Reading-Semantic-Fuzzing-with-Zest/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/3293882.3330576">here</a>.</p><h1 id="what-is-the-problem-being-tackled">What is the problem beingtackled?</h1><p>The paper tackles the problem of generating random, syntacticallyvalid inputs to exercise various code paths in the semantic analysisstages of programs and leveraging feedback to generate new inputs viamutations.</p><h1 id="how-was-it-addressed-by-prior-work">How was it addressed byprior work?</h1><p>On one hand, QuickCheck-like random-input generators allow generatingrandom, syntactically valid inputs. On the other hand, coverage-guidedfuzzing tools such as AFL and libFuzzer randomly mutate known bytesequences to produce new byte sequences, and if the mutated bytesequences lead to new code coverage in the test program, they are savedfor subsequent mutation.</p><h1 id="what-are-the-innovations-proposed-in-this-paper">What are theinnovation(s) proposed in this paper?</h1><p>The paper proposes Zest, a technique for automatically guidingQuickCheck-like random-input generators to exercise various code pathsin the semantic analysis stages of programs. It first converts aQuickCheck-like random-input generator to a parametric generator, whichcan generate a syntactically valid input from a byte sequence. It thenuses a coverage-guided fuzzing technique with the parametric generatorin order to produce syntactically valid input that can increase codecoverage in the semantic analysis stages.</p><h1id="how-are-those-innovations-evaluated-how-does-the-papers-evaluation-match-with-the-proposed-problem-statement">Howare those innovations evaluated? How does the paper's evaluation matchwith the proposed problem statement?</h1><p>The authors integrated Zest into the open-source JQF framework andevaluated Zest on five real-world Java benchmarks, comparing it toQuickCheck and AFL. They evaluated the three techniques on twofronts:</p><ol type="1"><li>The amount of code coverage achieved in the semantic analysis stageafter a fixed amount of time.</li><li>Their effectiveness in triggering bugs in the semantic analysisstage.</li></ol><p>QuickCheck and Zest make use of generators for synthesizingsyntactically valid input, and do not exercise code paths correspondingto parse errors in the syntax analysis stage. In contrast, AFL performsmutations directly on raw input strings, and spends most of its timetesting error paths within the syntax analysis stages.</p><p>The experimental results suggest that when given QuickCheck-likerandom-input generators, Zest excels at exercising semantic analyses andis very effective at discovering semantic bugs.</p><p>The paper's evaluation matches well with the proposed problemstatement, as the experimental design accurately assesses factorsdirectly correlated with the problem of "generating random,syntactically valid inputs to exercise various code paths in thesemantic analysis stages of programs and leveraging feedback to generatenew inputs via mutations", and the experimental results support theeffectiveness of the proposed approach.</p><h1 id="which-technical-innovations-are-most-compelling-to-you">Whichtechnical innovations are most compelling to you?</h1><p>The most compelling technical innovation is Zest's design ofgenerating a syntactically valid input from a byte sequence given aQuickCheck-like random-input generator, by using bytes from the bytesequence to "fill in" randomly generated primitive data types of variouslength (bool, char, int, etc.) required within the random-inputgenerator. This allows bit-level mutations on byte sequences tocorrespond to high-level structural mutations in the space ofsyntactically valid inputs, enabling Zest to leverage the maturecoverage-guided fuzzing algorithm originally designed for byte sequenceinputs.</p><h1id="what-remains-unclear-after-reading-the-paper-are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper">Whatremains unclear after reading the paper? Are there any clarificationquestions whose answers would substantially change your opinion of thepaper?</h1><p>The author states that the Zest algorithm "extends the CGF algorithmby keeping track of the coverage achieved by semantically valid inputs",and that "we hypothesize that this biases the search towards generatingeven more valid inputs and in turn increases code coverage in thesemantic analysis stage". However, how semantically valid inputs areused is not stated in the description of the algorithm.</p><h1id="which-problems-remain-unsolved-after-this-paper-do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-if-so-how-could-these-barriers-be-overcome">Whichproblems remain unsolved after this paper? Do you foresee any barriersto the applicability of the technique proposed in the paper? If so, howcould these barriers be overcome?</h1><p>Zest assumes the availability of QuickCheck-like random-inputgenerators to exercise the semantic analysis classes and find semanticbugs, which may be unavailable for specialized data structures. Therehas also been some recent interest in automatically generating inputgrammars from existing inputs, using machine learning and languageinference algorithms. These techniques are complementary to Zest - thegrammars generated by these techniques could be transformed intoparametric generators for Zest.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: How We Refactor, and How We Know It</title>
    <link href="/2022/10/10/Paper-Reading-How-We-Refactor-and-How-We-Know-It/"/>
    <url>/2022/10/10/Paper-Reading-How-We-Refactor-and-How-We-Know-It/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/TSE.2011.41">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-how-does-this-work-move-the-research-forward-how-was-the-work-validated">Whatwere the primary contributions of the paper as the author sees it? Howdoes this work move the research forward? How was the workvalidated?</h1><p>In his book on refactoring, Fowler catalogs 72 differentrefactorings, ranging from localized changes to more global changes, andFowler claims that refactoring produces significant benefits.</p><p>Although case studies have demonstrated that refactoring is a commonpractice and can improve code metrics, they tend to examine just a fewsoftware products.</p><p>To help put refactoring research on a sound scientific basis, wereplicate the study in wider contexts and explore factors that previousauthors may not have explored. We analyze four sets of Eclipse IDE usagedata and apply different several different refactoring-detectionstrategies to them. We then use this data to test nine hypotheses aboutrefactoring, casting doubt on several previously stated assumptionsabout how programmers refactor, while validating others.</p><ul><li>Refactoring behavior of refactoring tool developers differs fromthat of their users. Specifically, RENAMEs and MOVEs are more frequentamong users.</li><li>About 40% of refactorings performed using a tool occur in batches(several refactorings of the same kind within a short time period).</li><li>About 90% of configuration defaults of refactoring tools remainunchanged when programmers use the tools.</li><li>messages written by programmers in commit logs do not reliablyindicate the presence of refactoring.</li><li>Programmers frequently floss refactor (interleave refactoring withother types of programming activity).</li><li>About half of refactorings are not high-level, so refactoringdetection tools that look exclusively for high-level refactorings willnot detect them.</li><li>Refactorings are performed frequently.</li><li>Almost 90% of refactorings are performed manually, and the kinds ofrefactorings performed with tools differ from the kinds performedmanually.</li></ul><h1id="how-could-this-research-be-extended-how-could-this-research-be-applied-in-practice">Howcould this research be extended? How could this research be applied inpractice?</h1><p>For the toolsmith:</p><ul><li>Most kinds of refactorings will not be used as frequently as thetoolsmiths hoped. Improving the under-used tools or their documentationmay increase tool use.</li><li>Programmers often do not configure refactoring tools.Configuration-less refactoring tools, which have recently seenincreasing support in Eclipse and other environments, will suit themajority of, but not all, refactoring situations.</li><li>30 refactorings did not have tool support, the most popular of thesewas MODIFY ENTITY PROPERTY, performed 8 times, which would allowdevelopers to safely modify properties such as static or final.</li></ul><p>For researchers:</p><ul><li>Questions still remain to answer.<ul><li>Why is the RENAME refactoring tool so much more popular than otherrefactoring tools?</li><li>Why do some refactorings tend to be batched while others donot?</li></ul></li><li>Our experiments should be repeated in other projects and for otherrefactorings to validate our findings.</li></ul><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-does-the-work-apply-to-you">Whatwere the main contributions of the paper as you (the reader) see it? Howdoes the work apply to you?</h1><p>Of particular interest to me is the inspiration for the hypothesisthe authors verify - previous literature (frequently in other softwareengineering domains), personal experience, anecdotes from programmers,surveys. The benefit from this is twofold. First, it provides a sourceof inspiration for formulating hypotheses. Second, it endorses thevalidity of the hypotheses.</p><ul><li>We hypothesize refactoring behavior of refactoring tool developersdiffers from that of their users. Toleman and Welsh assume a variant ofthis hypothesis - that the designers of software tools erroneouslyconsider themselves typical tool users - and argue that the usability ofsoftware tools should be objectively evaluated.</li><li>We hypothesize that programmers typically perform refactoring inbatches. Based on personal experience and anecdotes from programmers, wesuspect that programmers often refactor several pieces of code becauseseveral related program elements may need to be refactored in order toperform a composite refactoring. In previous research, Murphy-Hill andBlack built a refactoring tool that supported refactoring severalprogram elements at once, on the assumption that this is common.</li><li>We hypothesize that programmers do not often configure refactoringtools. We suspect this because tweaking code manually after therefactoring may be easier than configuring the tool. In the past, wehave found some limited evidence that programmers perform only a smallamount of configuration of refactoring tools. When we did a small surveyin September 2007 at a Portland Java Users Group meeting, 8 programmersestimated that, on average, they supply configuration information only25% of the time.</li><li>In Xing and Stroulia's automated analysis of the Eclipse codebase,the authors conclude that "indeed refactoring is a frequent practice".Although flawed, this becomes one of the authors' hypotheses.</li></ul><p>Furthermore, some hypotheses are formed from a critique of previousliterature, combined with domain expertise and/or other literature.</p><ul><li>Several researchers have used messages attached to commits into aversion control as indicators of refactoring activity. However, wehypothesize that this assumption is false, because refactoring may be anunconscious activity, and because the programmer may consider itsubordinate to some other activity, such as adding a feature.</li><li>Past research has often drawn conclusions based on observations ofhigh-level refactorings. We hypothesize that in practice programmersalso perform many lower-level refactorings. We suspect this becauselower-level refactorings will not change the program's interface andthus programmers may feel more free to perform them.</li></ul><p>Additionally, much of the methodology presented in this paper can beborrowed.</p><ul><li>The fourth dataset used by the authors is Eclipse CVS, the versionhistory of the Eclipse and JUnit code bases extracted from theirConcurrent Versioning System (CVS) repositories. CVS does not maintainrecords showing which file revisions were committed as a singletransaction. The standard approach for recovering transactions is tofind revisions committed by the same developer with the same commitmessage within a small time window; we use a 60 second time window. Inour experiments, we randomly sampled from about 3400 source file commitsthat correspond to the same time period, the same projects, and the samedevelopers represented in Toolsmiths. Using these data, two of theauthors inferred which refactorings were performed by comparing adjacentcommits manually.</li><li>Ratzinger describes the most sophisticated strategy for findingrefactoring messages: searching for the occurrence of keywords such as"move" and "rename", and excluding "needs refactoring". We replicatedRatzinger's experiment for the Eclipse code base to nullify Ratzinger'sconclusions.</li><li>In order for refactoring activity to be defined as frequent, we seekto apply criteria that require refactoring to be habitual and occurringat regular intervals. First, we examined the Toolsmiths data todetermine how refactoring activity was spread throughout development.Second, we examined the Users data to determine how often refactoringoccurred within a programming session and whether there was significantvariation among the population.</li><li>We hypothesize that programmers often do not use refactoring tools,because existing tools may not have a sufficiently usableuser-interface. To validate this hypothesis, we correlated therefactorings that we observed by manually inspecting Eclipse CVS commitswith the refactoring tool usages in the Toolsmiths data set.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: &quot;Cloning Considered Harmful: Considered Harmful</title>
    <link href="/2022/10/05/Paper-Reading-Cloning-Considered-Harmful-Considered-Harmful/"/>
    <url>/2022/10/05/Paper-Reading-Cloning-Considered-Harmful-Considered-Harmful/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/WCRE.2006.1">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-how-was-the-work-validated">Whatwere the primary contributions of the paper as the author sees it? Howwas the work validated?</h1><p>Current literature on the topic of duplicated code in softwaresystems often considers duplication harmful to the system quality, andthe reasons commonly cited for duplicating code often have a negativeconnotation.</p><p>While these positions are sometimes correct, during our case studieswe have found that this is not universally true, and we have foundseveral situations where code duplication seems to be a reasonable oreven beneficial design option.</p><p>This paper introduces eight cloning patterns that we have uncoveredduring case studies on large software systems, and discusses theadvantages and disadvantages associated with using them.</p><ul><li>Forking, cloning used to bootstrap development of similar solutions,with the expectation that evolution of the code will occur somewhatindependently<ul><li>Hardware variation</li><li>Platform variation</li><li>Experimental variation</li></ul></li><li>Templating, directly copy behavior of existing code but appropriateabstraction mechanisms are unavailable<ul><li>Boiler-plating due to language in-expressiveness</li><li>API/Library protocols</li><li>General language or algorithmic idioms</li></ul></li><li>Customization, currently existing code does not adequately meet anew set of requirements<ul><li>Bug workarounds</li><li>Replicate and specialize</li></ul></li></ul><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-does-this-work-move-the-research-forward-how-could-this-research-be-extended">Whatwere the main contributions of the paper as you (the reader) see it? Howdoes this work move the research forward? How could this research beextended?</h1><p>This paper introduces the notion of categorizing high level patternsof cloning in a similar fashion to the cataloging of design patterns oranti-patterns. There are several benefits that can be gained from thischaracterization.</p><ol type="1"><li>It provides a flexible framework on top of which we can document ourknowledge about how and why cloning occurs in software. Thisdocumentation crystallizes a vocabulary that researchers andpractitioners can possibly use to communicate about cloning.</li><li>This categorization is a first step towards formally defining thesepatterns to aid in automated detection and classification. Theseclassifications can then be used to define metrics concerning codequality and maintenance efforts. Automatic classifications will alsoprovide us with better measures of code cloning in software systems andseverity of the problem in general.</li></ol><h1 id="how-could-this-research-be-applied-in-practice">How could thisresearch be applied in practice?</h1><p>In each uncovered cloning pattern, the author describes itsadvantages, disadvantages, how it can be managed, issues to be aware ofwhen deciding to use it as a long-term solution, as well as realexamples in large software systems. These provide practical guidelineswhen considering a trade-off between code cloning and formulatingabstractions for code reuse, as well as how to manage code cloningshould it be used, when developing a software project.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Go To Statement Considered Harmful</title>
    <link href="/2022/10/04/Paper-Reading-Go-To-Statement-Considered-Harmful/"/>
    <url>/2022/10/04/Paper-Reading-Go-To-Statement-Considered-Harmful/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf">here</a>.</p><p>The author has been familiar with the observation that the quality ofprogrammers is a decreasing function of the density of go to statementsin the programs they produce, and in this paper, he explains why the useof the go to statement has negative effects.</p><p>He first remarks that the process taking place under control of theprogram, instead of the program itself, is the true subject matter of aprogrammer's activity, and it is this process whose behavior has tosatisfy the desired specifications. He then argues that our intellectualpowers can better master static relations than visualize processesevolving in time, for which reason we should shorten the conceptual gapbetween the static program and the dynamic progress. The authorcontinues characterizing the progress of a progress, explaining that itcan be uniquely characterized by a mixed sequence of textual and/ordynamic indices, when conditionals, procedures, and repetition clausesare considered. However, the unbridled use of the go to statement has animmediate consequence that it becomes terribly hard to find a meaningfulset of coordinates in which to describe the process progress, which willin turn "make a mess of one's program".</p><p>However, in my opinion, although the go to statement is consideredharmful, abolishing the go to statement from all "higher level"programming languages is an overstatement. As the author himselfstated:</p><ul><li>The exercise to translate an arbitrary flow diagram more or lessmechanically into a jump-less one, is not to be recommended. Then theresulting flow diagram cannot be expected to be more transparent thanthe original one.</li></ul><p>There exist situations where an "arbitrary flow diagram" has to beimplemented (especially when implementing Finite-State Machines inlexers, regex engines, and protocols), and in these situations,implementing the flow diagram using go to statements is much moredirect, straightforward and easier to reason about (not to mention moreefficient) than mashing up structured programming constructs.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs</title>
    <link href="/2022/10/04/Paper-Reading-KLEE-unassisted-and-automatic-generation-of-high-coverage-tests-for-complex-systems-programs/"/>
    <url>/2022/10/04/Paper-Reading-KLEE-unassisted-and-automatic-generation-of-high-coverage-tests-for-complex-systems-programs/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://www.usenix.org/legacy/event/osdi08/tech/full_papers/cadar/cadar.pdf">here</a>.</p><h1id="what-is-the-problem-being-tackled-how-was-it-addressed-by-prior-work">Whatis the problem being tackled? How was it addressed by prior work?</h1><p>Many classes of errors are difficult to find without executing apiece of code. The importance of such testing, combined with thedifficulty and poor performance of random and manual approaches, has ledto much work in <strong>using symbolic execution to automaticallygenerate test inputs</strong>.</p><p>It has been an open question whether the approach has any hope ofconsistently achieving high coverage on real applications, facing thechallenges in handling code that interacts with the environment, and theexponential number of paths through code.</p><p>Traditional symbolic execution systems either cannot handle programsinteracting with the environment or require a complete working model.More recent work in test generation does allow external interactions,but forces them to use entirely concrete procedure call arguments, whichlimits the behaviors they can explore.</p><p>For the path explosion problem, search strategies proposed in thepast include Best First Search, Generational Search, and Hybrid ConcolicTesting. Orthogonal to search heuristics, researchers have addressed thepath explosion problem by testing paths compositionally, and by trackingthe values read and written by the program.</p><h1id="what-are-the-innovations-proposed-in-this-paper-which-technical-innovations-are-most-compelling-to-you">Whatare the innovation(s) proposed in this paper? Which technicalinnovations are most compelling to you?</h1><p>KLEE interprets programs compiled to LLVM IR, and typically requiresno source modification. It functions as a hybrid between an operatingsystem for symbolic processes and an interpreter. Each symbolic processhas a register file, stack, heap, program counter, and path condition.Unlike a normal process, storage locations for a symbolic process -registers, stack and heap objects - refer to expression trees instead ofraw data values. The leaves of an expression are symbolic variables orconstants, and the interior nodes come from LLVM IR operations.</p><p>Conditional branches take a boolean expression and alter theinstruction pointer of the symbolic process based on whether thecondition is true or false. KLEE queries the constraint solver todetermine if the branch condition is either provably true or false alongthe current path. If so, the instruction pointer is updated to theappropriate location. Otherwise, both branches are possible. KLEE forksthe symbolic process so that it can explore both paths.</p><p>The number of forked symbolic processs grows quite quickly inpractice. KLEE implements the heap as an immutable map, and portions ofthe heap structure itself can also be shared amongst multiple symbolicprocesss. Additionally, this heap structure can be forked in constanttime, which is important given the frequency of this operation.</p><p>Potentially dangerous operations implicitly generate branches thatcheck if any input value exists that could cause an error. For example,a division instruction generates a branch that checks for a zerodivisor. If so, KLEE solves the current path's constraints to produce atest case that will follow the same path when rerun on an unmodifiedversion of the checked program, and terminates the current symbolicprocess. KLEE will then continue execution on the false path, which addsthe negation of the check as a constraint (e.g., making the divisor notzero).</p><p>The core of KLEE is an interpreter loop which selects a symbolicprocess to run and then symbolically executes a single instruction inthe context of that symbolic process. Given more than one symbolicprocess, KLEE must pick which one to execute first. KLEE selects thesymbolic process to run at each instruction by uses each strategy in around robin fashion. - Random Path Selection: Use a binary tree torecord the program path followed for all active symbolic processs. Asymbolic process is selected by traversing this tree from the root andrandomly selecting the path to follow at branch points. This strategyhas two important properties. - Favors symbolic processs high in thebranch tree. They have less constraints on their symbolic inputs andhave greater freedom to reach uncovered code. - Avoids starvation whensome part of the program is rapidly creating new symbolic processs("fork bombing") as it happens when a tight loop contains a symboliccondition. - Coverage-Optimized Search: Select symbolic processs likelyto cover new code in the immediate future using heuristics.</p><p>This loop continues until there are no symbolic processs remaining,or a user-defined timeout is reached.</p><p>KLEE ensures that a symbolic process which frequently executesexpensive instructions will not dominate execution time by running eachsymbolic process for a "time slice" defined by both a maximum number ofinstructions and a maximum amount of time.</p><p>KLEE uses STP as its constraint solver. KLEE maps every memory objectin the checked code to a distinct STP array. This representationdramatically improves performance since it lets STP ignore all arraysnot referenced by a given expression. Furthermore, there are tricks tosimplify expressions and ideally eliminate queries before they reachSTP, including:</p><ul><li>Expression Rewriting</li><li>Constraint Set Simplification</li><li>Implied Value Concretization</li><li>Constraint Independence</li><li>Counter-example Cache: Redundant queries are frequent, and a simplecache is effective at eliminating a large number of them. However, it ispossible to build a more sophisticated cache due to the particularstructure of constraint sets. The counter-example cache maps sets ofconstraints to counter-examples (i.e., variable assignments), along witha special sentinel used when a set of constraints has no solution.<strong>This mapping is stored in a custom data structure — derived fromthe UBTree structure of Hoffmann and Hoehler, which allows efficientsearching for cache entries for both subsets and supersets of aconstraint set.</strong> By storing the cache in this fashion, thecounter-example cache gains three additional ways to eliminate queries.<ul><li>When a subset of a constraint set has no solution, then neither doesthe original constraint set.</li><li>When a superset of a constraint set has a solution, that solutionalso satisfies the original constraint set.</li><li>When a subset of a constraint set has a solution, it is likely thatthis is also a solution for the original set.</li></ul></li></ul><p>KLEE handles the environment by redirecting library calls to modelsthat understand the semantics of the desired action well enough togenerate the required constraints. The real environment can fail inunexpected ways. Such failures can often lead to unexpected and hard todiagnose bugs. To help catch such errors, KLEE will optionally simulateenvironmental failures by failing system calls in a controlledmanner.</p><h1id="how-are-those-innovations-evaluated-how-does-the-papers-evaluation-match-with-the-proposed-problem-statement">Howare those innovations evaluated? How does the paper's evaluation matchwith the proposed problem statement?</h1><p>Four sets of experiments are conducted.</p><ul><li>We do intensive runs to both get high coverage and find bugs onCoreutils and BusyBox tools, do a comparision with random tests anddeveloper test suites, and discuss the bugs found.</li><li>To demonstrate KLEE's applicability to bug finding, we used KLEE tocheck all 279 BusyBox tools and 84 MINIX tools in a series of shortruns.</li><li>Thus far, we have focused on finding generic errors that do notrequire knowledge of a program's intended behavior. We now show how todo much deeper checking, including verifying full functional correctnesson a finite set of explored paths. We use KLEE to find deep correctnesserrors by cross-checking purportedly equivalent Coreutils and BusyBoxtool implementations.</li><li>We have also applied KLEE to checking non-application code by usingit to check the HiStar kernel.</li></ul><p>We chose line coverage as reported by gcov as a conservative measureof KLEE-produced test case effectiveness, because it iswidely-understood and uncontroversial.</p><p>The results of the experiments are very positive, and convincinglyprove the proposed problem statement.</p><h1id="what-remains-unclear-after-reading-the-paper-are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper">Whatremains unclear after reading the paper? Are there any clarificationquestions whose answers would substantially change your opinion of thepaper?</h1><p>Coverage-Optimized Search tries to select symbolic processs likely tocover new code in the immediate future. It uses heuristics to compute aweight for each symbolic process and then randomly selects a symbolicprocess according to these weights. How these heuristics work, which iscritical for performance, is not symbolic processd, and remainsunclear.</p><p>KLEE ensures that a symbolic process which frequently executesexpensive instructions will not dominate execution time by running eachsymbolic process for a "time slice" defined by both a maximum number ofinstructions and a maximum amount of time. Precisely how this "timeslice" is calculated is also unclear.</p><p>KLEE handles the environment by redirecting library calls to modelsthat understand the semantics of the desired action well enough togenerate the required constraints. These models are written in normal Ccode which the user can readily customize, extend, or even replacewithout having to understand the internals of KLEE. However, what"understand the semantics of the desired action well enough" means isunclear.</p><h1id="which-problems-remain-unsolved-after-this-paper-do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper">Whichproblems remain unsolved after this paper? Do you foresee any barriersto the applicability of the technique proposed in the paper?</h1><p>KLEE does not currently support symbolic floating point, longjmp,threads, and assembly code. Additionally, memory objects are required tohave concrete sizes. These block KLEE's application towards floatingpoint-heavy scientific computation and data science code, and may alsolimit KLEE to simple programming languages such as C, not supporting thenumerous dynamics, including exception handling, within C++.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: CUTE: A Concolic Unit Testing Engine for C</title>
    <link href="/2022/10/02/Paper-Reading-CUTE-A-Concolic-Unit-Testing-Engine-for-C/"/>
    <url>/2022/10/02/Paper-Reading-CUTE-A-Concolic-Unit-Testing-Engine-for-C/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/1095430.1081750">here</a>.</p><p><strong>NOTE: I believe the paper to be written very obscurely, so Iwill explain the ideas of the paper in my own words.</strong></p><h1id="what-is-the-problem-being-tackled-how-was-it-addressed-by-prior-work">Whatis the problem being tackled? How was it addressed by prior work?</h1><p>Unit testing is a method for modular testing of a program'sfunctional behavior. Such testing requires specification of values forthe inputs (or test inputs) to the unit. Manual specification of suchvalues is labor intensive and cannot guarantee that all possiblebehaviors of the unit will be observed during the testing.</p><p>Several techniques have been proposed to automatically generatevalues for the inputs.</p><ul><li>Randomly choose the values over the domain of potential inputs<ul><li>Many values may lead to the same behavior and are redundant.</li><li>The probability of selecting inputs causing buggy behavior may beastronomically small.</li></ul></li><li>Symbolic Exection<ul><li>Addresses the problem of redundant executions and increases testcoverage</li><li>For large or complex units, it is intractable to maintain and solvethe constraints required for test generation</li></ul></li><li>Incrementally generating test inputs by combining concrete andsymbolic execution<ul><li>During a concrete execution, a conjunction of symbolic constraintsalong the path of execution is generated. These constraints are modifiedand then solved to generate further test inputs to direct the programalong alternative paths. If it is not feasible to solve, simplysubstitute random concrete values.</li><li>This problem is particularly complex for programs with dynamic datastructures using pointer operations. Pointers may have aliases.</li></ul></li></ul><p>In this paper, we provide a method for representing and solvingapproximate pointer constraints to generate test inputs. Our method isthus applicable to a broad class of sequential programs.</p><h1id="what-are-the-innovations-proposed-in-this-paper-which-technical-innovations-are-most-compelling-to-you">Whatare the innovation(s) proposed in this paper? Which technicalinnovations are most compelling to you?</h1><p>We consider the execution of a function to be determined by<strong>all the stack variables, global variables, and heapobjects</strong> it exercises.</p><ul><li>Only primitive types and pointer types are taken intoconsideration.</li><li>For structures and arrays, each member is considered to be aseparate variable.</li><li>External OS services are not modelled.</li></ul><p>We associate the following <strong>properties</strong> with eachstack variable, global variable, and heap object.</p><ul><li>Concrete Value</li><li>Symbolic Value</li><li>Concrete Address</li><li>Symbolic Address</li></ul><p>The branches taken within an execution can be described with apredicate sequence called a <strong>path constraint</strong>.</p><ul><li>Each predicate is described using the aforementioned stackvariables, global variables, and/or heap objects.</li><li>Symbolic values are used when available, otherwise, concrete valuesare used.</li><li>Predicates involving primitive types are of the form <spanclass="math inline">\(a_1 x_1 + \dots + a_n x_n + c~R~0, R \in \{&lt;,&gt;, \le, \ge, =, \ne\}\)</span>, where <spanclass="math inline">\(a_i, \dots, a_n, c\)</span> are integer constants.(Essentially considers only linear combinations of primitive types)</li><li>Predicates involving pointers are of the form <spanclass="math inline">\(x~R~y\)</span> or <spanclass="math inline">\(x~R~NULL\)</span>, <span class="math inline">\(R\in \{=, \ne\}\)</span>. (Essentially considers only being able toassign to a pointer NULL or another previously known address, and doesnot allow converting integers to pointers)</li></ul><p>Running process of CUTE.</p><ul><li>while True:<ul><li>Execute, in the process:<ul><li>When <strong>allocating</strong> a stack variable, global variable,or heap object <strong>without initialization</strong> (incl. functionparameters):<ul><li>Modify "known stack variables, global variables, and heap objects"if needed.</li><li>If its concrete value has been stored, initialize it to its storedconcrete value. Otherwise, generate a random concrete value for it.</li><li>Record its concrete value and concrete address.</li></ul></li><li>When <strong>allocating</strong> a stack variable, global variable,or heap object <strong>with initialization</strong>:<ul><li>Modify "known stack variables, global variables, and heap objects"if needed.</li><li>Record its concrete value and concrete address.</li><li>Record its symbolic value and symbolic address.</li></ul></li><li>When <strong>assigning</strong> an existing stack variable, globalvariable, or heap object:<ul><li>Update its concrete value.</li><li>Update its symbolic value.</li></ul></li><li>When <strong>taking a branch</strong>, add a new predicate to thepath constraint.</li></ul></li><li>After execution, <strong>negate the last predicate within the pathconstraint</strong>, and <strong>solve for the concrete values of "stackvariables, global variables, and heap objects allocated withoutinitialization"</strong>. Update their recorded concrete values.<ul><li>Solving optimizations:<ul><li>Check if the last predicate is syntactically the negation of anypreceding predicate</li><li>Identify and eliminate common arithmetic subconstraints.</li><li>Identify dependencies between predicates and exploit them. The pathconstraints from two consecutive concolic executions, <spanclass="math inline">\(C\)</span> and <spanclass="math inline">\(C&#39;\)</span> differ only in a small number ofpredicates, and their respective solutions are similar. The solvercollects all the predicates in C that are dependent on the negation ofthe last and solves for them. In practice, we have found that the sizeof this set is almost one eighth the size of <spanclass="math inline">\(C\)</span> on average.</li></ul></li></ul></li></ul></li><li>Generated random concrete values:<ul><li>Primitive Type: random number</li><li>Pointer Type: NULL</li></ul></li></ul><p>We next consider <strong>testing of functions that take datastructures as inputs</strong>. We want to test such functions with validinputs only. There are two main approaches to obtaining validinputs:</p><ul><li>Generating inputs with call sequences</li><li><strong>Use the functions that check if an input is a valid datastructure by solving them</strong>, i.e., generating input for whichthey return true. Previous techniques include a search that uses purelyconcrete execution and a search that uses symbolic execution forprimitive data but concrete values for pointers. CUTE, in contrast, usessymbolic execution for both primitive data and pointers. This allows itto solve these functions asymptotically faster than the fastest previoustechniques.</li></ul><h1id="how-are-those-innovations-evaluated-how-does-the-papers-evaluation-match-with-the-proposed-problem-statement">Howare those innovations evaluated? How does the paper's evaluation matchwith the proposed problem statement?</h1><p>We illustrate two case studies that show how CUTE can detecterrors.</p><ol type="1"><li>We applied CUTE to test its own data structures. Our goal in thiscase study was to detect memory leaks in addition to standard errorssuch as segmentation faults, assertion violation etc.</li><li>We also applied CUTE to unit test SGLIB version 1.0.1, a popular,open-source C library for generic data structures. We chose SGLIB as acase study primarily to measure the efficiency of CUTE. We found twobugs in SGLIB using CUTE.</li></ol><p>The case studies showcase the power of CUTE's concolic unit testingapproach, and match well with the proposed problem statement.</p><h1id="what-remains-unclear-after-reading-the-paper-are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper">Whatremains unclear after reading the paper? Are there any clarificationquestions whose answers would substantially change your opinion of thepaper?</h1><p>After execution, negate the last predicate within the pathconstraint, and solve for the concrete values of "stack variables,global variables, and heap objects allocated without initialization". Asolving optimization that the author proposed is "identifing andeliminating common arithmetic subconstraints". However, how this is doneis not explained.</p><h1id="which-problems-remain-unsolved-after-this-paper-do-you-foresee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper">Whichproblems remain unsolved after this paper? Do you foresee any barriersto the applicability of the technique proposed in the paper?</h1><ul><li>For structures and arrays, each member is considered to be aseparate variable. Although this facilicates analysis, this could incursignificant overhead and impede scalability.</li><li>External OS services are not modelled.</li><li>Predicates involving primitive types are of the form <spanclass="math inline">\(a_1 x_1 + \dots + a_n x_n + c~R~0, R \in \{&lt;,&gt;, \le, \ge, =, \ne\}\)</span>, where <spanclass="math inline">\(a_i, \dots, a_n, c\)</span> are integer constants.This essentially considers only linear combinations of primitivetypes.</li><li>The author shows preference to using the technique of "using thefunctions that check if an input is a valid data structure by solvingthem" to solve the problem of testing of functions that take datastructures as inputs. However, such an approach may be impossible forobject-oriented languages such as C++, in which data structures areencapsulated in classes, and the logic of validness is enforced with theconstructor and public methods of the classes.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Selection and Presentation Practices for Code Example Summarization</title>
    <link href="/2022/09/28/Paper-Reading-Selection-and-Presentation-Practices-for-Code-Example-Summarization/"/>
    <url>/2022/09/28/Paper-Reading-Selection-and-Presentation-Practices-for-Code-Example-Summarization/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1145/2635868.2635877">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-how-does-this-work-move-the-research-forward-how-could-this-research-be-applied-in-practice">Whatwere the primary contributions of the paper as the author sees it? Howdoes this work move the research forward? How could this research beapplied in practice?</h1><p>Code examples are important in modern software development. As partof the first steps toward automatic source-to-source summarization, theauthors studied how humans summarize examples to understand how toautomate the process, and propose empirically-supported hypothesesjustifying the use of specific practices.</p><p>Selection Practices - Practices Related to Language Constructs -Practices Based on Query Term - Practices Considering the Human ReaderPresentation Practices - Trimming a Line When Needed - Compressing aLarge Amount of Code - Truncating Code - Formatting Code for Readability- Improving Code</p><p>The results provide a grounded basis for the development of codeexample summarization and presentation technology.</p><h1 id="how-was-the-work-validated">How was the work validated?</h1><p>We chose a well-defined corpus of programming documents, The OfficialAndroid API Guides, which contains a mix of natural-language text andcode fragments.</p><p>We collected 156 pairs of code examples and their summaries from 16participants, along with over 26 hours of think-aloud verbalizationsdetailing the decisions of the participants during their summarizationactivities. We analyzed common practices behind these decisions acrossthe hand-generated representations, as well as the rationale behind thepractices.</p><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it">Whatwere the main contributions of the paper as you (the reader) seeit?</h1><p>In my opinion, aside from the obvious contributions of the paperpresented by the author, there is a lot to learn from the study set-upand the conceptual framework for interpreting the results.</p><ol type="1"><li>To understand the rationale behind the practices, we instructed theparticipants to verbalize their thought process using the think-aloudprotocol.</li><li>We distinguished practices concerning the type of content selectedand the way the content was presented in a summary, because evensummaries with content associated with the same part of the originalfragment could vary on how to present the summary.</li><li>To make hypotheses justifying the use of different practices, werelied on a quantitative analysis of the distribution of each practiceacross code fragments and participants. In-lined histograms presents thedistribution of observations of a given practice for the participantsover the code fragments. This provides a convenient and compactassessment of the amount of evidence for a practice.</li></ol><p>Furthermore, the authors have borrowed a lot from related domains ofresearch, including natural language generation, natural languagesummarization of code, etc. Some examples:</p><ol type="1"><li>The separation of content selection from presentation is typical ina natural language generation system.</li><li>The comments demonstrated a number of different ways to abstractcontent, including aggregating lexically and aggregating semantically -natural language generation terminology.</li><li>Seven participants injected additional natural language into thecode summaries. This motivates a novel type of transformations that mixcode and text. The only work we know of in this area is the naturalsummaries generated by Rastkar et al.</li></ol><p>This gives revelations on exploiting knowledge from related domainswhen doing our own research.</p><h1 id="how-could-this-research-be-extended">How could this research beextended?</h1><p>The goal of the study was to inform the design of conciserepresentations of source code and automatic summarization algorithms. Anatural future direction is to implement these representations andalgorithms, and conduct empirical studies assessing their usefulness insummarizing source code.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Finding and Understanding Bugs in C Compilers</title>
    <link href="/2022/09/24/Paper-Reading-Finding-and-Understanding-Bugs-in-C-Compilers/"/>
    <url>/2022/09/24/Paper-Reading-Finding-and-Understanding-Bugs-in-C-Compilers/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/1993316.1993532">here</a>.</p><h2 id="what-is-the-problem-being-tackled">What is the problem beingtackled?</h2><p>Finding compiler bugs, especially bugs in the "middle end" of acompiler that performs transformations on an intermediaterepresentation, to improve the quality of C compilers.</p><h2 id="how-was-it-addressed-by-prior-work">How was it addressed byprior work?</h2><p>Compilers have been tested using randomized methods for nearly 50years.</p><p>In 1998, McKeeman coined the term "differential testing". His workresulted in DDT, a family of program generators that conform to the Cstandard at various levels. However, DDT avoided only a small subset ofall undefined behaviors, and only then during test-case reduction, notduring normal testing. Thus, it is not a suitable basis for automaticbug-finding.</p><p>Lindig used randomly generated C programs to find several compilerbugs related to calling conventions. His tests are self-checking, butfar less expressive than Csmith.</p><p>Sheridan also used a random generator to find bugs in C compilers.Sheridan's tool produces self-checking tests. However, it is lessexpressive than Csmith and it fails to avoid undefined behavior such assigned overflow.</p><p>Zhao et al. created an automated program generator for testing anembedded C++ compiler, which allows a general test requirement, such aswhich optimization to test, to be specified.</p><h2 id="what-are-the-innovations-proposed-in-this-paper">What are theinnovation(s) proposed in this paper?</h2><p>The paper proposes Csmith, a randomized test-case generation toolwhich generates programs that cover a large subset of C while avoidingthe undefined and unspecified behaviors that would destroy its abilityto automatically find wrong-code bugs. This advances the state of theart in compiler testing.</p><p>Csmith supports compiler bug-hunting using differential testing.Csmith generates a C program, a test harness then compiles the programusing several compilers, runs the executables, and compares theoutputs.</p><h2id="how-are-those-innovations-evaluated-how-does-the-papers-evaluation-match-with-the-proposed-problem-statement">Howare those innovations evaluated? How does the paper's evaluation matchwith the proposed problem statement?</h2><p>The authors conducted five experiments.</p><ol type="1"><li>Finding and reporting bugs in a a variety of C compilers over athree-year period. They have found and reported more than 325 bugs inmainstream C compilers including GCC, LLVM, and commercial tools.</li><li>Compiling and running one million random programs using severalyears' worth of versions of GCC and LLVM, to understand how theirrobustness is evolving over time.</li><li>Evaluating Csmith's bug-finding power as a function of the size ofthe generated C programs.</li><li>Comparing Csmith's bug-finding power to that of four previous randomC program generators.</li><li>Investigating the effect of testing random programs on branch,function, and line coverage of the GCC and LLVM source code.</li></ol><p>The experiments thoroughly evaluate and demonstrate Csmith'sbug-finding power and provide guidelines for using Csmith to findbugs.</p><h2 id="which-technical-innovations-are-most-compelling-to-you">Whichtechnical innovations are most compelling to you?</h2><p>Csmith uses randomized differential testing. This has the advantagethat no oracle for test results is needed. It exploits the idea that ifone has multiple, deterministic implementations of the samespecification, all implementations must produce the same result from thesame valid input. When two implementations produce different outputs,one of them must be faulty. Given three or more implementations, atester can use voting to heuristically determine which implementationsare wrong.</p><p>How Csmith designs the results used for differential testing is alsoworthwhile. A Csmith-generated program prints a value summarizing thecomputation performed by the program, which is implemented as a checksumof the program's non-pointer global variables at the end of theprogram's execution. Thus, if changing the compiler or compiler optionscauses the checksum emitted by a Csmith-generated program to change, acompiler bug has been found.</p><p>Also compelling are the mechanisms that Csmith uses to avoidgenerating C programs that execute undefined behaviors or depend onunspecified behaviors, including performing incremental pointer anddataflow analysis in the process of generating programs.</p><h2id="what-remains-unclear-after-reading-the-paper-are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper">Whatremains unclear after reading the paper? Are there any clarificationquestions whose answers would substantially change your opinion of thepaper?</h2><p>In the process of randomly generating programs, Csmith randomlyselects an allowable production from its grammar for the current programpoint. To make the choice, it consults a probability table and a filterfunction specific to the current point: there is a table/filter pair forstatements, another for expressions, and so on. The table assigns aprobability to each of the alternatives, where the sum of theprobabilities is one.</p><p>However, how this probability table is constructed and maintained,which obviously is critical to generating high-quality random programs,is not stated in the paper, and requires clarification.</p><h2id="do-you-forsee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-if-so-how-could-these-barriers-be-overcome-which-problems-remain-unsolved-after-this-paper">Doyou forsee any barriers to the applicability of the technique proposedin the paper? If so, how could these barriers be overcome? Whichproblems remain unsolved after this paper?</h2><p>The most important language features not currently supported byCsmith are strings, dynamic memory allocation, floating-point types,unions, recursion, and function pointers. These are language featuresthat are ubiquitous in real-world programs, thus, not supporting them isa serious barrier to the applicability of Csmith. The authors plan toadd some of these features to future versions of our tool.</p><p>Although Csmith-generated programs allowed discovering bugs missed bycompilers' standard test suites, branch, function, and line coverage ofthe GCC and LLVM source code did not significantly improve compared tothe compilers' existing test suites. 'Coverage-guided' fuzzing mayrepresent a future direction of research to discover more bugs lurkingin unvisited sections of compiler source code.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Do Automatically Generated Unit Tests Find Real Faults? An Empirical Study of Effectiveness and Challenges</title>
    <link href="/2022/09/22/Paper-Reading-Do-Automatically-Generated-Unit-Tests-Find-Real-Faults-An-Empirical-Study-of-Effectiveness-and-Challenges/"/>
    <url>/2022/09/22/Paper-Reading-Do-Automatically-Generated-Unit-Tests-Find-Real-Faults-An-Empirical-Study-of-Effectiveness-and-Challenges/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/ASE.2015.86">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-how-could-this-research-be-applied-in-practice">Whatwere the primary contributions of the paper as the author sees it? Howcould this research be applied in practice?</h1><p>The paper conducts an empirical study of the effectiveness andchallenges of automatically generated unit tests at finding real faults,and derive insights to support the development of automated unit testgenerators that achieve a higher fault detection rate.</p><ol type="1"><li>Improving the obtained code coverage so that faulty statements areexecuted in the first instance.</li><li>A high code coverage ratio does not necessarily indicate that thebug was covered. Improving the propagation of faulty program states toan observable output, coupled with the generation of more sensitiveassertions, is also required.</li><li>Improving the simulation of the execution environment to detectfaults that are dependent on external factors such as date andtime.</li></ol><h1 id="how-was-the-work-validated">How was the work validated?</h1><p>The authors applied three state-of-the art unit test generation toolsfor Java (Randoop, EvoSuite, and Agitar) to the 357 real faults in theDefects4J dataset and investigated how well the generated test suitesperform at detecting these faults.</p><ol type="1"><li>To account for randomness in test generation, we generated 10 testsuites for each tool and fault.</li><li>Tools may generate flaky tests, which may also fail on the fixedversion. They are automatically removed.</li><li>Even if a test is not flaky, it might still fail on the buggyversion for reasons unrelated to the actual fault. Such false positivesare identified.</li><li>For each executed test, we collected information on whether itpassed or failed, and the reason of failure.</li><li>In order to study how code coverage relates to fault detection, wemeasured statement coverage, and also bug coverage - whether a fault was1) fully covered (all modified statements covered), 2) partially covered(some modified statements covered), or 3) not covered.</li></ol><p>To gain insights on how to increase the fault detection rate of testgeneration tools, the authors did case studies on the challenges thatprevent fault detection, and studied the root causes for flaky andfalse-positive tests.</p><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-does-the-work-apply-to-you-how-could-this-research-be-extended">Whatwere the main contributions of the paper as you (the reader) see it? Howdoes the work apply to you? How could this research be extended?</h1><p>The revelations from the case studies supporting the primarycontributions of the paper as the author sees it are particularlyimportant, as they identify specific challenges and provide plausiblesolutions for increasing the fault detection rate of test generationtools.</p><p>Creation of complex objects, such as a control flow graph, whichoften requires a certain sequence of prior method calls. Viablesolutions include seeding objects observed at runtime, mining of commonusage patterns of objects to guide object creation, or carving ofcomplex object states from system tests.</p><p>Complex strings satisfying a certain syntax. Search-based tools arecapable in principle of generating string inputs, but doing so can takevery long. Symbolic approaches using string solvers or dedicated solversfor regular expressions are generally restricted to fixed lengthstrings. If an input grammar is known, this can be used to generate testdata more efficiently.</p><p>Complex conditions which randomly initialized inputs are unlikely tosatisfy. Dynamic symbolic execution would not suffer from thisproblem.</p><p>Errors are not propagated. To some extent, this is the result offocusing on simple structural criteria such as branch coverage, ratherthan aiming to exercise more complex intra-class data flowdependencies.</p><p>Environmental dependencies and dependencies on the static state ofthe system under test resulting in flaky tests.</p><p>Aggressive mocking, which monitors and asserts on the internal state(e.g. the order of method calls) of the class under test, rather thantesting the class on what its public method returns, and its sideeffects.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: The Art of Testing Less without Sacrificing Quality</title>
    <link href="/2022/09/21/Paper-Reading-The-Art-of-Testing-Less-without-Sacrificing-Quality/"/>
    <url>/2022/09/21/Paper-Reading-The-Art-of-Testing-Less-without-Sacrificing-Quality/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://www.microsoft.com/en-us/research/publication/the-art-of-testing-less-without-sacrificing-quality/">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-how-does-this-work-move-the-research-forward">Whatwere the primary contributions of the paper as the author sees it? Howdoes this work move the research forward?</h1><p>For large complex software products, there is a need to check thatchanges do not negatively impact other parts of the software and theycomply with system constraints such as backward compatibility,performance, security etc. Ensuring these system constraints may requirecomplex test procedures, but long tests conflict with strategic aims toshorten release cycles.</p><p>To accelerate test processes without sacrificing product quality, thepaper develops a cost model for test executions based on historic testexecution results that causes no test execution runtime overhead. Thepaper then presents a novel cost based test selection strategy, THEO,which skips test executions where the expected cost of running the testexceeds the expected cost of not running it, while ensuring that alltests will execute on all code changes at least once.</p><h1 id="how-was-the-work-validated">How was the work validated?</h1><p>The paper replayed past development periods of Microsoft Windows,Office, and Dynamics with THEO. THEO would have reduced the number oftest executions by up to 50%, cutting down test time by up to 47%. Atthe same time, product quality was not sacrificed as the process ensuresthat all tests are ran at least once on all code changes. Simulationshows that THEO produced an overall cost reduction of up to $2 millionper development year, per product.</p><p>Furthermore, this paper have convinced an increasing number ofMicrosoft product teams to explore ways to integrate THEO into theiractual live production test environments. This further endorses THEO'seffectiveness.</p><h1 id="how-could-this-research-be-extended">How could this research beextended?</h1><p>The paper stated that through reducing the overall test time, THEOwould also have other impacts on the product development process, suchas increasing code velocity and developer satisfaction. An empiricalstudy on the effects of cost based test selection strategies on theseaspects would be a direction for extending this research.</p><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-does-the-work-apply-to-you-how-could-this-research-be-applied-in-practice">Whatwere the main contributions of the paper as you (the reader) see it? Howdoes the work apply to you? How could this research be applied inpractice?</h1><p>In my opinion, the main contribution of this paper, and the aspectmost able to be used as a reference in other projects, is the cost modelwhere each test execution is considered an investment and the expectedtest result considered as return of investment.</p><p>Several factors are considered in the cost model, with their valueseasily derived from past observations.</p><ol type="1"><li><span class="math inline">\(p_{TP}\)</span>, the probability thecombination of test and execution context will detect a defect (truepositive).</li><li><span class="math inline">\(p_{FP}\)</span>, the probability thecombination of test and execution context will report a false alarm(false positive).</li><li><span class="math inline">\(engineers\)</span>, the number ofengineers whose code changes passed the current code branch.</li><li><span class="math inline">\(time_{delay}\)</span>, the average timespan required to fix historic defects on the corresponding codebranch.</li></ol><p>When a test is executed:</p><ol type="1"><li><span class="math inline">\(cost_{machine}\)</span>: the per-minuteinfrastructure cost of test execution.</li><li><span class="math inline">\(cost_{inspect}\)</span>: the averagecost per test inspection, equal to inspection time times the salary ofthe engineer. For simplicity reasons, an average cost of test inspectionis used.</li></ol><p>When a test is skipped:</p><ol type="1"><li><span class="math inline">\(cost_{escaped}\)</span>: the averagecost of an escaped defect, per developer and hour of delay. Defectseverity is not modeled, as it cannot be determined beforehand, and alldefects causing development activity to freeze on the correspondingbranch must be considered severe.</li></ol><p>After collecting these data, two cost functions are calculated: theexpected cost of executing a test <spanclass="math inline">\(cost_{exec} = cost_{machine} + p_{FP} \timescost_{inspect}\)</span>, and the expected cost for not executing a test<span class="math inline">\(cost_{skip} = p_{TP} \times cost_{escaped}\times time_{delay} \times engineers\)</span>.</p><p>Through a reasonable and tested quantization like this, objectivedecisions can be made, boosting the efficiency of softwaredevelopment.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Boosting Fuzzer Eficiency: An Information Theoretic Perspective</title>
    <link href="/2022/09/20/Paper-Reading-Boosting-Fuzzer-Eficiency-An-Information-Theoretic-Perspective/"/>
    <url>/2022/09/20/Paper-Reading-Boosting-Fuzzer-Eficiency-An-Information-Theoretic-Perspective/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.6084/m9.figshare.12415622.v2">here</a>.</p><h2 id="what-is-the-problem-being-tackled">What is the problem beingtackled?</h2><p>Finding a solid theoretical foundation for fuzzing and using it toboost fuzzing efficiency is a direction of research of great practicalvalue.</p><h2 id="how-was-it-addressed-by-prior-work">How was it addressed byprior work?</h2><p>Previous works have proposed various heuristics to boost fuzzingefficiency, such as assigning more energy to seeds that have previouslybeen observed to crash, that maximize execution counts to discoveralgorithmic complexity vulnerabilities, that exercise low-probabilitypaths, etc. Furthermore, there has also been prior research intheoretical aspects of fuzzing, such as conducting a probabilisticanalysis on the efficiency of blackbox versus whitebox fuzzing,empirically investigating the scalability of non-deterministic black-and greybox fuzzing, etc.</p><h2 id="what-are-the-innovations-proposed-in-this-paper">What are theinnovation(s) proposed in this paper?</h2><p>First, the paper develops an information-theoretic foundation fornon-deterministic fuzzing.</p><h3 id="assumptions">Assumptions</h3><p>Fuzzing Heuristics remain constant throughout the fuzzingprocess.</p><h3 id="concepts">Concepts</h3><dl><dt>Neighborhood</dt><dd>All inputs generated from mutating a seed.</dd><dt>Species</dt><dd>A branch within a program.</dd><dt>Species Discovery</dt><dd>Program execution traverses a previously untraversed branch when someinput is provided to the program.</dd><dt>Incidence Frequency</dt><dd>The number of times a species is covered.</dd><dt>Energy</dt><dd>The probability the fuzzer chooses a seed for mutation.</dd><dt>Power Schedule</dt><dd>The procedure of assigning energy to a seed.</dd><dt>Local Species Distribution of a Seed</dt><dd>Given a seed, the probability of each species being covered, when aninput generated by mutation from the seed is fed to the program.</dd></dl><h3 id="entropy-in-the-context-of-fuzzing">Entropy in the Context ofFuzzing</h3><p>Using the metaphor of a "language" with "words" of varyingfrequencies, entropy in the context of fuzzing can be understood as:</p><ul><li>"Sentences" of the "language": Program executions resulting fromgenerated inputs.</li><li>"Words" of the "language": Species.</li><li>Frequencies of the "words": The frequencies of each species beingtraversed.</li></ul><p>Entropy can be calculated using the frequencies of the "words", andrepresents the frequency distribution of the "words". <strong>As highentropy implies that the species of the program have all been wellcovered, it can be used as a proxy for fuzzing efficiency.</strong></p><h3 id="local-entropy-of-a-seed">Local Entropy of a Seed</h3><p>Still using the metaphor of a "language" with "words" of varyingfrequencies, local entropy of a seed can be understood as:</p><ul><li>"Sentences" of the "language": Program executions resulting from<strong>inputs within the seed's neighborhood</strong>.</li><li>"Words" of the "language": Species.</li><li>Frequencies of the "words": The frequencies of each species beingtraversed.</li></ul><p><strong>The local entropy of a seed quantifies the information thatfeeding the inputs within the seed's neighborhood into the programreveals about the species.</strong></p><p>Second, the paper presents the first entropy-based power schedule toboost the efficiency of greybox fuzzers. More energy is assigned toseeds that elicit more information about the program's species.<strong>Thus, every time when randomly choosing a seed for mutation,each seed is assigned an energy proportional to its localentropy</strong>.</p><p>However, a new seed that has never been fuzzed will always beassigned zero energy, and they will never be chosen for mutation. Tosolve this problem, add-one smoothing is used for the frequency of thespecies.</p><p>Specifically, the frequency of species <spanclass="math inline">\(i\)</span> used to calculate local entropy of seed<span class="math inline">\(t\)</span>:</p><p><span class="math inline">\(p_i^t = \frac{Y_i^t + 1}{S + Y_1^t +\dots + Y_S^t}\)</span></p><p>Where:</p><ul><li><span class="math inline">\(Y_i^t\)</span> is the number of timesspecies <span class="math inline">\(i\)</span> has been traversed by theneighborhood of <span class="math inline">\(t\)</span>.</li><li><span class="math inline">\(S\)</span> is the total number ofspecies at the time of calculation.</li></ul><p>Furthermore, in the experiments, the authors noticed that the localentropies for different seeds were almost the same, because a smallnumber of very abundant species had a huge impact on the localentropies. Thus, the authors defined an abundance threshold <spanclass="math inline">\(\theta\)</span> which is an upper bound for <spanclass="math inline">\(Y_i^t\)</span>.</p><h2id="how-are-those-innovations-evaluated-how-does-the-papers-evaluation-match-with-the-proposed-problem-statement">Howare those innovations evaluated? How does the paper's evaluation matchwith the proposed problem statement?</h2><p>The paper provides an open-source implementation, Entropic, withinLLVM libFuzzer, and presents a substantial empirical evaluation on over250 widely-used, open-source C/C++ programs producing over 2 CPU yearsworth of data.</p><p>Four research questions were asked to evaluate the hypothesis thatincreasing information per generated input increases fuzzerefficiency.</p><ol type="1"><li>What is the empirical coverage improvement over the baseline?</li><li>How much faster are bugs detected compared to the baseline?</li><li>How does the choice of abundance threshold influence the performanceof our technique?</li><li>What is the cost of maintaining incidence frequencies?</li></ol><p>The answers to these research strongly support the hypothesis, thusthe evaluation matches well with the proposed problem statement.</p><h1 id="your-opinion-of-the-paper">Your opinion of the paper</h1><h2 id="which-technical-innovations-are-most-compelling-to-you">Whichtechnical innovations are most compelling to you?</h2><p>Developing an information-theoric foundation for non-deterministicfuzzing, in which entropy in the context of fuzzing is calculated usingthe probability distribution of species (branches). This is bothintuitive and allows us to effectively use entropy, <ahref="https://colah.github.io/posts/2015-09-Visual-Information/#conclusion">whichhas "really nice properties, and a principled origin" as a "convenientproxy"</a> for fuzzing efficiency.</p><h2id="what-remains-unclear-after-reading-the-paper-are-there-any-clarification-questions-whose-answers-would-substantially-change-your-opinion-of-the-paper-which-problems-remain-unsolved-after-this-paper">Whatremains unclear after reading the paper? Are there any clarificationquestions whose answers would substantially change your opinion of thepaper? Which problems remain unsolved after this paper?</h2><p>The paper develops an information-theoretic foundation fornon-deterministic fuzzing, before presenting the first entropy-basedpower schedule to boost the efficiency of greybox fuzzers. I havequestions regarding both aspects.</p><ol type="1"><li>Entropy is calculated using the probability distribution of species,which are branches. Is is possible to utilize a different definition of"species"?</li><li>The entropy-based power schedule assigns each seed with energyproportional to its local entropy. However, the authors noticed that thelocal entropies for different seeds were almost the same, because asmall number of very abundant species had a huge impact on the localentropies. Thus, the authors defined an abundance threshold <spanclass="math inline">\(\theta\)</span> for <spanclass="math inline">\(Y_i^t\)</span>, a task-relevant hyperparameter. Isthere a better approach for calculating the local entropies?</li></ol><h2id="do-you-forsee-any-barriers-to-the-applicability-of-the-technique-proposed-in-the-paper-if-so-how-could-these-barriers-be-overcome">Doyou forsee any barriers to the applicability of the technique proposedin the paper? If so, how could these barriers be overcome?</h2><p>As stated above, regarding the entropy-based power schedule.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: How Effective Developers Investigate Source Code: An Exploratory Study</title>
    <link href="/2022/09/19/Paper-Reading-How-Effective-Developers-Investigate-Source-Code-An-Exploratory-Study/"/>
    <url>/2022/09/19/Paper-Reading-How-Effective-Developers-Investigate-Source-Code-An-Exploratory-Study/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/TSE.2004.101">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-how-does-this-work-move-the-research-forward">Whatwere the primary contributions of the paper as the author sees it? Howdoes this work move the research forward?</h1><ol type="1"><li>The paper provides a set of detailed observations about thecharacteristics of effective program investigation. These observationsare accompanies by hypotheses that can be validated by additionalresearch and practical experience.</li><li>The paper's results support the intuitive notion that developersshould follow a general plan, perform focused searches in the context ofthis plan, and keep some form of record of their findings wheninvestigating a program.</li><li>The paper describes a methodology and analysis technique forstudying the behavior of software developers.</li></ol><h1 id="how-was-the-work-validated">How was the work validated?</h1><p>The authors conducted a study of five developers undertaking anidentical software change task on a medium-sized system, whereunderstanding the existing software is a precursor to modification andvalidation.</p><p>They did a detailed qualitative analysis of a few replicated cases,rather than a statistical analysis of causality between dependentvariables. Many previous studies were based on heavily abstractedcharacterizations of both developer behavior and success level. Itinvolved a detailed study of the examined code, the methods used tonavigate between different locations in the code, and the modifiedsource code.</p><p>They contrasted the program investigation behavior of successful andunsuccessful developers, and isolated the factors associated with thebehavior of a developer, rather than external factors (such as theinfluence of the workplace, the programming environment, etc.)</p><h1 id="how-could-this-research-be-applied-in-practice">How could thisresearch be applied in practice?</h1><p>Ensuring that developers in charge of modifying software systemsinvestigate the code of the system effectively can yield importantbenefits such as decreasing the cost of performing software changes andincreasing the quality of the change.</p><p>Understanding the nature of program investigation behavior that isassociated with successful software modification tasks can help usimprove the tool support and training programs offered to softwaredevelopers.</p><h1 id="how-could-this-research-be-extended">How could this research beextended?</h1><p>Researchers can reuse the authors' strategy (stated in "How was thework validated?") to help validate the hypotheses the authors' proposed,or to study other aspects of programmer behavior.</p><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-does-the-work-apply-to-you">Whatwere the main contributions of the paper as you (the reader) see it? Howdoes the work apply to you?</h1><p>In my opinion, the main contributions of the paper include theprimary contributions of the paper as the author sees it, how the workwas validated, and how this research could be applied in practice.However, what is most meaningful for me is how the work was validated.Such methodology is of great reference value for conducting studies onother aspects of programmer behavior. There are many technical detailswithin that have left a deep impression on me.</p><ol type="1"><li>Each phase was described entirely through written instructions, andthe subjects were given an Eclipse training phase and an investigationphase before the modification phrase.</li><li>To record the actions of a developer in the investigation andmodification phases, they recorded the developers' screens, andtranscribed the recordings into a structured list of events. Each eventcontains the properties time, method, navigation, and modification.</li><li>To analyze the quality of change, the authors analyzed the sourcecode to determine the characteristics of an ideal solution, and dividedthe task into five subtasks. The authors examined how each subject hadimplemented each subtask, and characterized its quality.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Understanding the Formulation of Information Entropy</title>
    <link href="/2022/09/16/Understanding-the-Formulation-of-Information-Entropy/"/>
    <url>/2022/09/16/Understanding-the-Formulation-of-Information-Entropy/</url>
    
    <content type="html"><![CDATA[<p>NOTE: The terms "language" and "word" are used metaphorically in thisdocument.</p><p>A "language" often has many "words", and the frequency of each "word"varies.</p><p>If a "language" <span class="math inline">\(X\)</span> has a total of<span class="math inline">\(n\)</span> "words", then we can encode aword with <span class="math inline">\(\log_{2}{n}\)</span> binary bits.<strong>But when transmitting the words, we want to keep the encoding ofeach "word" as short as possible. A common practice is that for thosehigh-frequency "words", we can use shorter encodings, and for those"words" that we use less frequently, we can allow longerencodings.</strong> An example is the Morse code encoding for a"language" consisting of 36 "words" - 26 Latin letters and 10 Arabicnumerals.</p><figure><imgsrc="https://upload.wikimedia.org/wikipedia/commons/b/b5/International_Morse_Code.svg"alt="Morse code. The &quot;word&quot; &quot;e&quot; occurs frequently, hence a short code" /><figcaption aria-hidden="true">Morse code. The "word" "e" occursfrequently, hence a short code</figcaption></figure><p>So, under some optimal encoding, what limit can the weighted averageencoding length of all "words" achieve?</p><p>Suppose our "language" has <span class="math inline">\(n\)</span>"words", <span class="math inline">\(x_1, x_2, \dots, x_n\)</span>, andtheir probability of occurrence is <span class="math inline">\(p(x_1),p(x_2), \dots, p(x_n)\)</span> (known quantities).</p><p>Assuming that the lengths of the encodings of these "words" are <spanclass="math inline">\(L(x_1), L(x_2), \dots, L(x_n)\)</span>respectively, the weighted average encoding length of each "word"is:</p><p><span class="math inline">\(\bar{L} = p(x_1) L(x_1) + \dots + p(x_n)L(x_n)\)</span></p><p>How do we find the minimum value of <spanclass="math inline">\(\bar{L}\)</span>?</p><h2 id="constraints">Constraints</h2><p>Obviously, the encoded length of all "words" is greater than 0. Butbeyond that, there is a hidden constraint.</p><p><strong>We do not allow one encoding to be a prefix of anotherencoding, otherwise there will be ambiguity during decoding</strong>.For example, assuming that the three "words" of "A", "B", and "C" in thealphabet are encoded as "0", "1", and "01" respectively, then for For acode like "001", should we decode it as "AAB" or "AC"?</p><p>We call a type of code which requires that there is no whole codeword in the system that is a prefix of any other code word in the systemas a <strong>prefix code</strong>.</p><p>This means that if we assign a shorter encoding to a "word", it willsqueeze a lot of resources out of the encoding space. For example,suppose the "word" "A" is encoded as "0", then it would "squeeze out""00", "01", etc. from the codewords.</p><p>Suppose the maximum value in <span class="math inline">\(L(x_1),L(x_2), \dots, L(x_n)\)</span> is <spanclass="math inline">\(L_{max}\)</span>. <strong>Then the encoding of all"words" are nodes on a full binary tree with a height of <spanclass="math inline">\(L_{max}\)</span>, and the full binary subtreesbelow each node have no intersection (otherwise violating the propertiesof the prefix code), as shown below</strong>.</p><figure><imgsrc="https://upload.wikimedia.org/wikipedia/commons/0/04/Kraft_inequality_example.png"alt="The encoding of all &quot;words&quot; are nodes on a full binary tree with a height of L_{max}, and the full binary subtrees below each node have no intersection" /><figcaption aria-hidden="true">The encoding of all "words" are nodes ona full binary tree with a height of <spanclass="math inline">\(L_{max}\)</span>, and the full binary subtreesbelow each node have no intersection</figcaption></figure><p>It is obvious that, <strong>all the full binary subtrees below eachnode, at most cover all the leaves of the full binary tree with height<span class="math inline">\(L_{max}\)</span>.</strong></p><p>For a "word" <span class="math inline">\(x_i, i \in \{1, 2, \dots,n\}\)</span>, the height of the full binary subtree below it is <spanclass="math inline">\(L_{max} - L(x_i)\)</span>, and it covers <spanclass="math inline">\(2^{L_{max} - L(x_i)}\)</span> leaves.</p><p>As the full binary tree with height <spanclass="math inline">\(L_{max}\)</span> has a total of <spanclass="math inline">\(2^{L_{max}}\)</span>, we have:</p><p><span class="math inline">\(2^{L_{max} - L(x_1)} + 2^{L_{max} -L(x_2)} + \dots + 2^{L_{max} - L(x_n)} \le 2^{L_{max}}\)</span></p><p>This simplifies to:</p><p><span class="math inline">\(2^{- L(x_1)} + 2^{- L(x_2)} + \dots +2^{- L(x_n)} \le 1\)</span></p><p>This is the Kraft-McMillan inequality.</p><h2 id="optimization">Optimization</h2><p>Therefore, our overall optimization objective is:</p><p><span class="math inline">\(\bar{L} = p(x_1) L(x_1) + \dots + p(x_n)L(x_n)\)</span></p><p>Subject to:</p><ul><li><span class="math inline">\(p(x_i) \in (0, 1), i \in \{1, 2, \dots,n\}\)</span> are constants</li><li><span class="math inline">\(p(x_1) + p(x_2) + \dots + p(x_n) =1\)</span></li><li><span class="math inline">\(L(x_i) &gt; 0, i \in \{1, 2, \dots,n\}\)</span> are independent variables</li><li><span class="math inline">\(2^{- L(x_1)} + 2^{- L(x_2)} + \dots +2^{- L(x_n)} \le 1\)</span></li></ul><hr /><p><strong>We can analyze the problem for the case where there are onlytwo words <span class="math inline">\(x_1, x_2\)</span></strong>. Atthis point, we have:</p><p><span class="math inline">\(\bar{L} = p(x_1) L(x_1) + p(x_2)L(x_2)\)</span></p><p>Equivalently:</p><p><span class="math inline">\(\bar{L} = p(x_1) L(x_1) + (1 - p(x_1))L(x_2)\)</span></p><p>Subject to:</p><ul><li><span class="math inline">\(p(x_1) \in (0, 1)\)</span> is aconstant</li><li><span class="math inline">\(L(x_i) &gt; 0, i \in \{1, 2\}\)</span>are independent variables</li><li><span class="math inline">\(2^{- L(x_1)} + 2^{- L(x_2)} \le1\)</span></li></ul><p>Define <span class="math inline">\(a_1 = 2^{- L(x_1)}, a_2 = 2^{-L(x_2)}\)</span>. Now we have:</p><p><span class="math inline">\(\bar{L} = - p(x_1) \log_2{a_1} - (1 -p(x_1)) \log_2{a_2}\)</span></p><p>Subject to:</p><ul><li><span class="math inline">\(p(x_1) \in (0, 1)\)</span> is aconstant</li><li><span class="math inline">\(0 &lt; a_i &lt;1, i \in \{1,2\}\)</span> are independent variables</li><li><span class="math inline">\(a_1 + a_2 \le 1\)</span></li></ul><p>At this point, <span class="math inline">\(\bar{L}\)</span> can beregarded as a binary function whose independent variables are <spanclass="math inline">\(a_1, a_2\)</span>, and the value ranges of theindependent variables <span class="math inline">\(a_1, a_2\)</span> areas follows:</p><figure><imgsrc="https://raw.githubusercontent.com/abbaswu/abbaswu.github.io-images/main/Value_ranges_of_a_1_a_2.png"alt="Value ranges of a_1, a_2" /><figcaption aria-hidden="true">Value ranges of <spanclass="math inline">\(a_1, a_2\)</span></figcaption></figure><p>We want to find the minimum value of <spanclass="math inline">\(\bar{L}(a_1, a_2)\)</span> within this range ofvalues.</p><p>The gradient of <span class="math inline">\(\bar{L}(a_1,a_2)\)</span> is as follows:</p><p><span class="math inline">\(\nabla\bar{L}(a_1, a_2) = {(-p(x_1)\log{2} \frac{1}{a_1}, -(1 - p(x_1)) \log{2}\frac{1}{a_2})}^T\)</span></p><p>Within the value range of the independent variables <spanclass="math inline">\(a_1, a_2\)</span>, <spanclass="math inline">\(\nabla\bar{L}(a_1, a_2)\)</span> is always lessthan 0, which means that <strong>with the growth of <spanclass="math inline">\(a_1, a_2\)</span>, <spanclass="math inline">\(\bar{L}(a_1, a_2)\)</span> decreases</strong>.Therefore, the maximum value of <strong><spanclass="math inline">\(\bar{L}(a_1, a_2)\)</span> must occur when <spanclass="math inline">\((a_1, a_2)\)</span> is on the boundary line <spanclass="math inline">\(a_1 + a_2 = 1\)</span></strong>.</p><p>Substituting the boundary line <span class="math inline">\(a_1 + a_2= 1\)</span> into <span class="math inline">\(\bar{L}(a_1,a_2)\)</span>, you can get a unary function:</p><p><span class="math inline">\(\bar{L}(a_1) = - p(x_1) \log_2{a_1} - (1- p(x_1)) \log_2{(1 - a_1)}\)</span></p><p>The constraints include:</p><ul><li><span class="math inline">\(p(x_1) \in (0, 1)\)</span>,constant</li><li><span class="math inline">\(0 &lt; a_1 &lt; 1\)</span></li></ul><p>The derivative of <span class="math inline">\(\bar{L}(a_1)\)</span>is as follows:</p><p><span class="math inline">\(\frac{d \bar{L}(a_1)}{d a_1} =\frac{\log{2} (a_1 - p(x_1))}{a_1 (1 - a_1)}\)</span></p><p>The constraints include:</p><ul><li><span class="math inline">\(p(x_1) \in (0, 1)\)</span> is aconstant</li><li><span class="math inline">\(0 &lt; a_1 &lt; 1\)</span></li></ul><p>When <span class="math inline">\(0 &lt; a_1 &lt; p(x_1)\)</span>,<span class="math inline">\(\frac{d \bar{L}(a_1)}{d a_1} &lt;0\)</span>, <span class="math inline">\(\bar{L}(a_1)\)</span>monotonically decreases, and when <span class="math inline">\(p(x_1)&lt; a_1 &lt; 1\)</span>, <span class="math inline">\(\frac{d\bar{L}(a_1)}{d a_1} &gt; 0\)</span>, <spanclass="math inline">\(\bar{L}(a_1)\)</span> monotonically increases.Therefore, when <span class="math inline">\(a_1 = p(x_1)\)</span>, <spanclass="math inline">\(\bar{L}(a_1)\)</span> obtains the minimumvalue.</p><p>As <span class="math inline">\(a_1 = 2^{- L(x_1)}, a_2 = 2^{-L(x_2)}\)</span>, this means that, for:</p><p><span class="math inline">\(\bar{L} = p(x_1) L(x_1) + (1 - p(x_1))L(x_2)\)</span></p><p>Subject to:</p><ul><li><span class="math inline">\(p(x_1) \in (0, 1)\)</span> is aconstant</li><li><span class="math inline">\(L(x_i) &gt; 0, i \in \{1, 2\}\)</span>are independent variables</li><li><span class="math inline">\(2^{- L(x_1)} + 2^{- L(x_2)} \le1\)</span></li></ul><p><strong><span class="math inline">\(\bar{L}\)</span>'s minima occurswhen <span class="math inline">\(L(x_1) = -\log_2{p(x_1)}, L(x_2) =-\log_2{p(x_2)}\)</span>, and the minima is <spanclass="math inline">\(- p(x_1) \log_2{p(x_1)} - p(x_2)\log_2{p(x_2)}\)</span></strong>.</p><hr /><p>Going back to the multivariate optimization problem:</p><p><span class="math inline">\(\bar{L} = p(x_1) L(x_1) + \dots + p(x_n)L(x_n)\)</span></p><p>Subject to:</p><ul><li><span class="math inline">\(p(x_i) \in (0, 1), i \in \{1, 2, \dots,n\}\)</span> are constants</li><li><span class="math inline">\(p(x_1) + p(x_2) + \dots + p(x_n) =1\)</span></li><li><span class="math inline">\(L(x_i) &gt; 0, i \in \{1, 2, \dots,n\}\)</span> are independent variables</li><li><span class="math inline">\(2^{- L(x_1)} + 2^{- L(x_2)} + \dots +2^{- L(x_n)} \le 1\)</span></li></ul><p><strong><span class="math inline">\(\bar{L}\)</span>'s minima occurswhen <span class="math inline">\(L(x_i) = -\log_2{p(x_i)}, i \in \{1, 2,\dots, n\}\)</span>, and the minima is <span class="math inline">\(-p(x_1) \log_2{p(x_1)} - \dots - p(x_n)\log_2{p(x_n)}\)</span></strong>.</p><h2 id="definition-of-information-entropy">Definition of InformationEntropy</h2><p>If a language "language" <span class="math inline">\(X\)</span> has<span class="math inline">\(n\)</span> "words", <spanclass="math inline">\(x_1, x_2, \dots, x_n\)</span>, the probability oftheir occurrence is <span class="math inline">\(p(x_1), p(x_2), \dots,p(x_n)\)</span>, then <strong>all "words" under a certain optimalencoding, the previously calculated minimum weighted average encodinglength</strong>, <span class="math inline">\(- p(x_1) \log_2{p(x_1)} -\dots - p (x_n) \log_2{p(x_n)}\)</span>, is called the<strong>information entropy</strong> of the "language", denoted as <spanclass="math inline">\(H(X)\)</span>.</p><p>The reason why it is called "information entropy" is mainly due tothe following reasons:</p><ul><li>From von Neumann's naming suggestion for Shannon: My greatestconcern was what to call it. I thought of calling it 'information,' butthe word was overly used, so I decided to call it 'uncertainty.' When Idiscussed it with John von Neumann, he had a better idea. Von Neumanntold me, 'You should call it entropy, for two reasons. <strong>In thefirst place your uncertainty function has been used in statisticalmechanics under that name, so it already has a name. In the secondplace, and more important, no one really knows what entropy really is,so in a debate you will always have the advantage.</strong></li><li>In a sense, it does reflect the frequency distribution of the"words" of "language" <span class="math inline">\(X\)</span>, just asentropy in thermodynamics reflects the distribution of microscopicparticles. <strong>The lower <span class="math inline">\(H(X)\)</span>is, the more the case that only a few words are used frequently in <spanclass="math inline">\(X\)</span>; the higher <spanclass="math inline">\(H(X)\)</span> is, the more the case that all wordsin <span class="math inline">\(X\)</span> are usedfrequency.</strong></li></ul><h2 id="links-to-explanations-of-related-concepts">Links to Explanationsof Related Concepts</h2><ul><li><ahref="https://colah.github.io/posts/2015-09-Visual-Information/#cross-entropy">CrossEntropy</a></li><li><ahref="https://colah.github.io/posts/2015-09-Visual-Information/#entropy-and-multiple-variables">JointEntropy</a></li><li><ahref="https://colah.github.io/posts/2015-09-Visual-Information/#mutual-information">MutualInformation</a></li></ul><h2 id="how-these-concept-are-applied-in-practice">How These Concept areApplied in Practice</h2><p>https://colah.github.io/posts/2015-09-Visual-Information/#conclusion</p><h2 id="references">References</h2><ul><li>https://colah.github.io/posts/2015-09-Visual-Information/</li><li>https://mbernste.github.io/posts/sourcecoding/</li><li>https://en.wikipedia.org/wiki/Kraft–McMillan_inequality</li><li>https://mathoverflow.net/questions/403036/john-von-neumanns-remark-on-entropy</li></ul>]]></content>
    
    
    <categories>
      
      <category>Mathematics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Asking and Answering Questions during a Programming Change Task</title>
    <link href="/2022/09/14/Paper-Reading-Asking-and-Answering-Questions-during-a-Programming-Change-Task/"/>
    <url>/2022/09/14/Paper-Reading-Asking-and-Answering-Questions-during-a-Programming-Change-Task/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/TSE.2008.26">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it">Whatwere the primary contributions of the paper as the author sees it?</h1><ol type="1"><li>A catalog of 44 types of questions programmers ask during softwareevaluation tasks, organized into four categories based on the kind andscope of information needed to answer a question.</li></ol><ul><li>Finding a focus point</li><li>Expanding a focus point</li><li>Understanding a subgraph</li><li>Over groups of subgraphs</li></ul><ol start="2" type="1"><li>A description of the observed behavior around answering thesequestions.</li><li>A description of how existing deployed and proposed tools do, and donot, support answering programmers' questions.</li></ol><h1 id="how-was-the-work-validated">How was the work validated?</h1><p>The author interviewed participants in two studies.</p><ol type="1"><li>9 participants in academia worked on a code base that was new tothem.</li><li>16 participants in industry worked on a code base for which they hadresponsibility.</li></ol><p>The two studies have allowed us to observe programmers in situationsthat vary along several dimensions: - the programming tools - the typeof change task - the system - paired versus individual programming -prior knowledge of the code base</p><p>The differences have increased the authors' ability to generate anextensive set of questions programmers ask.</p><p>They build rather than test theory and the specific result of thisprocess is a theoretical understanding of the situation of interestgrounded in the data collected.</p><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-does-the-work-apply-to-you">Whatwere the main contributions of the paper as you (the reader) see it? Howdoes the work apply to you?</h1><p>In my opinion, aside from the final results, three importantconsiderations learned from this paper are:</p><ol type="1"><li>Interviewing participants in two very different groups.</li><li>Developing generic versions of the questions participants asked,which slightly abstract from the specifics of a particular situation andcode base.</li><li>Compared the generic questions and categorized those questions intofour categories based on the kind and scope of information needed toanswer a question.</li></ol><p>This is an example of extracting generalized knowledge from specificcase studies, which makes it a great example to study for conductingempirical studies.</p><h1id="how-could-this-research-be-extended-how-could-this-research-be-applied-in-practice">Howcould this research be extended? How could this research be applied inpractice?</h1><p>The research identified clear gaps of tool support in answeringprogrammers' questions.</p><ol type="1"><li>Support for more refined or precise questions.</li></ol><ul><li>Some questions can he seen as more refined versions of otherquestions.</li><li>A programmer's questions also often have an explicit or implicitscope.</li><li>Due to limited tool support, programmers end up asking questionsmore globally than they intend, and, the result sets will include manyirrelevant items.</li></ul><ol start="2" type="1"><li>Support for maintaining context.</li></ol><ul><li>A particular question is often part of a larger process involvingmultiple questions.</li><li>There are missed opportunities for tools to make use of the largercontext to help programmers more efficiently scope their questions andto determine what is relevant to their higher level questions.</li></ul><ol start="3" type="1"><li>Support for piecing information together.</li></ol><ul><li>Many questions require considering multiple entities andrelationships.</li><li>In these situations, the burden is on the programmer to assemble theinformation needed to answer their intended question.</li><li>Tool support is missing for bringing information together andbuilding toward an answer.</li></ul><p>Improved tools and an assessment of these tools in answering thesequestions present directions for future research.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Qualitative Methods in Empirical Studies of Software Engineering</title>
    <link href="/2022/09/14/Paper-Reading-Qualitative-Methods-in-Empirical-Studies-of-Software-Engineering/"/>
    <url>/2022/09/14/Paper-Reading-Qualitative-Methods-in-Empirical-Studies-of-Software-Engineering/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/32.799955">here</a>.</p><h1id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it-how-does-this-work-move-the-research-forward">Whatwere the primary contributions of the paper as the author sees it? Howdoes this work move the research forward?</h1><p>With empirical studies of software engineering beginning to addressthe human aspects of software development, the author presents andreviews a number of different methods for the collection and analysis ofqualitative data, and describes them in terms of how they might beincorporated into empirical studies of software engineering, inparticular how they might be combines with quantitative methods.</p><ul><li>Collecting Qualitative Data<ul><li>Participant Observation</li><li>Interviewing</li></ul></li><li>Extracting Quantitative Values from Qualitative Data forQuantitative Analysis (Coding)</li><li>Analyzing Qualitative Data<ul><li>Theory Generation: extract from a set of field notes a statement orpreposition that is supported in multiple ways by the data.</li><li>Theory Confirmation: confirming a preposition after it has beengenerated from the data.</li></ul></li></ul><h1id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-could-this-research-be-applied-in-practice">Whatwere the main contributions of the paper as you (the reader) see it? Howcould this research be applied in practice?</h1><p>Aside from the primary contributions of the paper as the author seesit, in my opinion, another major contribution of the paper isidentifying the four main categories of empirical studies, andexplaining in detail how combinations of quantitative and qualitativemethods can be designed for each category.</p><p>The four main categories of empirical studies: - Blockedsubject-project study: - Several projects, several subjects. - Reducesbias, but increases the cost of the experiment. - Replicated projectstudy: - One project, several subjects. - Isolates the effect ofdifferences between subjects. - Multiproject variation: - Severalprojects, one subject. - Observes the performance of the subject on aproject before some treatment is applied, and on a different projectafter that treatment is applied. - Single project study: - One project,one subject. - Similar to a case study. - Certain attributes areexamined and possibly compared to some baseline.</p><p>How combinations of quantitative and qualitative methods can bedesigned for each category: - Blocked subject-project study, Replicatedproject study: - When testing hypotheses and finding casualrelationships between variables, use qualitative data to illuminate thestatistical results. - Multiproject variation study: - Qualitativeanalysis: revealing new issues and tracking changes relative to otherissues. - Quantitative analysis: looking more closely at the issuessuggested by the qualitative analysis. - Single project study: - First,data is collected qualitatively through interviews. - A taxonomy of thequestion under research is generated. - Part of the interview data iscoded to yield quantitative variables. - Any relationships found betweenquantitative variables are checked against qualitative data.</p><h1 id="how-was-the-work-validated">How was the work validated?</h1><p>Examples, interviews, quotes from experts, and paper citations areused to validate the points presented when reviewing a number ofdifferent methods for the collection and analysis of qualitative data,identifying the four main categories of empirical studies, andexplaining in detail how combinations of quantitative and qualitativemethods can be designed for each category.</p><h1 id="how-could-this-research-be-extended">How could this research beextended?</h1><p>In the last paragraph, the author points out that "we must exploit tothe fullest every opportunity we do have, by collecting and analyzing asmuch data of as many different types as possible". Aside from theexamples presented in the paper, what other types of data can becollected, and how they can be analyzed, is a future direction ofresearch.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: No Silver Bullet Essence and Accidents of Software Engineering</title>
    <link href="/2022/09/12/Paper-Reading-No-Silver-Bullet-Essence-and-Accidents-of-Software-Engineering/"/>
    <url>/2022/09/12/Paper-Reading-No-Silver-Bullet-Essence-and-Accidents-of-Software-Engineering/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://doi.org/10.1109/MC.1987.1663532">here</a>.</p><h1 id="how-does-this-work-move-the-research-forward">How does this workmove the research forward?</h1><h2id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it">Whatwere the primary contributions of the paper as the author sees it?</h2><p>The author concludes that there is no elixir or "silver bullet" tothe problems software engineering is facing. Furthermore, the authoralso examines encouraging innovations, and shows that a disciplined,consistent effort to develop, propagate, and exploit them shouldalleviate the problem.</p><h2id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it">Whatwere the main contributions of the paper as you (the reader) seeit?</h2><p>In my opinion, what the paper is most remarkable at is shedding lightupon the nature of the software problem and its implications.</p><ol type="1"><li>The essence of a software entity is a construct of interlockingconcepts that cannot be accurately visualized. The complexity ofsoftware is an essential property, and it increases non-linearly withsize. This has many implications.</li></ol><ul><li>Difficulty of design.</li><li>Hindrance of communication among team members, which leads toproduct flaws, cost overruns, schedule delays.</li><li>Hard to use programs.</li><li>Difficulty of extending to new functions without creating sideeffects.</li><li>Security trapdoors.</li><li>Personnel turnover incurs tremendous learning and understandingburden.</li></ul><ol start="2" type="1"><li>Software is constantly subject to pressure for change.</li></ol><p>The aforementioned points clarified by the paper illuminates researchdirections in software engineering aimed at ameliorating the softwareproblem.</p><h2 id="how-could-this-research-be-extended">How could this research beextended?</h2><p>In the last section of the paper, the author examines promisingattacks on the essence of the software problem.</p><ul><li>Buying off-the-shelf software instead of building in-housesoftware.</li><li>Rapid prototyping and iterative specification of requirements withclient feedback.</li><li>Incremental development of software from a simple and incomplete,yet running, system.</li><li>Growing great designers who are the core of the developmentteam.</li></ul><p>The effectiveness of these and other approaches in mitigating thesoftware problem could be assessed in subsequent works.</p><h1 id="how-was-the-work-validated">How was the work validated?</h1><ol type="1"><li>First, the author examines the nature of the software problem andits implications.</li><li>Further on, the author recalls the three steps in softwaretechnology that have been most fruitful in the past - high-levellanguages, time-sharing, and unified programming environments,concluding that they have their limits and the difficulties that theyattacked are accidental, not essential.</li><li>The author continues to consider the technical developments that aremost often advanced as potential silver bullets - high-level languageadvances, object-oriented programming, artificial intelligence,automatic programming, graphical programming, program verification,environments and tools, workstations - analyzing the problems theyassess, their advantages, and their disadvantages.</li><li>Finally, the author presents promising attacks on the conceptualessence, explaining why they would be useful.</li></ol><h1 id="how-could-this-research-be-applied-in-practice">How could thisresearch be applied in practice?</h1><p>The lessons learned from this research are of great practicalvalue.</p><ol type="1"><li>In shedding light upon the nature of the software problem and itsimplications, the author provides criteria for organizations to assessthe effectiveness of their development practices.</li><li>In considering the technical developments that are most oftenadvanced as potential silver bullets, the author examines theiradvantages, and their disadvantages, and provide insights into whetherto, and how to adequately use them.</li><li>In presenting promising attacks on the conceptual essence, theauthor provides meaningful suggestions for organizations to improvetheir software development processes, and provides convincing rationalefor doing so.</li></ol><p>As this is a classic paper, many promising attacks on the conceptualessence have already materialized and become mainstream.</p><ul><li>Rapid prototyping and incremental development have been manifestedas "agile development" and have been widely adopted.</li><li>With the advent of the open-source revolution and code-hostingplatforms such as GitHub, reusing off-the-shelf software instead ofbuilding in-house software has become ubiquitous.</li></ul><p>However, the call for organizations to "grow great designers who arethe core of the development team" incurs significant requirements oncorporate management competency, and sadly, hasn't fully becomereality.</p><h1 id="how-does-the-work-apply-to-you">How does the work apply toyou?</h1><p>It sheds light upon the nature of the software problem and itsimplications, illuminates research directions in software engineeringaimed at ameliorating the software problem, and provides a referenceresearch methodology for problems within software engineering.</p>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: Software&#39;s Chronic Crisis</title>
    <link href="/2022/09/12/Paper-Reading-Software-s-Chronic-Crisis/"/>
    <url>/2022/09/12/Paper-Reading-Software-s-Chronic-Crisis/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://github.com/ubccpsc/507/tree/2022sept">Advanced SoftwareEngineering</a>. The original paper can be found <ahref="https://www.cse.psu.edu/~gxt29/bug/localCopies/SoftwareCrisis.html">here</a>.</p><h1 id="how-does-this-work-move-the-research-forward">How does this workmove the research forward?</h1><h2id="what-were-the-primary-contributions-of-the-paper-as-the-author-sees-it">Whatwere the primary contributions of the paper as the author sees it?</h2><p>The author identifies software's chronic crisis and how it isexacerbated by current trends in software engineering.</p><p>The vast majority of code is handcrafted by artisans using techniquesthey neither measure nor are able to repeat consistently. The softwareindustry remains short of the mature engineering discipline needed tomeet the demands of an information-age society, including gettingsoftware right the first time in embedded environments, distributedsystems and systems integration, rapid increasing system sizes, andsystems becoming so complex that no manager can comprehend theentirety.</p><p>Later, the author analyzes proposed remedies to the aforementionedproblems and points out directions for future work.</p><p>Remedies:</p><ul><li>Capability Maturity Model, which quantifies a developer's softwareengineering and management excellence.</li><li>Consistent and quantitative measurement of development.</li><li>Strategies to avoid bugs or attack them early.<ul><li>Recognizing changing requirements</li><li>Growing software from rapid prototypes and customer feedback</li><li>Formal verification when necessary</li><li>Clean-room process</li><li>Cautious approach to technological innovations such asobject-oriented analysis and programming</li></ul></li></ul><p>Directions for Future Work:</p><ul><li>An experimental branch of computer science to separate the generalresults from the accidental</li><li>Standard unit of measurement of developer productivity</li><li>Codified proven solutions for novices</li><li>Academic-industrial collaboration to gather data and try things</li><li>Generalized, reusable software components</li><li>Certifying software engineers</li><li>Outsourcing</li><li>More software development-oriented computer science curricula</li></ul><h2id="what-were-the-main-contributions-of-the-paper-as-you-the-reader-see-it-how-could-this-research-be-applied-in-practice">Whatwere the main contributions of the paper as you (the reader) see it? Howcould this research be applied in practice?</h2><p><strong>Aside for the primary contributions of the paper as theauthor sees it</strong>, in my opinion, a major contribution of thepaper in a practical sense are revelations for improving <strong>theculture within software developing organizations</strong>. Forexample,</p><ul><li>Focus on interchangeability.</li><li>Follow best practices.</li><li>Fix not just the bug but also the flaw in the testing process thatallowed it to slip through.</li><li>Value verification in addition to innovation.</li><li>Pay attention to the difference in competence betweenemployees.</li></ul><p>Furthermore, as a historical paper, many of its proposals havealready materialized. For example, the open-source revolution andcollaboration platforms such as GitHub have greatly facilitatedgathering data and trying things for research, and has provided a wealthof generalized, reusable software components.</p><h2 id="how-could-this-research-be-extended">How could this research beextended?</h2><p>Implementing and assessing the proposed directions for future workrepresents a natural extension of this research.</p><h1 id="how-was-the-work-validated">How was the work validated?</h1><p>The authors validate their arguments on software's chronic crisis andbase their proposals for remedies and future work by analyzing realcases in software engineering, as well as compiling the opinions ofexperts in the field, including university professors and corporatemanagers.</p><h1 id="how-does-the-work-apply-to-you">How does the work apply toyou?</h1><ol type="1"><li>From a theoretical perspective, as a milestone paper in the domainof software engineering, this paper provides a model researchmethodology for practical problems within software engineering -analyzing real cases and compiling the opinions of experts.</li><li>From a practical perspective, this paper identifies core values andskills that us, as practitioners of software engineering, should firmlygrasp.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Advanced Software Engineering</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper Reading: An empirical study of the reliability of UNIX utilities</title>
    <link href="/2022/09/10/Paper-Reading-An-empirical-study-of-the-reliability-of-UNIX-utilities/"/>
    <url>/2022/09/10/Paper-Reading-An-empirical-study-of-the-reliability-of-UNIX-utilities/</url>
    
    <content type="html"><![CDATA[<p>NOTE: This is a Paper Reading for <ahref="https://www.carolemieux.com/teaching/CPSC539L_2022w1.html">Topicsin Programming Languages: Automated Testing, Bug Detection, and ProgramAnalysis</a>. The original paper can be found <ahref="https://doi.org/10.1145/96267.96279">here</a>.</p><p>"An empirical study of the reliability of UNIX utilities" is the workthat spawned research into the domain of software fuzzing. It proposes atechnique later known as <strong>random fuzzing</strong>, testing thereliability of UNIX utilities by feeding them a stream of randomlygenerated characters and checking whether the program crashed with acore dump or hangs.</p><p>Although the technique is simple and is not a substitute for formalverification or testing, it is <strong>inexpensive and easy toapply</strong>. Its <strong>effectiveness in identifying bugs andincreasing overall system reliability</strong> has been proven in manyways.</p><ol type="1"><li>It crashed 25-33% of the utility programs considered to be"reliable" on each platform.</li><li><strong>It was able to find recurring security bugs resulting frombad programming practices that even the best static analysis tools havelimited success in detecting</strong>, including:</li></ol><ul><li>Accessing outside the bounds of a buffer</li><li>Dereferencing a null pointer</li><li>Unintentionally overwriting data or code</li><li>Ignoring return codes, especially error-indicating return codes</li><li>Faulty communication with subprocesses</li><li>Unintended interaction between modules</li><li>Improper error handling</li><li>Signed characters</li><li>Race conditions during signal handling</li></ul><ol start="3" type="1"><li><strong>Its relevance has remained strong over the years.</strong>Subsequent studies using the same technique showed that similar problemsalso existed within other operating systems, such as Microsoft Windows.Even after thirty years, the utility programs in the modern Unixdistributions of Linux, macOS, and FreeBSD are still crashing at anoticeable rate and not getting better, as evidenced in "The Relevanceof Classic Fuzz Testing: Have We Solved This One?"</li></ol><p>The contributions of this work is <strong>multi-fold</strong>.</p><ol type="1"><li>As mentioned before, it proposed random fuzzing, an inexpensive,easy to apply, and time-proven way of finding security bugs which iscomplimentary with formal verification and testing.</li><li>It spawned research into the domain of software fuzzing. New fuzztools usually take a gray- or white-box approach, diving deeper into aprogram's control flow, and they have been applied to many new contexts.However, they often require more advanced specification of the inputand/or long execution times to explore the input and programcontrol-flow space.</li><li>It provides revelations for software engineering: good design, goodeducation, ongoing training, testing integrated into the developmentcycle, and most importantly, a culture that promotes and rewardsreliability.</li></ol><p>Some personal thoughts after reading the paper.</p><ol type="1"><li><strong>Given the source code of a program and an input, what is themechanism through which the researchers determine the position where theprogram crashes and hangs when given the input?</strong> This ismentioned in neither "An empirical study of the reliability of UNIXutilities" nor its sequel "The Relevance of Classic Fuzz Testing: HaveWe Solved This One?", but is of great practical value.</li><li><strong>There is a surprising number of security bugs stemming fromlanguage defects such as not checking array bounds and dereferencingnull pointers, as well as ad-hoc, hacky solutions to recurring problemssuch as lexical analysis, syntax analysis, structured error handling, aswell as graph algorithms including cycle detection, topological sort,etc.</strong> Personally, this is not my style of coding. I makeextensive a lot of "safe" language constructs such as null coalescing,heavily exploit performant and well-tested algorithms within standardlibraries and widely-adapted third-party libraries (such as boost in C++and networkx in Python), and use theoretically sound tools (such asautomatically generated LALR parsers for syntax analysis) in softwareprojects. <strong>The efficiency, effectiveness, and practical value ofthese and other solutions, as well as how they can be improved, is aninteresting question that comes to my mind after reading thispaper.</strong></li></ol>]]></content>
    
    
    <categories>
      
      <category>Paper Reading</category>
      
      <category>Topics in Programming Languages: Automated Testing, Bug Detection, and Program Analysis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
